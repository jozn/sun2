package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// DirectMessage represents a row from 'sun_chat.direct_message'.

// Manualy copy this to project
type DirectMessage__ struct {
	ChatKey            string `json:"ChatKey"`            // ChatKey -
	MessageId          int    `json:"MessageId"`          // MessageId -
	RoomKey            string `json:"RoomKey"`            // RoomKey -
	UserId             int    `json:"UserId"`             // UserId -
	MessageFileId      int    `json:"MessageFileId"`      // MessageFileId -
	MessageTypeEnum    int    `json:"MessageTypeEnum"`    // MessageTypeEnum -
	Text               string `json:"Text"`               // Text -
	CreatedTime        int    `json:"CreatedTime"`        // CreatedTime -
	Seq                int    `json:"Seq"`                // Seq -
	DeliviryStatusEnum int    `json:"DeliviryStatusEnum"` // DeliviryStatusEnum -
	ExtraPB            []byte `json:"ExtraPB"`            // ExtraPB -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DirectMessage exists in the database.
func (dm *DirectMessage) Exists() bool {
	return dm._exists
}

// Deleted provides information if the DirectMessage has been deleted from the database.
func (dm *DirectMessage) Deleted() bool {
	return dm._deleted
}

// Insert inserts the DirectMessage to the database.
func (dm *DirectMessage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_chat.direct_message (` +
		`ChatKey, MessageId, RoomKey, UserId, MessageFileId, MessageTypeEnum, Text, CreatedTime, Seq, DeliviryStatusEnum, ExtraPB` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, dm.ChatKey, dm.MessageId, dm.RoomKey, dm.UserId, dm.MessageFileId, dm.MessageTypeEnum, dm.Text, dm.CreatedTime, dm.Seq, dm.DeliviryStatusEnum, dm.ExtraPB)
	}
	_, err = db.Exec(sqlstr, dm.ChatKey, dm.MessageId, dm.RoomKey, dm.UserId, dm.MessageFileId, dm.MessageTypeEnum, dm.Text, dm.CreatedTime, dm.Seq, dm.DeliviryStatusEnum, dm.ExtraPB)
	if err != nil {
		return err
	}

	// set existence
	dm._exists = true

	OnDirectMessage_AfterInsert(dm)

	return nil
}

// Insert inserts the DirectMessage to the database.
func (dm *DirectMessage) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_chat.direct_message (` +
		`ChatKey, MessageId, RoomKey, UserId, MessageFileId, MessageTypeEnum, Text, CreatedTime, Seq, DeliviryStatusEnum, ExtraPB` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, dm.ChatKey, dm.MessageId, dm.RoomKey, dm.UserId, dm.MessageFileId, dm.MessageTypeEnum, dm.Text, dm.CreatedTime, dm.Seq, dm.DeliviryStatusEnum, dm.ExtraPB)
	}
	_, err = db.Exec(sqlstr, dm.ChatKey, dm.MessageId, dm.RoomKey, dm.UserId, dm.MessageFileId, dm.MessageTypeEnum, dm.Text, dm.CreatedTime, dm.Seq, dm.DeliviryStatusEnum, dm.ExtraPB)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return err
	}

	dm._exists = true

	OnDirectMessage_AfterInsert(dm)

	return nil
}

// Update updates the DirectMessage in the database.
func (dm *DirectMessage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if dm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_chat.direct_message SET ` +
		`ChatKey = ?, RoomKey = ?, UserId = ?, MessageFileId = ?, MessageTypeEnum = ?, Text = ?, CreatedTime = ?, Seq = ?, DeliviryStatusEnum = ?, ExtraPB = ?` +
		` WHERE MessageId = ?`

	// run query
	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, dm.ChatKey, dm.RoomKey, dm.UserId, dm.MessageFileId, dm.MessageTypeEnum, dm.Text, dm.CreatedTime, dm.Seq, dm.DeliviryStatusEnum, dm.ExtraPB, dm.MessageId)
	}
	_, err = db.Exec(sqlstr, dm.ChatKey, dm.RoomKey, dm.UserId, dm.MessageFileId, dm.MessageTypeEnum, dm.Text, dm.CreatedTime, dm.Seq, dm.DeliviryStatusEnum, dm.ExtraPB, dm.MessageId)

	if LogTableSqlReq.DirectMessage {
		XOLogErr(err)
	}
	OnDirectMessage_AfterUpdate(dm)

	return err
}

// Save saves the DirectMessage to the database.
func (dm *DirectMessage) Save(db XODB) error {
	if dm.Exists() {
		return dm.Update(db)
	}

	return dm.Replace(db)
}

// Delete deletes the DirectMessage from the database.
func (dm *DirectMessage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dm._exists {
		return nil
	}

	// if deleted, bail
	if dm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_chat.direct_message WHERE MessageId = ?`

	// run query
	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, dm.MessageId)
	}
	_, err = db.Exec(sqlstr, dm.MessageId)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	dm._deleted = true

	OnDirectMessage_AfterDelete(dm)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __DirectMessage_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __DirectMessage_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __DirectMessage_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewDirectMessage_Deleter() *__DirectMessage_Deleter {
	d := __DirectMessage_Deleter{whereSep: " AND "}
	return &d
}

func NewDirectMessage_Updater() *__DirectMessage_Updater {
	u := __DirectMessage_Updater{whereSep: " AND "}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewDirectMessage_Selector() *__DirectMessage_Selector {
	u := __DirectMessage_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__DirectMessage_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__DirectMessage_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__DirectMessage_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__DirectMessage_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__DirectMessage_Deleter) Or() *__DirectMessage_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__DirectMessage_Deleter) MessageId_In(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) MessageId_Ins(ins ...int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) MessageId_NotIn(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) MessageId_Eq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageId_NotEq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageId_LT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageId_LE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageId_GT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageId_GE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Deleter) UserId_In(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) UserId_Ins(ins ...int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) UserId_NotIn(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) UserId_Eq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) UserId_NotEq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) UserId_LT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) UserId_LE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) UserId_GT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) UserId_GE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Deleter) MessageFileId_In(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) MessageFileId_Ins(ins ...int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) MessageFileId_NotIn(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) MessageFileId_Eq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageFileId_NotEq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageFileId_LT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageFileId_LE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageFileId_GT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageFileId_GE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Deleter) MessageTypeEnum_In(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) MessageTypeEnum_Ins(ins ...int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) MessageTypeEnum_NotIn(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) MessageTypeEnum_Eq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageTypeEnum_NotEq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageTypeEnum_LT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageTypeEnum_LE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageTypeEnum_GT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) MessageTypeEnum_GE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Deleter) CreatedTime_In(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) CreatedTime_Ins(ins ...int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) CreatedTime_NotIn(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) CreatedTime_Eq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) CreatedTime_NotEq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) CreatedTime_LT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) CreatedTime_LE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) CreatedTime_GT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) CreatedTime_GE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Deleter) Seq_In(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) Seq_Ins(ins ...int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) Seq_NotIn(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) Seq_Eq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) Seq_NotEq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) Seq_LT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) Seq_LE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) Seq_GT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) Seq_GE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Deleter) DeliviryStatusEnum_In(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) DeliviryStatusEnum_Ins(ins ...int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) DeliviryStatusEnum_NotIn(ins []int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) DeliviryStatusEnum_Eq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) DeliviryStatusEnum_NotEq(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) DeliviryStatusEnum_LT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) DeliviryStatusEnum_LE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) DeliviryStatusEnum_GT(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) DeliviryStatusEnum_GE(val int) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__DirectMessage_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__DirectMessage_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__DirectMessage_Updater) Or() *__DirectMessage_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__DirectMessage_Updater) MessageId_In(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) MessageId_Ins(ins ...int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) MessageId_NotIn(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) MessageId_Eq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageId_NotEq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageId_LT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageId_LE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageId_GT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageId_GE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Updater) UserId_In(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) UserId_Ins(ins ...int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) UserId_NotIn(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) UserId_Eq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) UserId_NotEq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) UserId_LT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) UserId_LE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) UserId_GT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) UserId_GE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Updater) MessageFileId_In(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) MessageFileId_Ins(ins ...int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) MessageFileId_NotIn(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) MessageFileId_Eq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageFileId_NotEq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageFileId_LT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageFileId_LE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageFileId_GT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageFileId_GE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Updater) MessageTypeEnum_In(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) MessageTypeEnum_Ins(ins ...int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) MessageTypeEnum_NotIn(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) MessageTypeEnum_Eq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageTypeEnum_NotEq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageTypeEnum_LT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageTypeEnum_LE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageTypeEnum_GT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) MessageTypeEnum_GE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Updater) CreatedTime_In(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) CreatedTime_Ins(ins ...int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) CreatedTime_NotIn(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) CreatedTime_Eq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) CreatedTime_NotEq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) CreatedTime_LT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) CreatedTime_LE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) CreatedTime_GT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) CreatedTime_GE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Updater) Seq_In(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) Seq_Ins(ins ...int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) Seq_NotIn(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) Seq_Eq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) Seq_NotEq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) Seq_LT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) Seq_LE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) Seq_GT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) Seq_GE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Updater) DeliviryStatusEnum_In(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) DeliviryStatusEnum_Ins(ins ...int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) DeliviryStatusEnum_NotIn(ins []int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) DeliviryStatusEnum_Eq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) DeliviryStatusEnum_NotEq(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) DeliviryStatusEnum_LT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) DeliviryStatusEnum_LE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) DeliviryStatusEnum_GT(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) DeliviryStatusEnum_GE(val int) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__DirectMessage_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__DirectMessage_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__DirectMessage_Selector) Or() *__DirectMessage_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__DirectMessage_Selector) MessageId_In(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) MessageId_Ins(ins ...int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) MessageId_NotIn(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) MessageId_Eq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageId_NotEq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageId_LT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageId_LE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageId_GT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageId_GE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Selector) UserId_In(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) UserId_Ins(ins ...int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) UserId_NotIn(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) UserId_Eq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) UserId_NotEq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) UserId_LT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) UserId_LE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) UserId_GT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) UserId_GE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Selector) MessageFileId_In(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) MessageFileId_Ins(ins ...int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) MessageFileId_NotIn(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) MessageFileId_Eq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageFileId_NotEq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageFileId_LT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageFileId_LE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageFileId_GT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageFileId_GE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Selector) MessageTypeEnum_In(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) MessageTypeEnum_Ins(ins ...int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) MessageTypeEnum_NotIn(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) MessageTypeEnum_Eq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageTypeEnum_NotEq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageTypeEnum_LT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageTypeEnum_LE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageTypeEnum_GT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) MessageTypeEnum_GE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Selector) CreatedTime_In(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) CreatedTime_Ins(ins ...int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) CreatedTime_NotIn(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) CreatedTime_Eq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) CreatedTime_NotEq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) CreatedTime_LT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) CreatedTime_LE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) CreatedTime_GT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) CreatedTime_GE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Selector) Seq_In(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) Seq_Ins(ins ...int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) Seq_NotIn(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) Seq_Eq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) Seq_NotEq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) Seq_LT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) Seq_LE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) Seq_GT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) Seq_GE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Selector) DeliviryStatusEnum_In(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) DeliviryStatusEnum_Ins(ins ...int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) DeliviryStatusEnum_NotIn(ins []int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) DeliviryStatusEnum_Eq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) DeliviryStatusEnum_NotEq(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) DeliviryStatusEnum_LT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) DeliviryStatusEnum_LE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) DeliviryStatusEnum_GT(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) DeliviryStatusEnum_GE(val int) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__DirectMessage_Deleter) ChatKey_In(ins []string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) ChatKey_NotIn(ins []string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessage_Deleter) ChatKey_Like(val string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) ChatKey_Eq(val string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) ChatKey_NotEq(val string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Deleter) RoomKey_In(ins []string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) RoomKey_NotIn(ins []string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessage_Deleter) RoomKey_Like(val string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) RoomKey_Eq(val string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) RoomKey_NotEq(val string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Deleter) Text_In(ins []string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Deleter) Text_NotIn(ins []string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessage_Deleter) Text_Like(val string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Deleter) Text_Eq(val string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Deleter) Text_NotEq(val string) *__DirectMessage_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__DirectMessage_Updater) ChatKey_In(ins []string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) ChatKey_NotIn(ins []string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessage_Updater) ChatKey_Like(val string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) ChatKey_Eq(val string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) ChatKey_NotEq(val string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Updater) RoomKey_In(ins []string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) RoomKey_NotIn(ins []string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessage_Updater) RoomKey_Like(val string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) RoomKey_Eq(val string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) RoomKey_NotEq(val string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Updater) Text_In(ins []string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Updater) Text_NotIn(ins []string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessage_Updater) Text_Like(val string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Updater) Text_Eq(val string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Updater) Text_NotEq(val string) *__DirectMessage_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__DirectMessage_Selector) ChatKey_In(ins []string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) ChatKey_NotIn(ins []string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessage_Selector) ChatKey_Like(val string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) ChatKey_Eq(val string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) ChatKey_NotEq(val string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Selector) RoomKey_In(ins []string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) RoomKey_NotIn(ins []string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessage_Selector) RoomKey_Like(val string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) RoomKey_Eq(val string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) RoomKey_NotEq(val string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessage_Selector) Text_In(ins []string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessage_Selector) Text_NotIn(ins []string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessage_Selector) Text_Like(val string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessage_Selector) Text_Eq(val string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessage_Selector) Text_NotEq(val string) *__DirectMessage_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

//string
func (u *__DirectMessage_Updater) ChatKey(newVal string) *__DirectMessage_Updater {
	up := updateCol{"ChatKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ChatKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__DirectMessage_Updater) MessageId(newVal int) *__DirectMessage_Updater {
	up := updateCol{" MessageId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MessageId = " + u.nextDollar()] = newVal
	return u
}

func (u *__DirectMessage_Updater) MessageId_Increment(count int) *__DirectMessage_Updater {
	if count > 0 {
		up := updateCol{" MessageId = MessageId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MessageId = MessageId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MessageId = MessageId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MessageId = MessageId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__DirectMessage_Updater) RoomKey(newVal string) *__DirectMessage_Updater {
	up := updateCol{"RoomKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" RoomKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__DirectMessage_Updater) UserId(newVal int) *__DirectMessage_Updater {
	up := updateCol{" UserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__DirectMessage_Updater) UserId_Increment(count int) *__DirectMessage_Updater {
	if count > 0 {
		up := updateCol{" UserId = UserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UserId = UserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UserId = UserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UserId = UserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectMessage_Updater) MessageFileId(newVal int) *__DirectMessage_Updater {
	up := updateCol{" MessageFileId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MessageFileId = " + u.nextDollar()] = newVal
	return u
}

func (u *__DirectMessage_Updater) MessageFileId_Increment(count int) *__DirectMessage_Updater {
	if count > 0 {
		up := updateCol{" MessageFileId = MessageFileId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MessageFileId = MessageFileId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MessageFileId = MessageFileId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MessageFileId = MessageFileId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectMessage_Updater) MessageTypeEnum(newVal int) *__DirectMessage_Updater {
	up := updateCol{" MessageTypeEnum = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MessageTypeEnum = " + u.nextDollar()] = newVal
	return u
}

func (u *__DirectMessage_Updater) MessageTypeEnum_Increment(count int) *__DirectMessage_Updater {
	if count > 0 {
		up := updateCol{" MessageTypeEnum = MessageTypeEnum+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MessageTypeEnum = MessageTypeEnum+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MessageTypeEnum = MessageTypeEnum- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MessageTypeEnum = MessageTypeEnum- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__DirectMessage_Updater) Text(newVal string) *__DirectMessage_Updater {
	up := updateCol{"Text = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Text = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__DirectMessage_Updater) CreatedTime(newVal int) *__DirectMessage_Updater {
	up := updateCol{" CreatedTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatedTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__DirectMessage_Updater) CreatedTime_Increment(count int) *__DirectMessage_Updater {
	if count > 0 {
		up := updateCol{" CreatedTime = CreatedTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatedTime = CreatedTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatedTime = CreatedTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatedTime = CreatedTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectMessage_Updater) Seq(newVal int) *__DirectMessage_Updater {
	up := updateCol{" Seq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Seq = " + u.nextDollar()] = newVal
	return u
}

func (u *__DirectMessage_Updater) Seq_Increment(count int) *__DirectMessage_Updater {
	if count > 0 {
		up := updateCol{" Seq = Seq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Seq = Seq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Seq = Seq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Seq = Seq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectMessage_Updater) DeliviryStatusEnum(newVal int) *__DirectMessage_Updater {
	up := updateCol{" DeliviryStatusEnum = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DeliviryStatusEnum = " + u.nextDollar()] = newVal
	return u
}

func (u *__DirectMessage_Updater) DeliviryStatusEnum_Increment(count int) *__DirectMessage_Updater {
	if count > 0 {
		up := updateCol{" DeliviryStatusEnum = DeliviryStatusEnum+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DeliviryStatusEnum = DeliviryStatusEnum+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DeliviryStatusEnum = DeliviryStatusEnum- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DeliviryStatusEnum = DeliviryStatusEnum- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__DirectMessage_Selector) OrderBy_ChatKey_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY ChatKey DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_ChatKey_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY ChatKey ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_ChatKey() *__DirectMessage_Selector {
	u.selectCol = "ChatKey"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_MessageId_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_MessageId_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_MessageId() *__DirectMessage_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_RoomKey_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_RoomKey_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_RoomKey() *__DirectMessage_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_UserId_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_UserId_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_UserId() *__DirectMessage_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_MessageFileId_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY MessageFileId DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_MessageFileId_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY MessageFileId ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_MessageFileId() *__DirectMessage_Selector {
	u.selectCol = "MessageFileId"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_MessageTypeEnum_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY MessageTypeEnum DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_MessageTypeEnum_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY MessageTypeEnum ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_MessageTypeEnum() *__DirectMessage_Selector {
	u.selectCol = "MessageTypeEnum"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_Text_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_Text_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_Text() *__DirectMessage_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_CreatedTime_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_CreatedTime_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_CreatedTime() *__DirectMessage_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_Seq_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY Seq DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_Seq_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY Seq ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_Seq() *__DirectMessage_Selector {
	u.selectCol = "Seq"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_DeliviryStatusEnum_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY DeliviryStatusEnum DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_DeliviryStatusEnum_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY DeliviryStatusEnum ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_DeliviryStatusEnum() *__DirectMessage_Selector {
	u.selectCol = "DeliviryStatusEnum"
	return u
}

func (u *__DirectMessage_Selector) OrderBy_ExtraPB_Desc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY ExtraPB DESC "
	return u
}

func (u *__DirectMessage_Selector) OrderBy_ExtraPB_Asc() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY ExtraPB ASC "
	return u
}

func (u *__DirectMessage_Selector) Select_ExtraPB() *__DirectMessage_Selector {
	u.selectCol = "ExtraPB"
	return u
}

func (u *__DirectMessage_Selector) Limit(num int) *__DirectMessage_Selector {
	u.limit = num
	return u
}

func (u *__DirectMessage_Selector) Offset(num int) *__DirectMessage_Selector {
	u.offset = num
	return u
}

func (u *__DirectMessage_Selector) Order_Rand() *__DirectMessage_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__DirectMessage_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_chat.direct_message"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__DirectMessage_Selector) GetRow(db *sqlx.DB) (*DirectMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, whereArgs)
	}

	row := &DirectMessage{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnDirectMessage_LoadOne(row)

	return row, nil
}

func (u *__DirectMessage_Selector) GetRows(db *sqlx.DB) ([]*DirectMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*DirectMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnDirectMessage_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__DirectMessage_Selector) GetRows2(db *sqlx.DB) ([]DirectMessage, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*DirectMessage
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnDirectMessage_LoadMany(rows)

	rows2 := make([]DirectMessage, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__DirectMessage_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__DirectMessage_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__DirectMessage_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__DirectMessage_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__DirectMessage_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_chat.direct_message SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__DirectMessage_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_chat.direct_message WHERE " + wheresStr

	// run query
	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  DirectMessage ////////////////

func MassInsert_DirectMessage(rows []DirectMessage, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(11, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun_chat.direct_message (" +
		"ChatKey, MessageId, RoomKey, UserId, MessageFileId, MessageTypeEnum, Text, CreatedTime, Seq, DeliviryStatusEnum, ExtraPB" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.MessageTypeEnum)
		vals = append(vals, row.Text)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.Seq)
		vals = append(vals, row.DeliviryStatusEnum)
		vals = append(vals, row.ExtraPB)

	}

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_DirectMessage(rows []DirectMessage, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(11, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun_chat.direct_message (" +
		"ChatKey, MessageId, RoomKey, UserId, MessageFileId, MessageTypeEnum, Text, CreatedTime, Seq, DeliviryStatusEnum, ExtraPB" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.MessageTypeEnum)
		vals = append(vals, row.Text)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.Seq)
		vals = append(vals, row.DeliviryStatusEnum)
		vals = append(vals, row.ExtraPB)

	}

	if LogTableSqlReq.DirectMessage {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.DirectMessage {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//
