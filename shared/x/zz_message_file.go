package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// MessageFile represents a row from 'sun_chat.message_file'.

// Manualy copy this to project
type MessageFile__ struct {
	MessageFileId int    `json:"MessageFileId"` // MessageFileId -
	FileTypeEnum  int    `json:"FileTypeEnum"`  // FileTypeEnum -
	UserId        int    `json:"UserId"`        // UserId -
	Title         string `json:"Title"`         // Title -
	Size          int    `json:"Size"`          // Size -
	Width         int    `json:"Width"`         // Width -
	Height        int    `json:"Height"`        // Height -
	Duration      int    `json:"Duration"`      // Duration -
	Extension     string `json:"Extension"`     // Extension -
	Md5Hash       string `json:"Md5Hash"`       // Md5Hash -
	CreatedTime   int    `json:"CreatedTime"`   // CreatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MessageFile exists in the database.
func (mf *MessageFile) Exists() bool {
	return mf._exists
}

// Deleted provides information if the MessageFile has been deleted from the database.
func (mf *MessageFile) Deleted() bool {
	return mf._deleted
}

// Insert inserts the MessageFile to the database.
func (mf *MessageFile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_chat.message_file (` +
		`MessageFileId, FileTypeEnum, UserId, Title, Size, Width, Height, Duration, Extension, Md5Hash, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mf.MessageFileId, mf.FileTypeEnum, mf.UserId, mf.Title, mf.Size, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.Md5Hash, mf.CreatedTime)
	_, err = db.Exec(sqlstr, mf.MessageFileId, mf.FileTypeEnum, mf.UserId, mf.Title, mf.Size, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.Md5Hash, mf.CreatedTime)
	if err != nil {
		return err
	}

	// set existence
	mf._exists = true

	OnMessageFile_AfterInsert(mf)

	return nil
}

// Insert inserts the MessageFile to the database.
func (mf *MessageFile) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_chat.message_file (` +
		`MessageFileId, FileTypeEnum, UserId, Title, Size, Width, Height, Duration, Extension, Md5Hash, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mf.MessageFileId, mf.FileTypeEnum, mf.UserId, mf.Title, mf.Size, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.Md5Hash, mf.CreatedTime)
	_, err = db.Exec(sqlstr, mf.MessageFileId, mf.FileTypeEnum, mf.UserId, mf.Title, mf.Size, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.Md5Hash, mf.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	mf._exists = true

	OnMessageFile_AfterInsert(mf)

	return nil
}

// Update updates the MessageFile in the database.
func (mf *MessageFile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mf._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_chat.message_file SET ` +
		`FileTypeEnum = ?, UserId = ?, Title = ?, Size = ?, Width = ?, Height = ?, Duration = ?, Extension = ?, Md5Hash = ?, CreatedTime = ?` +
		` WHERE MessageFileId = ?`

	// run query
	XOLog(sqlstr, mf.FileTypeEnum, mf.UserId, mf.Title, mf.Size, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.Md5Hash, mf.CreatedTime, mf.MessageFileId)
	_, err = db.Exec(sqlstr, mf.FileTypeEnum, mf.UserId, mf.Title, mf.Size, mf.Width, mf.Height, mf.Duration, mf.Extension, mf.Md5Hash, mf.CreatedTime, mf.MessageFileId)

	XOLogErr(err)
	OnMessageFile_AfterUpdate(mf)

	return err
}

// Save saves the MessageFile to the database.
func (mf *MessageFile) Save(db XODB) error {
	if mf.Exists() {
		return mf.Update(db)
	}

	return mf.Replace(db)
}

// Delete deletes the MessageFile from the database.
func (mf *MessageFile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mf._exists {
		return nil
	}

	// if deleted, bail
	if mf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_chat.message_file WHERE MessageFileId = ?`

	// run query
	XOLog(sqlstr, mf.MessageFileId)
	_, err = db.Exec(sqlstr, mf.MessageFileId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	mf._deleted = true

	OnMessageFile_AfterDelete(mf)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __MessageFile_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MessageFile_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MessageFile_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMessageFile_Deleter() *__MessageFile_Deleter {
	d := __MessageFile_Deleter{whereSep: " AND "}
	return &d
}

func NewMessageFile_Updater() *__MessageFile_Updater {
	u := __MessageFile_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMessageFile_Selector() *__MessageFile_Selector {
	u := __MessageFile_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MessageFile_Deleter) Or() *__MessageFile_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MessageFile_Deleter) MessageFileId_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) MessageFileId_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) MessageFileId_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) MessageFileId_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) MessageFileId_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) FileTypeEnum_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) FileTypeEnum_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) FileTypeEnum_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) FileTypeEnum_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnum_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnum_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnum_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnum_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) FileTypeEnum_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) UserId_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) UserId_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) UserId_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) UserId_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) UserId_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) UserId_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) UserId_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) UserId_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) UserId_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Size_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Size_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Size_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Size_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Size_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Width_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Width_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Width_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Width_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Width_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Height_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Height_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Height_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Height_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Height_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Duration_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Duration_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Duration_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Duration_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Duration_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) CreatedTime_In(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) CreatedTime_Ins(ins ...int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) CreatedTime_NotIn(ins []int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) CreatedTime_Eq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedTime_NotEq(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedTime_LT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedTime_LE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedTime_GT(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) CreatedTime_GE(val int) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MessageFile_Updater) Or() *__MessageFile_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MessageFile_Updater) MessageFileId_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) MessageFileId_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) MessageFileId_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) MessageFileId_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) MessageFileId_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) FileTypeEnum_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) FileTypeEnum_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) FileTypeEnum_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) FileTypeEnum_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnum_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnum_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnum_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnum_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) FileTypeEnum_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) UserId_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) UserId_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) UserId_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) UserId_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) UserId_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) UserId_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) UserId_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) UserId_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) UserId_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Size_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Size_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Size_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Size_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Size_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Width_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Width_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Width_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Width_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Width_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Height_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Height_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Height_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Height_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Height_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Duration_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Duration_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Duration_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Duration_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Duration_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) CreatedTime_In(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) CreatedTime_Ins(ins ...int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) CreatedTime_NotIn(ins []int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) CreatedTime_Eq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedTime_NotEq(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedTime_LT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedTime_LE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedTime_GT(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) CreatedTime_GE(val int) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MessageFile_Selector) Or() *__MessageFile_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MessageFile_Selector) MessageFileId_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) MessageFileId_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) MessageFileId_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) MessageFileId_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) MessageFileId_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) FileTypeEnum_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) FileTypeEnum_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) FileTypeEnum_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) FileTypeEnum_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnum_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnum_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnum_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnum_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) FileTypeEnum_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) UserId_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) UserId_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) UserId_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) UserId_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) UserId_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) UserId_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) UserId_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) UserId_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) UserId_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Size_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Size_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Size_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Size_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Size_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Width_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Width_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Width_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Width_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Width_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Height_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Height_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Height_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Height_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Height_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Duration_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Duration_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Duration_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Duration_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Duration_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) CreatedTime_In(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) CreatedTime_Ins(ins ...int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) CreatedTime_NotIn(ins []int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) CreatedTime_Eq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedTime_NotEq(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedTime_LT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedTime_LE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedTime_GT(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) CreatedTime_GE(val int) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MessageFile_Deleter) Title_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Title_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) Title_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Title_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Title_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Extension_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Extension_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) Extension_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Extension_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Extension_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Deleter) Md5Hash_In(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Deleter) Md5Hash_NotIn(ins []string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Deleter) Md5Hash_Like(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Deleter) Md5Hash_Eq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Deleter) Md5Hash_NotEq(val string) *__MessageFile_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MessageFile_Updater) Title_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Title_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) Title_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Title_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Title_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Extension_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Extension_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) Extension_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Extension_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Extension_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Updater) Md5Hash_In(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Updater) Md5Hash_NotIn(ins []string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Updater) Md5Hash_Like(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Updater) Md5Hash_Eq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Updater) Md5Hash_NotEq(val string) *__MessageFile_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MessageFile_Selector) Title_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Title_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) Title_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Title_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Title_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Extension_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Extension_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) Extension_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Extension_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Extension_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MessageFile_Selector) Md5Hash_In(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MessageFile_Selector) Md5Hash_NotIn(ins []string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MessageFile_Selector) Md5Hash_Like(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MessageFile_Selector) Md5Hash_Eq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MessageFile_Selector) Md5Hash_NotEq(val string) *__MessageFile_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MessageFile_Updater) MessageFileId(newVal int) *__MessageFile_Updater {
	u.updates[" MessageFileId = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) MessageFileId_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" MessageFileId = MessageFileId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageFileId = MessageFileId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) FileTypeEnum(newVal int) *__MessageFile_Updater {
	u.updates[" FileTypeEnum = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) FileTypeEnum_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" FileTypeEnum = FileTypeEnum+? "] = count
	}

	if count < 0 {
		u.updates[" FileTypeEnum = FileTypeEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) UserId(newVal int) *__MessageFile_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) UserId_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MessageFile_Updater) Title(newVal string) *__MessageFile_Updater {
	u.updates[" Title = ? "] = newVal
	return u
}

//ints

func (u *__MessageFile_Updater) Size(newVal int) *__MessageFile_Updater {
	u.updates[" Size = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) Size_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" Size = Size+? "] = count
	}

	if count < 0 {
		u.updates[" Size = Size-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) Width(newVal int) *__MessageFile_Updater {
	u.updates[" Width = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) Width_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" Width = Width+? "] = count
	}

	if count < 0 {
		u.updates[" Width = Width-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) Height(newVal int) *__MessageFile_Updater {
	u.updates[" Height = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) Height_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" Height = Height+? "] = count
	}

	if count < 0 {
		u.updates[" Height = Height-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MessageFile_Updater) Duration(newVal int) *__MessageFile_Updater {
	u.updates[" Duration = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) Duration_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" Duration = Duration+? "] = count
	}

	if count < 0 {
		u.updates[" Duration = Duration-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MessageFile_Updater) Extension(newVal string) *__MessageFile_Updater {
	u.updates[" Extension = ? "] = newVal
	return u
}

//ints

//string
func (u *__MessageFile_Updater) Md5Hash(newVal string) *__MessageFile_Updater {
	u.updates[" Md5Hash = ? "] = newVal
	return u
}

//ints

func (u *__MessageFile_Updater) CreatedTime(newVal int) *__MessageFile_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__MessageFile_Updater) CreatedTime_Increment(count int) *__MessageFile_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MessageFile_Selector) OrderBy_MessageFileId_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY MessageFileId DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_MessageFileId_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY MessageFileId ASC "
	return u
}

func (u *__MessageFile_Selector) Select_MessageFileId() *__MessageFile_Selector {
	u.selectCol = "MessageFileId"
	return u
}

func (u *__MessageFile_Selector) OrderBy_FileTypeEnum_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY FileTypeEnum DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_FileTypeEnum_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY FileTypeEnum ASC "
	return u
}

func (u *__MessageFile_Selector) Select_FileTypeEnum() *__MessageFile_Selector {
	u.selectCol = "FileTypeEnum"
	return u
}

func (u *__MessageFile_Selector) OrderBy_UserId_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_UserId_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__MessageFile_Selector) Select_UserId() *__MessageFile_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Title_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Title DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Title_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Title ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Title() *__MessageFile_Selector {
	u.selectCol = "Title"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Size_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Size DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Size_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Size ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Size() *__MessageFile_Selector {
	u.selectCol = "Size"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Width_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Width DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Width_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Width ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Width() *__MessageFile_Selector {
	u.selectCol = "Width"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Height_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Height DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Height_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Height ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Height() *__MessageFile_Selector {
	u.selectCol = "Height"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Duration_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Duration DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Duration_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Duration ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Duration() *__MessageFile_Selector {
	u.selectCol = "Duration"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Extension_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Extension DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Extension_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Extension ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Extension() *__MessageFile_Selector {
	u.selectCol = "Extension"
	return u
}

func (u *__MessageFile_Selector) OrderBy_Md5Hash_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Md5Hash DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_Md5Hash_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY Md5Hash ASC "
	return u
}

func (u *__MessageFile_Selector) Select_Md5Hash() *__MessageFile_Selector {
	u.selectCol = "Md5Hash"
	return u
}

func (u *__MessageFile_Selector) OrderBy_CreatedTime_Desc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__MessageFile_Selector) OrderBy_CreatedTime_Asc() *__MessageFile_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__MessageFile_Selector) Select_CreatedTime() *__MessageFile_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__MessageFile_Selector) Limit(num int) *__MessageFile_Selector {
	u.limit = num
	return u
}

func (u *__MessageFile_Selector) Offset(num int) *__MessageFile_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MessageFile_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_chat.message_file"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MessageFile_Selector) GetRow(db *sqlx.DB) (*MessageFile, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MessageFile{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnMessageFile_LoadOne(row)

	return row, nil
}

func (u *__MessageFile_Selector) GetRows(db *sqlx.DB) ([]*MessageFile, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MessageFile
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMessageFile_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__MessageFile_Selector) GetRows2(db *sqlx.DB) ([]MessageFile, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*MessageFile
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnMessageFile_LoadMany(rows)

	rows2 := make([]MessageFile, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__MessageFile_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__MessageFile_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MessageFile_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__MessageFile_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MessageFile_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_chat.message_file SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__MessageFile_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_chat.message_file WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MessageFile ////////////////

func MassInsert_MessageFile(rows []MessageFile, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun_chat.message_file (" +
		"MessageFileId, FileTypeEnum, UserId, Title, Size, Width, Height, Duration, Extension, Md5Hash, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.FileTypeEnum)
		vals = append(vals, row.UserId)
		vals = append(vals, row.Title)
		vals = append(vals, row.Size)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Duration)
		vals = append(vals, row.Extension)
		vals = append(vals, row.Md5Hash)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_MessageFile(rows []MessageFile, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun_chat.message_file (" +
		"MessageFileId, FileTypeEnum, UserId, Title, Size, Width, Height, Duration, Extension, Md5Hash, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.FileTypeEnum)
		vals = append(vals, row.UserId)
		vals = append(vals, row.Title)
		vals = append(vals, row.Size)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Duration)
		vals = append(vals, row.Extension)
		vals = append(vals, row.Md5Hash)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//
