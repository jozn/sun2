package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// DirectMessageCopy represents a row from 'sun.direct_message_copy'.

// Manualy copy this to project
type DirectMessageCopy__ struct {
	MessageId            int    `json:"MessageId"`            // MessageId -
	MessageKey           string `json:"MessageKey"`           // MessageKey -
	RoomKey              string `json:"RoomKey"`              // RoomKey -
	UserId               int    `json:"UserId"`               // UserId -
	MessageFileId        int    `json:"MessageFileId"`        // MessageFileId -
	MessageTypeEnumId    int    `json:"MessageTypeEnumId"`    // MessageTypeEnumId -
	Text                 string `json:"Text"`                 // Text -
	CreatedSe            int    `json:"CreatedSe"`            // CreatedSe -
	PeerReceivedTime     int    `json:"PeerReceivedTime"`     // PeerReceivedTime -
	PeerSeenTime         int    `json:"PeerSeenTime"`         // PeerSeenTime -
	DeliviryStatusEnumId int    `json:"DeliviryStatusEnumId"` // DeliviryStatusEnumId -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the DirectMessageCopy exists in the database.
func (dmc *DirectMessageCopy) Exists() bool {
	return dmc._exists
}

// Deleted provides information if the DirectMessageCopy has been deleted from the database.
func (dmc *DirectMessageCopy) Deleted() bool {
	return dmc._deleted
}

// Insert inserts the DirectMessageCopy to the database.
func (dmc *DirectMessageCopy) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if dmc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.direct_message_copy (` +
		`MessageId, MessageKey, RoomKey, UserId, MessageFileId, MessageTypeEnumId, Text, CreatedSe, PeerReceivedTime, PeerSeenTime, DeliviryStatusEnumId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, dmc.MessageId, dmc.MessageKey, dmc.RoomKey, dmc.UserId, dmc.MessageFileId, dmc.MessageTypeEnumId, dmc.Text, dmc.CreatedSe, dmc.PeerReceivedTime, dmc.PeerSeenTime, dmc.DeliviryStatusEnumId)
	_, err = db.Exec(sqlstr, dmc.MessageId, dmc.MessageKey, dmc.RoomKey, dmc.UserId, dmc.MessageFileId, dmc.MessageTypeEnumId, dmc.Text, dmc.CreatedSe, dmc.PeerReceivedTime, dmc.PeerSeenTime, dmc.DeliviryStatusEnumId)
	if err != nil {
		return err
	}

	// set existence
	dmc._exists = true

	OnDirectMessageCopy_AfterInsert(dmc)

	return nil
}

// Insert inserts the DirectMessageCopy to the database.
func (dmc *DirectMessageCopy) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.direct_message_copy (` +
		`MessageId, MessageKey, RoomKey, UserId, MessageFileId, MessageTypeEnumId, Text, CreatedSe, PeerReceivedTime, PeerSeenTime, DeliviryStatusEnumId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, dmc.MessageId, dmc.MessageKey, dmc.RoomKey, dmc.UserId, dmc.MessageFileId, dmc.MessageTypeEnumId, dmc.Text, dmc.CreatedSe, dmc.PeerReceivedTime, dmc.PeerSeenTime, dmc.DeliviryStatusEnumId)
	_, err = db.Exec(sqlstr, dmc.MessageId, dmc.MessageKey, dmc.RoomKey, dmc.UserId, dmc.MessageFileId, dmc.MessageTypeEnumId, dmc.Text, dmc.CreatedSe, dmc.PeerReceivedTime, dmc.PeerSeenTime, dmc.DeliviryStatusEnumId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	dmc._exists = true

	OnDirectMessageCopy_AfterInsert(dmc)

	return nil
}

// Update updates the DirectMessageCopy in the database.
func (dmc *DirectMessageCopy) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dmc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if dmc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.direct_message_copy SET ` +
		`MessageKey = ?, RoomKey = ?, UserId = ?, MessageFileId = ?, MessageTypeEnumId = ?, Text = ?, CreatedSe = ?, PeerReceivedTime = ?, PeerSeenTime = ?, DeliviryStatusEnumId = ?` +
		` WHERE MessageId = ?`

	// run query
	XOLog(sqlstr, dmc.MessageKey, dmc.RoomKey, dmc.UserId, dmc.MessageFileId, dmc.MessageTypeEnumId, dmc.Text, dmc.CreatedSe, dmc.PeerReceivedTime, dmc.PeerSeenTime, dmc.DeliviryStatusEnumId, dmc.MessageId)
	_, err = db.Exec(sqlstr, dmc.MessageKey, dmc.RoomKey, dmc.UserId, dmc.MessageFileId, dmc.MessageTypeEnumId, dmc.Text, dmc.CreatedSe, dmc.PeerReceivedTime, dmc.PeerSeenTime, dmc.DeliviryStatusEnumId, dmc.MessageId)

	XOLogErr(err)
	OnDirectMessageCopy_AfterUpdate(dmc)

	return err
}

// Save saves the DirectMessageCopy to the database.
func (dmc *DirectMessageCopy) Save(db XODB) error {
	if dmc.Exists() {
		return dmc.Update(db)
	}

	return dmc.Replace(db)
}

// Delete deletes the DirectMessageCopy from the database.
func (dmc *DirectMessageCopy) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !dmc._exists {
		return nil
	}

	// if deleted, bail
	if dmc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.direct_message_copy WHERE MessageId = ?`

	// run query
	XOLog(sqlstr, dmc.MessageId)
	_, err = db.Exec(sqlstr, dmc.MessageId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	dmc._deleted = true

	OnDirectMessageCopy_AfterDelete(dmc)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __DirectMessageCopy_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __DirectMessageCopy_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __DirectMessageCopy_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewDirectMessageCopy_Deleter() *__DirectMessageCopy_Deleter {
	d := __DirectMessageCopy_Deleter{whereSep: " AND "}
	return &d
}

func NewDirectMessageCopy_Updater() *__DirectMessageCopy_Updater {
	u := __DirectMessageCopy_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewDirectMessageCopy_Selector() *__DirectMessageCopy_Selector {
	u := __DirectMessageCopy_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__DirectMessageCopy_Deleter) Or() *__DirectMessageCopy_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__DirectMessageCopy_Deleter) MessageId_In(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) MessageId_Ins(ins ...int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) MessageId_NotIn(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) MessageId_Eq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageId_NotEq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageId_LT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageId_LE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageId_GT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageId_GE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Deleter) UserId_In(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) UserId_Ins(ins ...int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) UserId_NotIn(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) UserId_Eq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) UserId_NotEq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) UserId_LT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) UserId_LE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) UserId_GT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) UserId_GE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Deleter) MessageFileId_In(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) MessageFileId_Ins(ins ...int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) MessageFileId_NotIn(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) MessageFileId_Eq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageFileId_NotEq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageFileId_LT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageFileId_LE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageFileId_GT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageFileId_GE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Deleter) MessageTypeEnumId_In(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) MessageTypeEnumId_Ins(ins ...int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) MessageTypeEnumId_NotIn(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) MessageTypeEnumId_Eq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageTypeEnumId_NotEq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageTypeEnumId_LT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageTypeEnumId_LE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageTypeEnumId_GT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageTypeEnumId_GE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Deleter) CreatedSe_In(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) CreatedSe_Ins(ins ...int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) CreatedSe_NotIn(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) CreatedSe_Eq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) CreatedSe_NotEq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) CreatedSe_LT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) CreatedSe_LE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) CreatedSe_GT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) CreatedSe_GE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Deleter) PeerReceivedTime_In(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerReceivedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) PeerReceivedTime_Ins(ins ...int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerReceivedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) PeerReceivedTime_NotIn(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerReceivedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) PeerReceivedTime_Eq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerReceivedTime_NotEq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerReceivedTime_LT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerReceivedTime_LE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerReceivedTime_GT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerReceivedTime_GE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Deleter) PeerSeenTime_In(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerSeenTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) PeerSeenTime_Ins(ins ...int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerSeenTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) PeerSeenTime_NotIn(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerSeenTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) PeerSeenTime_Eq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerSeenTime_NotEq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerSeenTime_LT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerSeenTime_LE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerSeenTime_GT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) PeerSeenTime_GE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Deleter) DeliviryStatusEnumId_In(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) DeliviryStatusEnumId_Ins(ins ...int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) DeliviryStatusEnumId_NotIn(ins []int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) DeliviryStatusEnumId_Eq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) DeliviryStatusEnumId_NotEq(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) DeliviryStatusEnumId_LT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) DeliviryStatusEnumId_LE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) DeliviryStatusEnumId_GT(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) DeliviryStatusEnumId_GE(val int) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__DirectMessageCopy_Updater) Or() *__DirectMessageCopy_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__DirectMessageCopy_Updater) MessageId_In(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) MessageId_Ins(ins ...int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) MessageId_NotIn(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) MessageId_Eq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageId_NotEq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageId_LT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageId_LE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageId_GT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageId_GE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Updater) UserId_In(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) UserId_Ins(ins ...int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) UserId_NotIn(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) UserId_Eq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) UserId_NotEq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) UserId_LT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) UserId_LE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) UserId_GT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) UserId_GE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Updater) MessageFileId_In(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) MessageFileId_Ins(ins ...int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) MessageFileId_NotIn(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) MessageFileId_Eq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageFileId_NotEq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageFileId_LT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageFileId_LE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageFileId_GT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageFileId_GE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Updater) MessageTypeEnumId_In(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) MessageTypeEnumId_Ins(ins ...int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) MessageTypeEnumId_NotIn(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) MessageTypeEnumId_Eq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageTypeEnumId_NotEq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageTypeEnumId_LT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageTypeEnumId_LE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageTypeEnumId_GT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageTypeEnumId_GE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Updater) CreatedSe_In(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) CreatedSe_Ins(ins ...int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) CreatedSe_NotIn(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) CreatedSe_Eq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) CreatedSe_NotEq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) CreatedSe_LT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) CreatedSe_LE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) CreatedSe_GT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) CreatedSe_GE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Updater) PeerReceivedTime_In(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerReceivedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) PeerReceivedTime_Ins(ins ...int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerReceivedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) PeerReceivedTime_NotIn(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerReceivedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) PeerReceivedTime_Eq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerReceivedTime_NotEq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerReceivedTime_LT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerReceivedTime_LE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerReceivedTime_GT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerReceivedTime_GE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Updater) PeerSeenTime_In(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerSeenTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) PeerSeenTime_Ins(ins ...int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerSeenTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) PeerSeenTime_NotIn(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerSeenTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) PeerSeenTime_Eq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerSeenTime_NotEq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerSeenTime_LT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerSeenTime_LE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerSeenTime_GT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) PeerSeenTime_GE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Updater) DeliviryStatusEnumId_In(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) DeliviryStatusEnumId_Ins(ins ...int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) DeliviryStatusEnumId_NotIn(ins []int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) DeliviryStatusEnumId_Eq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) DeliviryStatusEnumId_NotEq(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) DeliviryStatusEnumId_LT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) DeliviryStatusEnumId_LE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) DeliviryStatusEnumId_GT(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) DeliviryStatusEnumId_GE(val int) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__DirectMessageCopy_Selector) Or() *__DirectMessageCopy_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__DirectMessageCopy_Selector) MessageId_In(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) MessageId_Ins(ins ...int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) MessageId_NotIn(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) MessageId_Eq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageId_NotEq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageId_LT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageId_LE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageId_GT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageId_GE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Selector) UserId_In(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) UserId_Ins(ins ...int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) UserId_NotIn(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) UserId_Eq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) UserId_NotEq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) UserId_LT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) UserId_LE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) UserId_GT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) UserId_GE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Selector) MessageFileId_In(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) MessageFileId_Ins(ins ...int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) MessageFileId_NotIn(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) MessageFileId_Eq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageFileId_NotEq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageFileId_LT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageFileId_LE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageFileId_GT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageFileId_GE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Selector) MessageTypeEnumId_In(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) MessageTypeEnumId_Ins(ins ...int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) MessageTypeEnumId_NotIn(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageTypeEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) MessageTypeEnumId_Eq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageTypeEnumId_NotEq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageTypeEnumId_LT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageTypeEnumId_LE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageTypeEnumId_GT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageTypeEnumId_GE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageTypeEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Selector) CreatedSe_In(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) CreatedSe_Ins(ins ...int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) CreatedSe_NotIn(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) CreatedSe_Eq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) CreatedSe_NotEq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) CreatedSe_LT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) CreatedSe_LE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) CreatedSe_GT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) CreatedSe_GE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Selector) PeerReceivedTime_In(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerReceivedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) PeerReceivedTime_Ins(ins ...int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerReceivedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) PeerReceivedTime_NotIn(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerReceivedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) PeerReceivedTime_Eq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerReceivedTime_NotEq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerReceivedTime_LT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerReceivedTime_LE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerReceivedTime_GT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerReceivedTime_GE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerReceivedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Selector) PeerSeenTime_In(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerSeenTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) PeerSeenTime_Ins(ins ...int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerSeenTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) PeerSeenTime_NotIn(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerSeenTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) PeerSeenTime_Eq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerSeenTime_NotEq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerSeenTime_LT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerSeenTime_LE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerSeenTime_GT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) PeerSeenTime_GE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerSeenTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Selector) DeliviryStatusEnumId_In(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) DeliviryStatusEnumId_Ins(ins ...int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) DeliviryStatusEnumId_NotIn(ins []int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) DeliviryStatusEnumId_Eq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) DeliviryStatusEnumId_NotEq(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) DeliviryStatusEnumId_LT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) DeliviryStatusEnumId_LE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) DeliviryStatusEnumId_GT(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) DeliviryStatusEnumId_GE(val int) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeliviryStatusEnumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__DirectMessageCopy_Deleter) MessageKey_In(ins []string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) MessageKey_NotIn(ins []string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessageCopy_Deleter) MessageKey_Like(val string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) MessageKey_Eq(val string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) MessageKey_NotEq(val string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Deleter) RoomKey_In(ins []string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) RoomKey_NotIn(ins []string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessageCopy_Deleter) RoomKey_Like(val string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) RoomKey_Eq(val string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) RoomKey_NotEq(val string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Deleter) Text_In(ins []string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Deleter) Text_NotIn(ins []string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessageCopy_Deleter) Text_Like(val string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Deleter) Text_Eq(val string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Deleter) Text_NotEq(val string) *__DirectMessageCopy_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__DirectMessageCopy_Updater) MessageKey_In(ins []string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) MessageKey_NotIn(ins []string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessageCopy_Updater) MessageKey_Like(val string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) MessageKey_Eq(val string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) MessageKey_NotEq(val string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Updater) RoomKey_In(ins []string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) RoomKey_NotIn(ins []string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessageCopy_Updater) RoomKey_Like(val string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) RoomKey_Eq(val string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) RoomKey_NotEq(val string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Updater) Text_In(ins []string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Updater) Text_NotIn(ins []string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessageCopy_Updater) Text_Like(val string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Updater) Text_Eq(val string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Updater) Text_NotEq(val string) *__DirectMessageCopy_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__DirectMessageCopy_Selector) MessageKey_In(ins []string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) MessageKey_NotIn(ins []string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessageCopy_Selector) MessageKey_Like(val string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) MessageKey_Eq(val string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) MessageKey_NotEq(val string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Selector) RoomKey_In(ins []string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) RoomKey_NotIn(ins []string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessageCopy_Selector) RoomKey_Like(val string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) RoomKey_Eq(val string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) RoomKey_NotEq(val string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__DirectMessageCopy_Selector) Text_In(ins []string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__DirectMessageCopy_Selector) Text_NotIn(ins []string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__DirectMessageCopy_Selector) Text_Like(val string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__DirectMessageCopy_Selector) Text_Eq(val string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__DirectMessageCopy_Selector) Text_NotEq(val string) *__DirectMessageCopy_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__DirectMessageCopy_Updater) MessageId(newVal int) *__DirectMessageCopy_Updater {
	u.updates[" MessageId = ? "] = newVal
	return u
}

func (u *__DirectMessageCopy_Updater) MessageId_Increment(count int) *__DirectMessageCopy_Updater {
	if count > 0 {
		u.updates[" MessageId = MessageId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageId = MessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__DirectMessageCopy_Updater) MessageKey(newVal string) *__DirectMessageCopy_Updater {
	u.updates[" MessageKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__DirectMessageCopy_Updater) RoomKey(newVal string) *__DirectMessageCopy_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__DirectMessageCopy_Updater) UserId(newVal int) *__DirectMessageCopy_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__DirectMessageCopy_Updater) UserId_Increment(count int) *__DirectMessageCopy_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectMessageCopy_Updater) MessageFileId(newVal int) *__DirectMessageCopy_Updater {
	u.updates[" MessageFileId = ? "] = newVal
	return u
}

func (u *__DirectMessageCopy_Updater) MessageFileId_Increment(count int) *__DirectMessageCopy_Updater {
	if count > 0 {
		u.updates[" MessageFileId = MessageFileId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageFileId = MessageFileId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectMessageCopy_Updater) MessageTypeEnumId(newVal int) *__DirectMessageCopy_Updater {
	u.updates[" MessageTypeEnumId = ? "] = newVal
	return u
}

func (u *__DirectMessageCopy_Updater) MessageTypeEnumId_Increment(count int) *__DirectMessageCopy_Updater {
	if count > 0 {
		u.updates[" MessageTypeEnumId = MessageTypeEnumId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageTypeEnumId = MessageTypeEnumId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__DirectMessageCopy_Updater) Text(newVal string) *__DirectMessageCopy_Updater {
	u.updates[" Text = ? "] = newVal
	return u
}

//ints

func (u *__DirectMessageCopy_Updater) CreatedSe(newVal int) *__DirectMessageCopy_Updater {
	u.updates[" CreatedSe = ? "] = newVal
	return u
}

func (u *__DirectMessageCopy_Updater) CreatedSe_Increment(count int) *__DirectMessageCopy_Updater {
	if count > 0 {
		u.updates[" CreatedSe = CreatedSe+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedSe = CreatedSe-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectMessageCopy_Updater) PeerReceivedTime(newVal int) *__DirectMessageCopy_Updater {
	u.updates[" PeerReceivedTime = ? "] = newVal
	return u
}

func (u *__DirectMessageCopy_Updater) PeerReceivedTime_Increment(count int) *__DirectMessageCopy_Updater {
	if count > 0 {
		u.updates[" PeerReceivedTime = PeerReceivedTime+? "] = count
	}

	if count < 0 {
		u.updates[" PeerReceivedTime = PeerReceivedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectMessageCopy_Updater) PeerSeenTime(newVal int) *__DirectMessageCopy_Updater {
	u.updates[" PeerSeenTime = ? "] = newVal
	return u
}

func (u *__DirectMessageCopy_Updater) PeerSeenTime_Increment(count int) *__DirectMessageCopy_Updater {
	if count > 0 {
		u.updates[" PeerSeenTime = PeerSeenTime+? "] = count
	}

	if count < 0 {
		u.updates[" PeerSeenTime = PeerSeenTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__DirectMessageCopy_Updater) DeliviryStatusEnumId(newVal int) *__DirectMessageCopy_Updater {
	u.updates[" DeliviryStatusEnumId = ? "] = newVal
	return u
}

func (u *__DirectMessageCopy_Updater) DeliviryStatusEnumId_Increment(count int) *__DirectMessageCopy_Updater {
	if count > 0 {
		u.updates[" DeliviryStatusEnumId = DeliviryStatusEnumId+? "] = count
	}

	if count < 0 {
		u.updates[" DeliviryStatusEnumId = DeliviryStatusEnumId-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__DirectMessageCopy_Selector) OrderBy_MessageId_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_MessageId_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_MessageId() *__DirectMessageCopy_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_MessageKey_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY MessageKey DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_MessageKey_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY MessageKey ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_MessageKey() *__DirectMessageCopy_Selector {
	u.selectCol = "MessageKey"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_RoomKey_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_RoomKey_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_RoomKey() *__DirectMessageCopy_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_UserId_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_UserId_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_UserId() *__DirectMessageCopy_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_MessageFileId_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY MessageFileId DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_MessageFileId_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY MessageFileId ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_MessageFileId() *__DirectMessageCopy_Selector {
	u.selectCol = "MessageFileId"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_MessageTypeEnumId_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY MessageTypeEnumId DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_MessageTypeEnumId_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY MessageTypeEnumId ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_MessageTypeEnumId() *__DirectMessageCopy_Selector {
	u.selectCol = "MessageTypeEnumId"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_Text_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_Text_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_Text() *__DirectMessageCopy_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_CreatedSe_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY CreatedSe DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_CreatedSe_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY CreatedSe ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_CreatedSe() *__DirectMessageCopy_Selector {
	u.selectCol = "CreatedSe"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_PeerReceivedTime_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY PeerReceivedTime DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_PeerReceivedTime_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY PeerReceivedTime ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_PeerReceivedTime() *__DirectMessageCopy_Selector {
	u.selectCol = "PeerReceivedTime"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_PeerSeenTime_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY PeerSeenTime DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_PeerSeenTime_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY PeerSeenTime ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_PeerSeenTime() *__DirectMessageCopy_Selector {
	u.selectCol = "PeerSeenTime"
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_DeliviryStatusEnumId_Desc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY DeliviryStatusEnumId DESC "
	return u
}

func (u *__DirectMessageCopy_Selector) OrderBy_DeliviryStatusEnumId_Asc() *__DirectMessageCopy_Selector {
	u.orderBy = " ORDER BY DeliviryStatusEnumId ASC "
	return u
}

func (u *__DirectMessageCopy_Selector) Select_DeliviryStatusEnumId() *__DirectMessageCopy_Selector {
	u.selectCol = "DeliviryStatusEnumId"
	return u
}

func (u *__DirectMessageCopy_Selector) Limit(num int) *__DirectMessageCopy_Selector {
	u.limit = num
	return u
}

func (u *__DirectMessageCopy_Selector) Offset(num int) *__DirectMessageCopy_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__DirectMessageCopy_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.direct_message_copy"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__DirectMessageCopy_Selector) GetRow(db *sqlx.DB) (*DirectMessageCopy, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &DirectMessageCopy{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnDirectMessageCopy_LoadOne(row)

	return row, nil
}

func (u *__DirectMessageCopy_Selector) GetRows(db *sqlx.DB) ([]*DirectMessageCopy, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*DirectMessageCopy
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnDirectMessageCopy_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__DirectMessageCopy_Selector) GetRows2(db *sqlx.DB) ([]DirectMessageCopy, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*DirectMessageCopy
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnDirectMessageCopy_LoadMany(rows)

	rows2 := make([]DirectMessageCopy, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__DirectMessageCopy_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__DirectMessageCopy_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__DirectMessageCopy_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__DirectMessageCopy_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__DirectMessageCopy_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.direct_message_copy SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__DirectMessageCopy_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.direct_message_copy WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  DirectMessageCopy ////////////////

func MassInsert_DirectMessageCopy(rows []DirectMessageCopy, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun.direct_message_copy (" +
		"MessageId, MessageKey, RoomKey, UserId, MessageFileId, MessageTypeEnumId, Text, CreatedSe, PeerReceivedTime, PeerSeenTime, DeliviryStatusEnumId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.MessageTypeEnumId)
		vals = append(vals, row.Text)
		vals = append(vals, row.CreatedSe)
		vals = append(vals, row.PeerReceivedTime)
		vals = append(vals, row.PeerSeenTime)
		vals = append(vals, row.DeliviryStatusEnumId)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_DirectMessageCopy(rows []DirectMessageCopy, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun.direct_message_copy (" +
		"MessageId, MessageKey, RoomKey, UserId, MessageFileId, MessageTypeEnumId, Text, CreatedSe, PeerReceivedTime, PeerSeenTime, DeliviryStatusEnumId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.MessageKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.UserId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.MessageTypeEnumId)
		vals = append(vals, row.Text)
		vals = append(vals, row.CreatedSe)
		vals = append(vals, row.PeerReceivedTime)
		vals = append(vals, row.PeerSeenTime)
		vals = append(vals, row.DeliviryStatusEnumId)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//
