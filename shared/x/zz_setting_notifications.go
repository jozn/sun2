package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// SettingNotification represents a row from 'sun.setting_notifications'.

// Manualy copy this to project
type SettingNotification__ struct {
	UserId                   int    `json:"UserId"`                   // UserId -
	SocialLedOn              int    `json:"SocialLedOn"`              // SocialLedOn -
	SocialLedColor           string `json:"SocialLedColor"`           // SocialLedColor -
	ReqestToFollowYou        int    `json:"ReqestToFollowYou"`        // ReqestToFollowYou -
	FollowedYou              int    `json:"FollowedYou"`              // FollowedYou -
	AccptedYourFollowRequest int    `json:"AccptedYourFollowRequest"` // AccptedYourFollowRequest -
	YourPostLiked            int    `json:"YourPostLiked"`            // YourPostLiked -
	YourPostCommented        int    `json:"YourPostCommented"`        // YourPostCommented -
	MenthenedYouInPost       int    `json:"MenthenedYouInPost"`       // MenthenedYouInPost -
	MenthenedYouInComment    int    `json:"MenthenedYouInComment"`    // MenthenedYouInComment -
	YourContactsJoined       int    `json:"YourContactsJoined"`       // YourContactsJoined -
	DirectMessage            int    `json:"DirectMessage"`            // DirectMessage -
	DirectAlert              int    `json:"DirectAlert"`              // DirectAlert -
	DirectPerview            int    `json:"DirectPerview"`            // DirectPerview -
	DirectLedOn              int    `json:"DirectLedOn"`              // DirectLedOn -
	DirectLedColor           int    `json:"DirectLedColor"`           // DirectLedColor -
	DirectVibrate            int    `json:"DirectVibrate"`            // DirectVibrate -
	DirectPopup              int    `json:"DirectPopup"`              // DirectPopup -
	DirectSound              int    `json:"DirectSound"`              // DirectSound -
	DirectPriority           int    `json:"DirectPriority"`           // DirectPriority -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SettingNotification exists in the database.
func (sn *SettingNotification) Exists() bool {
	return sn._exists
}

// Deleted provides information if the SettingNotification has been deleted from the database.
func (sn *SettingNotification) Deleted() bool {
	return sn._deleted
}

// Insert inserts the SettingNotification to the database.
func (sn *SettingNotification) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.setting_notifications (` +
		`UserId, SocialLedOn, SocialLedColor, ReqestToFollowYou, FollowedYou, AccptedYourFollowRequest, YourPostLiked, YourPostCommented, MenthenedYouInPost, MenthenedYouInComment, YourContactsJoined, DirectMessage, DirectAlert, DirectPerview, DirectLedOn, DirectLedColor, DirectVibrate, DirectPopup, DirectSound, DirectPriority` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, sn.UserId, sn.SocialLedOn, sn.SocialLedColor, sn.ReqestToFollowYou, sn.FollowedYou, sn.AccptedYourFollowRequest, sn.YourPostLiked, sn.YourPostCommented, sn.MenthenedYouInPost, sn.MenthenedYouInComment, sn.YourContactsJoined, sn.DirectMessage, sn.DirectAlert, sn.DirectPerview, sn.DirectLedOn, sn.DirectLedColor, sn.DirectVibrate, sn.DirectPopup, sn.DirectSound, sn.DirectPriority)
	}
	_, err = db.Exec(sqlstr, sn.UserId, sn.SocialLedOn, sn.SocialLedColor, sn.ReqestToFollowYou, sn.FollowedYou, sn.AccptedYourFollowRequest, sn.YourPostLiked, sn.YourPostCommented, sn.MenthenedYouInPost, sn.MenthenedYouInComment, sn.YourContactsJoined, sn.DirectMessage, sn.DirectAlert, sn.DirectPerview, sn.DirectLedOn, sn.DirectLedColor, sn.DirectVibrate, sn.DirectPopup, sn.DirectSound, sn.DirectPriority)
	if err != nil {
		return err
	}

	// set existence
	sn._exists = true

	OnSettingNotification_AfterInsert(sn)

	return nil
}

// Insert inserts the SettingNotification to the database.
func (sn *SettingNotification) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.setting_notifications (` +
		`UserId, SocialLedOn, SocialLedColor, ReqestToFollowYou, FollowedYou, AccptedYourFollowRequest, YourPostLiked, YourPostCommented, MenthenedYouInPost, MenthenedYouInComment, YourContactsJoined, DirectMessage, DirectAlert, DirectPerview, DirectLedOn, DirectLedColor, DirectVibrate, DirectPopup, DirectSound, DirectPriority` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, sn.UserId, sn.SocialLedOn, sn.SocialLedColor, sn.ReqestToFollowYou, sn.FollowedYou, sn.AccptedYourFollowRequest, sn.YourPostLiked, sn.YourPostCommented, sn.MenthenedYouInPost, sn.MenthenedYouInComment, sn.YourContactsJoined, sn.DirectMessage, sn.DirectAlert, sn.DirectPerview, sn.DirectLedOn, sn.DirectLedColor, sn.DirectVibrate, sn.DirectPopup, sn.DirectSound, sn.DirectPriority)
	}
	_, err = db.Exec(sqlstr, sn.UserId, sn.SocialLedOn, sn.SocialLedColor, sn.ReqestToFollowYou, sn.FollowedYou, sn.AccptedYourFollowRequest, sn.YourPostLiked, sn.YourPostCommented, sn.MenthenedYouInPost, sn.MenthenedYouInComment, sn.YourContactsJoined, sn.DirectMessage, sn.DirectAlert, sn.DirectPerview, sn.DirectLedOn, sn.DirectLedColor, sn.DirectVibrate, sn.DirectPopup, sn.DirectSound, sn.DirectPriority)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return err
	}

	sn._exists = true

	OnSettingNotification_AfterInsert(sn)

	return nil
}

// Update updates the SettingNotification in the database.
func (sn *SettingNotification) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.setting_notifications SET ` +
		`SocialLedOn = ?, SocialLedColor = ?, ReqestToFollowYou = ?, FollowedYou = ?, AccptedYourFollowRequest = ?, YourPostLiked = ?, YourPostCommented = ?, MenthenedYouInPost = ?, MenthenedYouInComment = ?, YourContactsJoined = ?, DirectMessage = ?, DirectAlert = ?, DirectPerview = ?, DirectLedOn = ?, DirectLedColor = ?, DirectVibrate = ?, DirectPopup = ?, DirectSound = ?, DirectPriority = ?` +
		` WHERE UserId = ?`

	// run query
	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, sn.SocialLedOn, sn.SocialLedColor, sn.ReqestToFollowYou, sn.FollowedYou, sn.AccptedYourFollowRequest, sn.YourPostLiked, sn.YourPostCommented, sn.MenthenedYouInPost, sn.MenthenedYouInComment, sn.YourContactsJoined, sn.DirectMessage, sn.DirectAlert, sn.DirectPerview, sn.DirectLedOn, sn.DirectLedColor, sn.DirectVibrate, sn.DirectPopup, sn.DirectSound, sn.DirectPriority, sn.UserId)
	}
	_, err = db.Exec(sqlstr, sn.SocialLedOn, sn.SocialLedColor, sn.ReqestToFollowYou, sn.FollowedYou, sn.AccptedYourFollowRequest, sn.YourPostLiked, sn.YourPostCommented, sn.MenthenedYouInPost, sn.MenthenedYouInComment, sn.YourContactsJoined, sn.DirectMessage, sn.DirectAlert, sn.DirectPerview, sn.DirectLedOn, sn.DirectLedColor, sn.DirectVibrate, sn.DirectPopup, sn.DirectSound, sn.DirectPriority, sn.UserId)

	if LogTableSqlReq.SettingNotification {
		XOLogErr(err)
	}
	OnSettingNotification_AfterUpdate(sn)

	return err
}

// Save saves the SettingNotification to the database.
func (sn *SettingNotification) Save(db XODB) error {
	if sn.Exists() {
		return sn.Update(db)
	}

	return sn.Replace(db)
}

// Delete deletes the SettingNotification from the database.
func (sn *SettingNotification) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sn._exists {
		return nil
	}

	// if deleted, bail
	if sn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.setting_notifications WHERE UserId = ?`

	// run query
	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, sn.UserId)
	}
	_, err = db.Exec(sqlstr, sn.UserId)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	sn._deleted = true

	OnSettingNotification_AfterDelete(sn)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __SettingNotification_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __SettingNotification_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __SettingNotification_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewSettingNotification_Deleter() *__SettingNotification_Deleter {
	d := __SettingNotification_Deleter{whereSep: " AND "}
	return &d
}

func NewSettingNotification_Updater() *__SettingNotification_Updater {
	u := __SettingNotification_Updater{whereSep: " AND "}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewSettingNotification_Selector() *__SettingNotification_Selector {
	u := __SettingNotification_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__SettingNotification_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__SettingNotification_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__SettingNotification_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__SettingNotification_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__SettingNotification_Deleter) Or() *__SettingNotification_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__SettingNotification_Deleter) UserId_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) UserId_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) UserId_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) UserId_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) UserId_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) UserId_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) UserId_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) UserId_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) UserId_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) SocialLedOn_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) SocialLedOn_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) SocialLedOn_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedOn NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) SocialLedOn_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) SocialLedOn_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) SocialLedOn_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) SocialLedOn_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) SocialLedOn_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) SocialLedOn_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) ReqestToFollowYou_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestToFollowYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) ReqestToFollowYou_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestToFollowYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) ReqestToFollowYou_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestToFollowYou NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) ReqestToFollowYou_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) ReqestToFollowYou_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) ReqestToFollowYou_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) ReqestToFollowYou_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) ReqestToFollowYou_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) ReqestToFollowYou_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) FollowedYou_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) FollowedYou_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) FollowedYou_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedYou NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) FollowedYou_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) FollowedYou_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) FollowedYou_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) FollowedYou_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) FollowedYou_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) FollowedYou_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) AccptedYourFollowRequest_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) AccptedYourFollowRequest_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) AccptedYourFollowRequest_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) AccptedYourFollowRequest_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) AccptedYourFollowRequest_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) AccptedYourFollowRequest_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) AccptedYourFollowRequest_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) AccptedYourFollowRequest_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) AccptedYourFollowRequest_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) YourPostLiked_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostLiked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) YourPostLiked_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostLiked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) YourPostLiked_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostLiked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) YourPostLiked_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostLiked_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostLiked_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostLiked_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostLiked_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostLiked_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) YourPostCommented_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostCommented IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) YourPostCommented_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostCommented IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) YourPostCommented_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostCommented NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) YourPostCommented_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostCommented_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostCommented_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostCommented_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostCommented_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourPostCommented_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) MenthenedYouInPost_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInPost IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) MenthenedYouInPost_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInPost IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) MenthenedYouInPost_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInPost NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) MenthenedYouInPost_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInPost_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInPost_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInPost_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInPost_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInPost_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) MenthenedYouInComment_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInComment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) MenthenedYouInComment_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInComment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) MenthenedYouInComment_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInComment NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) MenthenedYouInComment_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInComment_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInComment_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInComment_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInComment_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) MenthenedYouInComment_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) YourContactsJoined_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourContactsJoined IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) YourContactsJoined_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourContactsJoined IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) YourContactsJoined_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourContactsJoined NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) YourContactsJoined_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourContactsJoined_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourContactsJoined_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourContactsJoined_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourContactsJoined_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) YourContactsJoined_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) DirectMessage_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectMessage IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectMessage_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectMessage IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectMessage_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectMessage NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) DirectMessage_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectMessage_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectMessage_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectMessage_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectMessage_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectMessage_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) DirectAlert_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectAlert IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectAlert_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectAlert IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectAlert_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectAlert NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) DirectAlert_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectAlert_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectAlert_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectAlert_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectAlert_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectAlert_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) DirectPerview_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPerview IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectPerview_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPerview IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectPerview_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPerview NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) DirectPerview_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPerview_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPerview_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPerview_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPerview_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPerview_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) DirectLedOn_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectLedOn_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectLedOn_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedOn NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) DirectLedOn_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedOn_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedOn_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedOn_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedOn_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedOn_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) DirectLedColor_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedColor IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectLedColor_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedColor IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectLedColor_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedColor NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) DirectLedColor_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedColor_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedColor_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedColor_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedColor_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectLedColor_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) DirectVibrate_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectVibrate IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectVibrate_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectVibrate IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectVibrate_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectVibrate NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) DirectVibrate_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectVibrate_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectVibrate_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectVibrate_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectVibrate_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectVibrate_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) DirectPopup_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPopup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectPopup_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPopup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectPopup_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPopup NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) DirectPopup_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPopup_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPopup_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPopup_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPopup_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPopup_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) DirectSound_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectSound IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectSound_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectSound IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectSound_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectSound NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) DirectSound_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectSound_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectSound_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectSound_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectSound_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectSound_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Deleter) DirectPriority_In(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPriority IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectPriority_Ins(ins ...int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPriority IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) DirectPriority_NotIn(ins []int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPriority NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) DirectPriority_Eq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPriority_NotEq(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPriority_LT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPriority_LE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPriority_GT(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) DirectPriority_GE(val int) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__SettingNotification_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__SettingNotification_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__SettingNotification_Updater) Or() *__SettingNotification_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__SettingNotification_Updater) UserId_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) UserId_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) UserId_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) UserId_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) UserId_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) UserId_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) UserId_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) UserId_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) UserId_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) SocialLedOn_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) SocialLedOn_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) SocialLedOn_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedOn NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) SocialLedOn_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) SocialLedOn_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) SocialLedOn_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) SocialLedOn_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) SocialLedOn_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) SocialLedOn_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) ReqestToFollowYou_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestToFollowYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) ReqestToFollowYou_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestToFollowYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) ReqestToFollowYou_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestToFollowYou NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) ReqestToFollowYou_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) ReqestToFollowYou_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) ReqestToFollowYou_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) ReqestToFollowYou_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) ReqestToFollowYou_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) ReqestToFollowYou_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) FollowedYou_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) FollowedYou_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) FollowedYou_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedYou NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) FollowedYou_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) FollowedYou_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) FollowedYou_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) FollowedYou_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) FollowedYou_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) FollowedYou_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) AccptedYourFollowRequest_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) AccptedYourFollowRequest_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) AccptedYourFollowRequest_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) AccptedYourFollowRequest_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) AccptedYourFollowRequest_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) AccptedYourFollowRequest_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) AccptedYourFollowRequest_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) AccptedYourFollowRequest_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) AccptedYourFollowRequest_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) YourPostLiked_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostLiked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) YourPostLiked_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostLiked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) YourPostLiked_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostLiked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) YourPostLiked_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostLiked_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostLiked_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostLiked_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostLiked_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostLiked_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) YourPostCommented_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostCommented IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) YourPostCommented_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostCommented IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) YourPostCommented_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostCommented NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) YourPostCommented_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostCommented_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostCommented_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostCommented_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostCommented_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourPostCommented_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) MenthenedYouInPost_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInPost IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) MenthenedYouInPost_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInPost IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) MenthenedYouInPost_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInPost NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) MenthenedYouInPost_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInPost_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInPost_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInPost_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInPost_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInPost_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) MenthenedYouInComment_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInComment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) MenthenedYouInComment_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInComment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) MenthenedYouInComment_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInComment NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) MenthenedYouInComment_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInComment_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInComment_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInComment_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInComment_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) MenthenedYouInComment_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) YourContactsJoined_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourContactsJoined IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) YourContactsJoined_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourContactsJoined IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) YourContactsJoined_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourContactsJoined NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) YourContactsJoined_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourContactsJoined_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourContactsJoined_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourContactsJoined_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourContactsJoined_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) YourContactsJoined_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) DirectMessage_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectMessage IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectMessage_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectMessage IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectMessage_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectMessage NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) DirectMessage_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectMessage_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectMessage_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectMessage_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectMessage_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectMessage_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) DirectAlert_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectAlert IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectAlert_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectAlert IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectAlert_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectAlert NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) DirectAlert_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectAlert_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectAlert_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectAlert_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectAlert_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectAlert_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) DirectPerview_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPerview IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectPerview_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPerview IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectPerview_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPerview NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) DirectPerview_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPerview_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPerview_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPerview_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPerview_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPerview_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) DirectLedOn_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectLedOn_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectLedOn_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedOn NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) DirectLedOn_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedOn_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedOn_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedOn_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedOn_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedOn_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) DirectLedColor_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedColor IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectLedColor_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedColor IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectLedColor_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedColor NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) DirectLedColor_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedColor_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedColor_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedColor_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedColor_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectLedColor_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) DirectVibrate_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectVibrate IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectVibrate_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectVibrate IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectVibrate_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectVibrate NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) DirectVibrate_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectVibrate_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectVibrate_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectVibrate_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectVibrate_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectVibrate_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) DirectPopup_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPopup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectPopup_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPopup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectPopup_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPopup NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) DirectPopup_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPopup_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPopup_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPopup_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPopup_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPopup_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) DirectSound_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectSound IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectSound_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectSound IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectSound_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectSound NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) DirectSound_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectSound_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectSound_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectSound_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectSound_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectSound_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Updater) DirectPriority_In(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPriority IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectPriority_Ins(ins ...int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPriority IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) DirectPriority_NotIn(ins []int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPriority NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) DirectPriority_Eq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPriority_NotEq(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPriority_LT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPriority_LE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPriority_GT(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) DirectPriority_GE(val int) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__SettingNotification_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__SettingNotification_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__SettingNotification_Selector) Or() *__SettingNotification_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__SettingNotification_Selector) UserId_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) UserId_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) UserId_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) UserId_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) UserId_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) UserId_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) UserId_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) UserId_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) UserId_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) SocialLedOn_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) SocialLedOn_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) SocialLedOn_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedOn NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) SocialLedOn_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) SocialLedOn_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) SocialLedOn_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) SocialLedOn_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) SocialLedOn_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) SocialLedOn_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedOn >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) ReqestToFollowYou_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestToFollowYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) ReqestToFollowYou_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestToFollowYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) ReqestToFollowYou_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestToFollowYou NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) ReqestToFollowYou_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) ReqestToFollowYou_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) ReqestToFollowYou_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) ReqestToFollowYou_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) ReqestToFollowYou_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) ReqestToFollowYou_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestToFollowYou >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) FollowedYou_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) FollowedYou_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedYou IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) FollowedYou_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedYou NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) FollowedYou_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) FollowedYou_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) FollowedYou_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) FollowedYou_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) FollowedYou_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) FollowedYou_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedYou >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) AccptedYourFollowRequest_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) AccptedYourFollowRequest_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) AccptedYourFollowRequest_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) AccptedYourFollowRequest_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) AccptedYourFollowRequest_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) AccptedYourFollowRequest_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) AccptedYourFollowRequest_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) AccptedYourFollowRequest_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) AccptedYourFollowRequest_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccptedYourFollowRequest >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) YourPostLiked_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostLiked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) YourPostLiked_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostLiked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) YourPostLiked_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostLiked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) YourPostLiked_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostLiked_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostLiked_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostLiked_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostLiked_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostLiked_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostLiked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) YourPostCommented_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostCommented IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) YourPostCommented_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostCommented IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) YourPostCommented_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourPostCommented NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) YourPostCommented_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostCommented_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostCommented_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostCommented_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostCommented_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourPostCommented_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourPostCommented >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) MenthenedYouInPost_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInPost IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) MenthenedYouInPost_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInPost IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) MenthenedYouInPost_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInPost NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) MenthenedYouInPost_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInPost_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInPost_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInPost_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInPost_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInPost_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInPost >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) MenthenedYouInComment_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInComment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) MenthenedYouInComment_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInComment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) MenthenedYouInComment_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MenthenedYouInComment NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) MenthenedYouInComment_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInComment_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInComment_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInComment_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInComment_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) MenthenedYouInComment_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MenthenedYouInComment >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) YourContactsJoined_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourContactsJoined IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) YourContactsJoined_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourContactsJoined IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) YourContactsJoined_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " YourContactsJoined NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) YourContactsJoined_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourContactsJoined_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourContactsJoined_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourContactsJoined_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourContactsJoined_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) YourContactsJoined_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " YourContactsJoined >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) DirectMessage_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectMessage IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectMessage_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectMessage IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectMessage_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectMessage NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) DirectMessage_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectMessage_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectMessage_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectMessage_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectMessage_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectMessage_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectMessage >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) DirectAlert_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectAlert IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectAlert_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectAlert IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectAlert_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectAlert NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) DirectAlert_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectAlert_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectAlert_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectAlert_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectAlert_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectAlert_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectAlert >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) DirectPerview_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPerview IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectPerview_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPerview IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectPerview_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPerview NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) DirectPerview_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPerview_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPerview_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPerview_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPerview_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPerview_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPerview >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) DirectLedOn_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectLedOn_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedOn IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectLedOn_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedOn NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) DirectLedOn_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedOn_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedOn_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedOn_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedOn_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedOn_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedOn >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) DirectLedColor_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedColor IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectLedColor_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedColor IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectLedColor_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectLedColor NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) DirectLedColor_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedColor_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedColor_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedColor_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedColor_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectLedColor_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectLedColor >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) DirectVibrate_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectVibrate IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectVibrate_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectVibrate IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectVibrate_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectVibrate NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) DirectVibrate_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectVibrate_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectVibrate_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectVibrate_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectVibrate_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectVibrate_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectVibrate >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) DirectPopup_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPopup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectPopup_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPopup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectPopup_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPopup NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) DirectPopup_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPopup_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPopup_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPopup_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPopup_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPopup_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPopup >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) DirectSound_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectSound IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectSound_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectSound IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectSound_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectSound NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) DirectSound_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectSound_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectSound_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectSound_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectSound_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectSound_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectSound >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SettingNotification_Selector) DirectPriority_In(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPriority IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectPriority_Ins(ins ...int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPriority IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) DirectPriority_NotIn(ins []int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DirectPriority NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) DirectPriority_Eq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPriority_NotEq(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPriority_LT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPriority_LE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPriority_GT(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) DirectPriority_GE(val int) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DirectPriority >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__SettingNotification_Deleter) SocialLedColor_In(ins []string) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedColor IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Deleter) SocialLedColor_NotIn(ins []string) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedColor NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__SettingNotification_Deleter) SocialLedColor_Like(val string) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedColor LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Deleter) SocialLedColor_Eq(val string) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedColor = " + u.nextDollars
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Deleter) SocialLedColor_NotEq(val string) *__SettingNotification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedColor != " + u.nextDollars
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__SettingNotification_Updater) SocialLedColor_In(ins []string) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedColor IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Updater) SocialLedColor_NotIn(ins []string) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedColor NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__SettingNotification_Updater) SocialLedColor_Like(val string) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedColor LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Updater) SocialLedColor_Eq(val string) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedColor = " + u.nextDollars
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Updater) SocialLedColor_NotEq(val string) *__SettingNotification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedColor != " + u.nextDollars
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__SettingNotification_Selector) SocialLedColor_In(ins []string) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedColor IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SettingNotification_Selector) SocialLedColor_NotIn(ins []string) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SocialLedColor NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__SettingNotification_Selector) SocialLedColor_Like(val string) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedColor LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SettingNotification_Selector) SocialLedColor_Eq(val string) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedColor = " + u.nextDollars
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SettingNotification_Selector) SocialLedColor_NotEq(val string) *__SettingNotification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SocialLedColor != " + u.nextDollars
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__SettingNotification_Updater) UserId(newVal int) *__SettingNotification_Updater {
	up := updateCol{" UserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) UserId_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" UserId = UserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UserId = UserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UserId = UserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UserId = UserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) SocialLedOn(newVal int) *__SettingNotification_Updater {
	up := updateCol{" SocialLedOn = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" SocialLedOn = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) SocialLedOn_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" SocialLedOn = SocialLedOn+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" SocialLedOn = SocialLedOn+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" SocialLedOn = SocialLedOn- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" SocialLedOn = SocialLedOn- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__SettingNotification_Updater) SocialLedColor(newVal string) *__SettingNotification_Updater {
	up := updateCol{"SocialLedColor = " + u.nextDollar(), count}
	u.updates = append(u.updates, up)
	// u.updates[" SocialLedColor = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__SettingNotification_Updater) ReqestToFollowYou(newVal int) *__SettingNotification_Updater {
	up := updateCol{" ReqestToFollowYou = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ReqestToFollowYou = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) ReqestToFollowYou_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" ReqestToFollowYou = ReqestToFollowYou+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ReqestToFollowYou = ReqestToFollowYou+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ReqestToFollowYou = ReqestToFollowYou- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ReqestToFollowYou = ReqestToFollowYou- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) FollowedYou(newVal int) *__SettingNotification_Updater {
	up := updateCol{" FollowedYou = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" FollowedYou = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) FollowedYou_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" FollowedYou = FollowedYou+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" FollowedYou = FollowedYou+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" FollowedYou = FollowedYou- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" FollowedYou = FollowedYou- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) AccptedYourFollowRequest(newVal int) *__SettingNotification_Updater {
	up := updateCol{" AccptedYourFollowRequest = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" AccptedYourFollowRequest = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) AccptedYourFollowRequest_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" AccptedYourFollowRequest = AccptedYourFollowRequest+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" AccptedYourFollowRequest = AccptedYourFollowRequest+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" AccptedYourFollowRequest = AccptedYourFollowRequest- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" AccptedYourFollowRequest = AccptedYourFollowRequest- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) YourPostLiked(newVal int) *__SettingNotification_Updater {
	up := updateCol{" YourPostLiked = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" YourPostLiked = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) YourPostLiked_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" YourPostLiked = YourPostLiked+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" YourPostLiked = YourPostLiked+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" YourPostLiked = YourPostLiked- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" YourPostLiked = YourPostLiked- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) YourPostCommented(newVal int) *__SettingNotification_Updater {
	up := updateCol{" YourPostCommented = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" YourPostCommented = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) YourPostCommented_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" YourPostCommented = YourPostCommented+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" YourPostCommented = YourPostCommented+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" YourPostCommented = YourPostCommented- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" YourPostCommented = YourPostCommented- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) MenthenedYouInPost(newVal int) *__SettingNotification_Updater {
	up := updateCol{" MenthenedYouInPost = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MenthenedYouInPost = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) MenthenedYouInPost_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" MenthenedYouInPost = MenthenedYouInPost+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MenthenedYouInPost = MenthenedYouInPost+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MenthenedYouInPost = MenthenedYouInPost- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MenthenedYouInPost = MenthenedYouInPost- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) MenthenedYouInComment(newVal int) *__SettingNotification_Updater {
	up := updateCol{" MenthenedYouInComment = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MenthenedYouInComment = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) MenthenedYouInComment_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" MenthenedYouInComment = MenthenedYouInComment+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MenthenedYouInComment = MenthenedYouInComment+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MenthenedYouInComment = MenthenedYouInComment- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MenthenedYouInComment = MenthenedYouInComment- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) YourContactsJoined(newVal int) *__SettingNotification_Updater {
	up := updateCol{" YourContactsJoined = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" YourContactsJoined = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) YourContactsJoined_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" YourContactsJoined = YourContactsJoined+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" YourContactsJoined = YourContactsJoined+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" YourContactsJoined = YourContactsJoined- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" YourContactsJoined = YourContactsJoined- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) DirectMessage(newVal int) *__SettingNotification_Updater {
	up := updateCol{" DirectMessage = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DirectMessage = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) DirectMessage_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" DirectMessage = DirectMessage+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DirectMessage = DirectMessage+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DirectMessage = DirectMessage- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DirectMessage = DirectMessage- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) DirectAlert(newVal int) *__SettingNotification_Updater {
	up := updateCol{" DirectAlert = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DirectAlert = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) DirectAlert_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" DirectAlert = DirectAlert+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DirectAlert = DirectAlert+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DirectAlert = DirectAlert- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DirectAlert = DirectAlert- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) DirectPerview(newVal int) *__SettingNotification_Updater {
	up := updateCol{" DirectPerview = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DirectPerview = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) DirectPerview_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" DirectPerview = DirectPerview+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DirectPerview = DirectPerview+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DirectPerview = DirectPerview- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DirectPerview = DirectPerview- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) DirectLedOn(newVal int) *__SettingNotification_Updater {
	up := updateCol{" DirectLedOn = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DirectLedOn = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) DirectLedOn_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" DirectLedOn = DirectLedOn+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DirectLedOn = DirectLedOn+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DirectLedOn = DirectLedOn- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DirectLedOn = DirectLedOn- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) DirectLedColor(newVal int) *__SettingNotification_Updater {
	up := updateCol{" DirectLedColor = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DirectLedColor = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) DirectLedColor_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" DirectLedColor = DirectLedColor+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DirectLedColor = DirectLedColor+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DirectLedColor = DirectLedColor- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DirectLedColor = DirectLedColor- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) DirectVibrate(newVal int) *__SettingNotification_Updater {
	up := updateCol{" DirectVibrate = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DirectVibrate = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) DirectVibrate_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" DirectVibrate = DirectVibrate+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DirectVibrate = DirectVibrate+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DirectVibrate = DirectVibrate- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DirectVibrate = DirectVibrate- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) DirectPopup(newVal int) *__SettingNotification_Updater {
	up := updateCol{" DirectPopup = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DirectPopup = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) DirectPopup_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" DirectPopup = DirectPopup+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DirectPopup = DirectPopup+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DirectPopup = DirectPopup- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DirectPopup = DirectPopup- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) DirectSound(newVal int) *__SettingNotification_Updater {
	up := updateCol{" DirectSound = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DirectSound = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) DirectSound_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" DirectSound = DirectSound+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DirectSound = DirectSound+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DirectSound = DirectSound- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DirectSound = DirectSound- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SettingNotification_Updater) DirectPriority(newVal int) *__SettingNotification_Updater {
	up := updateCol{" DirectPriority = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DirectPriority = " + u.nextDollar()] = newVal
	return u
}

func (u *__SettingNotification_Updater) DirectPriority_Increment(count int) *__SettingNotification_Updater {
	if count > 0 {
		up := updateCol{" DirectPriority = DirectPriority+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DirectPriority = DirectPriority+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DirectPriority = DirectPriority- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DirectPriority = DirectPriority- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__SettingNotification_Selector) OrderBy_UserId_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_UserId_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_UserId() *__SettingNotification_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_SocialLedOn_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY SocialLedOn DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_SocialLedOn_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY SocialLedOn ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_SocialLedOn() *__SettingNotification_Selector {
	u.selectCol = "SocialLedOn"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_SocialLedColor_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY SocialLedColor DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_SocialLedColor_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY SocialLedColor ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_SocialLedColor() *__SettingNotification_Selector {
	u.selectCol = "SocialLedColor"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_ReqestToFollowYou_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY ReqestToFollowYou DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_ReqestToFollowYou_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY ReqestToFollowYou ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_ReqestToFollowYou() *__SettingNotification_Selector {
	u.selectCol = "ReqestToFollowYou"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_FollowedYou_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY FollowedYou DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_FollowedYou_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY FollowedYou ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_FollowedYou() *__SettingNotification_Selector {
	u.selectCol = "FollowedYou"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_AccptedYourFollowRequest_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY AccptedYourFollowRequest DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_AccptedYourFollowRequest_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY AccptedYourFollowRequest ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_AccptedYourFollowRequest() *__SettingNotification_Selector {
	u.selectCol = "AccptedYourFollowRequest"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_YourPostLiked_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY YourPostLiked DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_YourPostLiked_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY YourPostLiked ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_YourPostLiked() *__SettingNotification_Selector {
	u.selectCol = "YourPostLiked"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_YourPostCommented_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY YourPostCommented DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_YourPostCommented_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY YourPostCommented ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_YourPostCommented() *__SettingNotification_Selector {
	u.selectCol = "YourPostCommented"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_MenthenedYouInPost_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY MenthenedYouInPost DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_MenthenedYouInPost_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY MenthenedYouInPost ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_MenthenedYouInPost() *__SettingNotification_Selector {
	u.selectCol = "MenthenedYouInPost"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_MenthenedYouInComment_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY MenthenedYouInComment DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_MenthenedYouInComment_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY MenthenedYouInComment ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_MenthenedYouInComment() *__SettingNotification_Selector {
	u.selectCol = "MenthenedYouInComment"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_YourContactsJoined_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY YourContactsJoined DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_YourContactsJoined_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY YourContactsJoined ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_YourContactsJoined() *__SettingNotification_Selector {
	u.selectCol = "YourContactsJoined"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectMessage_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectMessage DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectMessage_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectMessage ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_DirectMessage() *__SettingNotification_Selector {
	u.selectCol = "DirectMessage"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectAlert_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectAlert DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectAlert_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectAlert ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_DirectAlert() *__SettingNotification_Selector {
	u.selectCol = "DirectAlert"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectPerview_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectPerview DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectPerview_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectPerview ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_DirectPerview() *__SettingNotification_Selector {
	u.selectCol = "DirectPerview"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectLedOn_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectLedOn DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectLedOn_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectLedOn ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_DirectLedOn() *__SettingNotification_Selector {
	u.selectCol = "DirectLedOn"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectLedColor_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectLedColor DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectLedColor_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectLedColor ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_DirectLedColor() *__SettingNotification_Selector {
	u.selectCol = "DirectLedColor"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectVibrate_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectVibrate DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectVibrate_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectVibrate ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_DirectVibrate() *__SettingNotification_Selector {
	u.selectCol = "DirectVibrate"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectPopup_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectPopup DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectPopup_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectPopup ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_DirectPopup() *__SettingNotification_Selector {
	u.selectCol = "DirectPopup"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectSound_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectSound DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectSound_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectSound ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_DirectSound() *__SettingNotification_Selector {
	u.selectCol = "DirectSound"
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectPriority_Desc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectPriority DESC "
	return u
}

func (u *__SettingNotification_Selector) OrderBy_DirectPriority_Asc() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY DirectPriority ASC "
	return u
}

func (u *__SettingNotification_Selector) Select_DirectPriority() *__SettingNotification_Selector {
	u.selectCol = "DirectPriority"
	return u
}

func (u *__SettingNotification_Selector) Limit(num int) *__SettingNotification_Selector {
	u.limit = num
	return u
}

func (u *__SettingNotification_Selector) Offset(num int) *__SettingNotification_Selector {
	u.offset = num
	return u
}

func (u *__SettingNotification_Selector) Order_Rand() *__SettingNotification_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__SettingNotification_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.setting_notifications"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__SettingNotification_Selector) GetRow(db *sqlx.DB) (*SettingNotification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, whereArgs)
	}

	row := &SettingNotification{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnSettingNotification_LoadOne(row)

	return row, nil
}

func (u *__SettingNotification_Selector) GetRows(db *sqlx.DB) ([]*SettingNotification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*SettingNotification
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnSettingNotification_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__SettingNotification_Selector) GetRows2(db *sqlx.DB) ([]SettingNotification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*SettingNotification
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnSettingNotification_LoadMany(rows)

	rows2 := make([]SettingNotification, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__SettingNotification_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__SettingNotification_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__SettingNotification_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__SettingNotification_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__SettingNotification_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.setting_notifications SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__SettingNotification_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.setting_notifications WHERE " + wheresStr

	// run query
	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  SettingNotification ////////////////

func MassInsert_SettingNotification(rows []SettingNotification, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(20, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun.setting_notifications (" +
		"UserId, SocialLedOn, SocialLedColor, ReqestToFollowYou, FollowedYou, AccptedYourFollowRequest, YourPostLiked, YourPostCommented, MenthenedYouInPost, MenthenedYouInComment, YourContactsJoined, DirectMessage, DirectAlert, DirectPerview, DirectLedOn, DirectLedColor, DirectVibrate, DirectPopup, DirectSound, DirectPriority" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.SocialLedOn)
		vals = append(vals, row.SocialLedColor)
		vals = append(vals, row.ReqestToFollowYou)
		vals = append(vals, row.FollowedYou)
		vals = append(vals, row.AccptedYourFollowRequest)
		vals = append(vals, row.YourPostLiked)
		vals = append(vals, row.YourPostCommented)
		vals = append(vals, row.MenthenedYouInPost)
		vals = append(vals, row.MenthenedYouInComment)
		vals = append(vals, row.YourContactsJoined)
		vals = append(vals, row.DirectMessage)
		vals = append(vals, row.DirectAlert)
		vals = append(vals, row.DirectPerview)
		vals = append(vals, row.DirectLedOn)
		vals = append(vals, row.DirectLedColor)
		vals = append(vals, row.DirectVibrate)
		vals = append(vals, row.DirectPopup)
		vals = append(vals, row.DirectSound)
		vals = append(vals, row.DirectPriority)

	}

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_SettingNotification(rows []SettingNotification, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(20, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun.setting_notifications (" +
		"UserId, SocialLedOn, SocialLedColor, ReqestToFollowYou, FollowedYou, AccptedYourFollowRequest, YourPostLiked, YourPostCommented, MenthenedYouInPost, MenthenedYouInComment, YourContactsJoined, DirectMessage, DirectAlert, DirectPerview, DirectLedOn, DirectLedColor, DirectVibrate, DirectPopup, DirectSound, DirectPriority" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.SocialLedOn)
		vals = append(vals, row.SocialLedColor)
		vals = append(vals, row.ReqestToFollowYou)
		vals = append(vals, row.FollowedYou)
		vals = append(vals, row.AccptedYourFollowRequest)
		vals = append(vals, row.YourPostLiked)
		vals = append(vals, row.YourPostCommented)
		vals = append(vals, row.MenthenedYouInPost)
		vals = append(vals, row.MenthenedYouInComment)
		vals = append(vals, row.YourContactsJoined)
		vals = append(vals, row.DirectMessage)
		vals = append(vals, row.DirectAlert)
		vals = append(vals, row.DirectPerview)
		vals = append(vals, row.DirectLedOn)
		vals = append(vals, row.DirectLedColor)
		vals = append(vals, row.DirectVibrate)
		vals = append(vals, row.DirectPopup)
		vals = append(vals, row.DirectSound)
		vals = append(vals, row.DirectPriority)

	}

	if LogTableSqlReq.SettingNotification {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.SettingNotification {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
