package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// PostReshared represents a row from 'sun.post_reshared'.

// Manualy copy this to project
type PostReshared__ struct {
	ResharedId  int `json:"ResharedId"`  // ResharedId -
	PostId      int `json:"PostId"`      // PostId -
	ByUserId    int `json:"ByUserId"`    // ByUserId -
	PostUserId  int `json:"PostUserId"`  // PostUserId -
	CreatedTime int `json:"CreatedTime"` // CreatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PostReshared exists in the database.
func (pr *PostReshared) Exists() bool {
	return pr._exists
}

// Deleted provides information if the PostReshared has been deleted from the database.
func (pr *PostReshared) Deleted() bool {
	return pr._deleted
}

// Insert inserts the PostReshared to the database.
func (pr *PostReshared) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.post_reshared (` +
		`ResharedId, PostId, ByUserId, PostUserId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, pr.ResharedId, pr.PostId, pr.ByUserId, pr.PostUserId, pr.CreatedTime)
	}
	_, err = db.Exec(sqlstr, pr.ResharedId, pr.PostId, pr.ByUserId, pr.PostUserId, pr.CreatedTime)
	if err != nil {
		return err
	}

	// set existence
	pr._exists = true

	OnPostReshared_AfterInsert(pr)

	return nil
}

// Insert inserts the PostReshared to the database.
func (pr *PostReshared) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.post_reshared (` +
		`ResharedId, PostId, ByUserId, PostUserId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, pr.ResharedId, pr.PostId, pr.ByUserId, pr.PostUserId, pr.CreatedTime)
	}
	_, err = db.Exec(sqlstr, pr.ResharedId, pr.PostId, pr.ByUserId, pr.PostUserId, pr.CreatedTime)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return err
	}

	pr._exists = true

	OnPostReshared_AfterInsert(pr)

	return nil
}

// Update updates the PostReshared in the database.
func (pr *PostReshared) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.post_reshared SET ` +
		`PostId = ?, ByUserId = ?, PostUserId = ?, CreatedTime = ?` +
		` WHERE ResharedId = ?`

	// run query
	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, pr.PostId, pr.ByUserId, pr.PostUserId, pr.CreatedTime, pr.ResharedId)
	}
	_, err = db.Exec(sqlstr, pr.PostId, pr.ByUserId, pr.PostUserId, pr.CreatedTime, pr.ResharedId)

	if LogTableSqlReq.PostReshared {
		XOLogErr(err)
	}
	OnPostReshared_AfterUpdate(pr)

	return err
}

// Save saves the PostReshared to the database.
func (pr *PostReshared) Save(db XODB) error {
	if pr.Exists() {
		return pr.Update(db)
	}

	return pr.Replace(db)
}

// Delete deletes the PostReshared from the database.
func (pr *PostReshared) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pr._exists {
		return nil
	}

	// if deleted, bail
	if pr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.post_reshared WHERE ResharedId = ?`

	// run query
	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, pr.ResharedId)
	}
	_, err = db.Exec(sqlstr, pr.ResharedId)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	pr._deleted = true

	OnPostReshared_AfterDelete(pr)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __PostReshared_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __PostReshared_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __PostReshared_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewPostReshared_Deleter() *__PostReshared_Deleter {
	d := __PostReshared_Deleter{whereSep: " AND ", isMysql: true}
	return &d
}

func NewPostReshared_Updater() *__PostReshared_Updater {
	u := __PostReshared_Updater{whereSep: " AND ", isMysql: true}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewPostReshared_Selector() *__PostReshared_Selector {
	u := __PostReshared_Selector{whereSep: " AND ", selectCol: "*", isMysql: true}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__PostReshared_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__PostReshared_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__PostReshared_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PostReshared_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PostReshared_Deleter) Or() *__PostReshared_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PostReshared_Deleter) ResharedId_In(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) ResharedId_Ins(ins ...int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) ResharedId_NotIn(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Deleter) ResharedId_Eq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ResharedId_NotEq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ResharedId_LT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ResharedId_LE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ResharedId_GT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ResharedId_GE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Deleter) PostId_In(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) PostId_Ins(ins ...int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) PostId_NotIn(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Deleter) PostId_Eq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostId_NotEq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostId_LT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostId_LE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostId_GT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostId_GE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Deleter) ByUserId_In(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) ByUserId_Ins(ins ...int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) ByUserId_NotIn(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Deleter) ByUserId_Eq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ByUserId_NotEq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ByUserId_LT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ByUserId_LE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ByUserId_GT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) ByUserId_GE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Deleter) PostUserId_In(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) PostUserId_Ins(ins ...int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) PostUserId_NotIn(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Deleter) PostUserId_Eq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostUserId_NotEq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostUserId_LT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostUserId_LE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostUserId_GT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) PostUserId_GE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Deleter) CreatedTime_In(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) CreatedTime_Ins(ins ...int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Deleter) CreatedTime_NotIn(ins []int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Deleter) CreatedTime_Eq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) CreatedTime_NotEq(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) CreatedTime_LT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) CreatedTime_LE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) CreatedTime_GT(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Deleter) CreatedTime_GE(val int) *__PostReshared_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__PostReshared_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PostReshared_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PostReshared_Updater) Or() *__PostReshared_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PostReshared_Updater) ResharedId_In(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) ResharedId_Ins(ins ...int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) ResharedId_NotIn(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Updater) ResharedId_Eq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ResharedId_NotEq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ResharedId_LT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ResharedId_LE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ResharedId_GT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ResharedId_GE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Updater) PostId_In(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) PostId_Ins(ins ...int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) PostId_NotIn(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Updater) PostId_Eq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostId_NotEq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostId_LT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostId_LE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostId_GT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostId_GE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Updater) ByUserId_In(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) ByUserId_Ins(ins ...int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) ByUserId_NotIn(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Updater) ByUserId_Eq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ByUserId_NotEq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ByUserId_LT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ByUserId_LE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ByUserId_GT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) ByUserId_GE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Updater) PostUserId_In(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) PostUserId_Ins(ins ...int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) PostUserId_NotIn(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Updater) PostUserId_Eq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostUserId_NotEq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostUserId_LT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostUserId_LE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostUserId_GT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) PostUserId_GE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Updater) CreatedTime_In(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) CreatedTime_Ins(ins ...int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Updater) CreatedTime_NotIn(ins []int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Updater) CreatedTime_Eq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) CreatedTime_NotEq(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) CreatedTime_LT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) CreatedTime_LE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) CreatedTime_GT(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Updater) CreatedTime_GE(val int) *__PostReshared_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__PostReshared_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PostReshared_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PostReshared_Selector) Or() *__PostReshared_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PostReshared_Selector) ResharedId_In(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) ResharedId_Ins(ins ...int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) ResharedId_NotIn(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Selector) ResharedId_Eq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ResharedId_NotEq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ResharedId_LT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ResharedId_LE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ResharedId_GT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ResharedId_GE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Selector) PostId_In(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) PostId_Ins(ins ...int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) PostId_NotIn(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Selector) PostId_Eq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostId_NotEq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostId_LT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostId_LE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostId_GT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostId_GE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Selector) ByUserId_In(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) ByUserId_Ins(ins ...int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) ByUserId_NotIn(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Selector) ByUserId_Eq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ByUserId_NotEq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ByUserId_LT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ByUserId_LE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ByUserId_GT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) ByUserId_GE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Selector) PostUserId_In(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) PostUserId_Ins(ins ...int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) PostUserId_NotIn(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Selector) PostUserId_Eq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostUserId_NotEq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostUserId_LT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostUserId_LE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostUserId_GT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) PostUserId_GE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostReshared_Selector) CreatedTime_In(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) CreatedTime_Ins(ins ...int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostReshared_Selector) CreatedTime_NotIn(ins []int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostReshared_Selector) CreatedTime_Eq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) CreatedTime_NotEq(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) CreatedTime_LT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) CreatedTime_LE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) CreatedTime_GT(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostReshared_Selector) CreatedTime_GE(val int) *__PostReshared_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PostReshared_Updater) ResharedId(newVal int) *__PostReshared_Updater {
	up := updateCol{" ResharedId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ResharedId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostReshared_Updater) ResharedId_Increment(count int) *__PostReshared_Updater {
	if count > 0 {
		up := updateCol{" ResharedId = ResharedId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ResharedId = ResharedId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ResharedId = ResharedId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ResharedId = ResharedId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostReshared_Updater) PostId(newVal int) *__PostReshared_Updater {
	up := updateCol{" PostId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PostId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostReshared_Updater) PostId_Increment(count int) *__PostReshared_Updater {
	if count > 0 {
		up := updateCol{" PostId = PostId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PostId = PostId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PostId = PostId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PostId = PostId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostReshared_Updater) ByUserId(newVal int) *__PostReshared_Updater {
	up := updateCol{" ByUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ByUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostReshared_Updater) ByUserId_Increment(count int) *__PostReshared_Updater {
	if count > 0 {
		up := updateCol{" ByUserId = ByUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ByUserId = ByUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ByUserId = ByUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ByUserId = ByUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostReshared_Updater) PostUserId(newVal int) *__PostReshared_Updater {
	up := updateCol{" PostUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PostUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostReshared_Updater) PostUserId_Increment(count int) *__PostReshared_Updater {
	if count > 0 {
		up := updateCol{" PostUserId = PostUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PostUserId = PostUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PostUserId = PostUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PostUserId = PostUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostReshared_Updater) CreatedTime(newVal int) *__PostReshared_Updater {
	up := updateCol{" CreatedTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatedTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostReshared_Updater) CreatedTime_Increment(count int) *__PostReshared_Updater {
	if count > 0 {
		up := updateCol{" CreatedTime = CreatedTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatedTime = CreatedTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatedTime = CreatedTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatedTime = CreatedTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PostReshared_Selector) OrderBy_ResharedId_Desc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY ResharedId DESC "
	return u
}

func (u *__PostReshared_Selector) OrderBy_ResharedId_Asc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY ResharedId ASC "
	return u
}

func (u *__PostReshared_Selector) Select_ResharedId() *__PostReshared_Selector {
	u.selectCol = "ResharedId"
	return u
}

func (u *__PostReshared_Selector) OrderBy_PostId_Desc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__PostReshared_Selector) OrderBy_PostId_Asc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__PostReshared_Selector) Select_PostId() *__PostReshared_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__PostReshared_Selector) OrderBy_ByUserId_Desc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY ByUserId DESC "
	return u
}

func (u *__PostReshared_Selector) OrderBy_ByUserId_Asc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY ByUserId ASC "
	return u
}

func (u *__PostReshared_Selector) Select_ByUserId() *__PostReshared_Selector {
	u.selectCol = "ByUserId"
	return u
}

func (u *__PostReshared_Selector) OrderBy_PostUserId_Desc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY PostUserId DESC "
	return u
}

func (u *__PostReshared_Selector) OrderBy_PostUserId_Asc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY PostUserId ASC "
	return u
}

func (u *__PostReshared_Selector) Select_PostUserId() *__PostReshared_Selector {
	u.selectCol = "PostUserId"
	return u
}

func (u *__PostReshared_Selector) OrderBy_CreatedTime_Desc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__PostReshared_Selector) OrderBy_CreatedTime_Asc() *__PostReshared_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__PostReshared_Selector) Select_CreatedTime() *__PostReshared_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__PostReshared_Selector) Limit(num int) *__PostReshared_Selector {
	u.limit = num
	return u
}

func (u *__PostReshared_Selector) Offset(num int) *__PostReshared_Selector {
	u.offset = num
	return u
}

func (u *__PostReshared_Selector) Order_Rand() *__PostReshared_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PostReshared_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.post_reshared"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PostReshared_Selector) GetRow(db *sqlx.DB) (*PostReshared, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, whereArgs)
	}

	row := &PostReshared{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnPostReshared_LoadOne(row)

	return row, nil
}

func (u *__PostReshared_Selector) GetRows(db *sqlx.DB) ([]*PostReshared, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*PostReshared
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPostReshared_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__PostReshared_Selector) GetRows2(db *sqlx.DB) ([]PostReshared, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*PostReshared
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPostReshared_LoadMany(rows)

	rows2 := make([]PostReshared, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__PostReshared_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__PostReshared_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PostReshared_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PostReshared_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PostReshared_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.post_reshared SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__PostReshared_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.post_reshared WHERE " + wheresStr

	// run query
	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PostReshared ////////////////

func MassInsert_PostReshared(rows []PostReshared, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(5, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun.post_reshared (" +
		"ResharedId, PostId, ByUserId, PostUserId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ResharedId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.ByUserId)
		vals = append(vals, row.PostUserId)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_PostReshared(rows []PostReshared, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(5, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun.post_reshared (" +
		"ResharedId, PostId, ByUserId, PostUserId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ResharedId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.ByUserId)
		vals = append(vals, row.PostUserId)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.PostReshared {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PostReshared {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//
