package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// PostMedia represents a row from 'sun.post_media'.

// Manualy copy this to project
type PostMedia__ struct {
	MediaId       int    `json:"MediaId"`       // MediaId -
	UserId        int    `json:"UserId"`        // UserId -
	PostId        int    `json:"PostId"`        // PostId -
	AlbumId       int    `json:"AlbumId"`       // AlbumId -
	MediaTypeEnum int    `json:"MediaTypeEnum"` // MediaTypeEnum -
	Width         int    `json:"Width"`         // Width -
	Height        int    `json:"Height"`        // Height -
	Size          int    `json:"Size"`          // Size -
	Duration      int    `json:"Duration"`      // Duration -
	Extension     string `json:"Extension"`     // Extension -
	Md5Hash       string `json:"Md5Hash"`       // Md5Hash -
	Color         string `json:"Color"`         // Color -
	CreatedTime   int    `json:"CreatedTime"`   // CreatedTime -
	ViewCount     int    `json:"ViewCount"`     // ViewCount -
	Extra         string `json:"Extra"`         // Extra -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PostMedia exists in the database.
func (pm *PostMedia) Exists() bool {
	return pm._exists
}

// Deleted provides information if the PostMedia has been deleted from the database.
func (pm *PostMedia) Deleted() bool {
	return pm._deleted
}

// Insert inserts the PostMedia to the database.
func (pm *PostMedia) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.post_media (` +
		`MediaId, UserId, PostId, AlbumId, MediaTypeEnum, Width, Height, Size, Duration, Extension, Md5Hash, Color, CreatedTime, ViewCount, Extra` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, pm.MediaId, pm.UserId, pm.PostId, pm.AlbumId, pm.MediaTypeEnum, pm.Width, pm.Height, pm.Size, pm.Duration, pm.Extension, pm.Md5Hash, pm.Color, pm.CreatedTime, pm.ViewCount, pm.Extra)
	}
	_, err = db.Exec(sqlstr, pm.MediaId, pm.UserId, pm.PostId, pm.AlbumId, pm.MediaTypeEnum, pm.Width, pm.Height, pm.Size, pm.Duration, pm.Extension, pm.Md5Hash, pm.Color, pm.CreatedTime, pm.ViewCount, pm.Extra)
	if err != nil {
		return err
	}

	// set existence
	pm._exists = true

	OnPostMedia_AfterInsert(pm)

	return nil
}

// Insert inserts the PostMedia to the database.
func (pm *PostMedia) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.post_media (` +
		`MediaId, UserId, PostId, AlbumId, MediaTypeEnum, Width, Height, Size, Duration, Extension, Md5Hash, Color, CreatedTime, ViewCount, Extra` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, pm.MediaId, pm.UserId, pm.PostId, pm.AlbumId, pm.MediaTypeEnum, pm.Width, pm.Height, pm.Size, pm.Duration, pm.Extension, pm.Md5Hash, pm.Color, pm.CreatedTime, pm.ViewCount, pm.Extra)
	}
	_, err = db.Exec(sqlstr, pm.MediaId, pm.UserId, pm.PostId, pm.AlbumId, pm.MediaTypeEnum, pm.Width, pm.Height, pm.Size, pm.Duration, pm.Extension, pm.Md5Hash, pm.Color, pm.CreatedTime, pm.ViewCount, pm.Extra)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return err
	}

	pm._exists = true

	OnPostMedia_AfterInsert(pm)

	return nil
}

// Update updates the PostMedia in the database.
func (pm *PostMedia) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.post_media SET ` +
		`UserId = ?, PostId = ?, AlbumId = ?, MediaTypeEnum = ?, Width = ?, Height = ?, Size = ?, Duration = ?, Extension = ?, Md5Hash = ?, Color = ?, CreatedTime = ?, ViewCount = ?, Extra = ?` +
		` WHERE MediaId = ?`

	// run query
	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, pm.UserId, pm.PostId, pm.AlbumId, pm.MediaTypeEnum, pm.Width, pm.Height, pm.Size, pm.Duration, pm.Extension, pm.Md5Hash, pm.Color, pm.CreatedTime, pm.ViewCount, pm.Extra, pm.MediaId)
	}
	_, err = db.Exec(sqlstr, pm.UserId, pm.PostId, pm.AlbumId, pm.MediaTypeEnum, pm.Width, pm.Height, pm.Size, pm.Duration, pm.Extension, pm.Md5Hash, pm.Color, pm.CreatedTime, pm.ViewCount, pm.Extra, pm.MediaId)

	if LogTableSqlReq.PostMedia {
		XOLogErr(err)
	}
	OnPostMedia_AfterUpdate(pm)

	return err
}

// Save saves the PostMedia to the database.
func (pm *PostMedia) Save(db XODB) error {
	if pm.Exists() {
		return pm.Update(db)
	}

	return pm.Replace(db)
}

// Delete deletes the PostMedia from the database.
func (pm *PostMedia) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pm._exists {
		return nil
	}

	// if deleted, bail
	if pm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.post_media WHERE MediaId = ?`

	// run query
	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, pm.MediaId)
	}
	_, err = db.Exec(sqlstr, pm.MediaId)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	pm._deleted = true

	OnPostMedia_AfterDelete(pm)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __PostMedia_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __PostMedia_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __PostMedia_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewPostMedia_Deleter() *__PostMedia_Deleter {
	d := __PostMedia_Deleter{whereSep: " AND "}
	return &d
}

func NewPostMedia_Updater() *__PostMedia_Updater {
	u := __PostMedia_Updater{whereSep: " AND "}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewPostMedia_Selector() *__PostMedia_Selector {
	u := __PostMedia_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__PostMedia_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__PostMedia_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__PostMedia_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PostMedia_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PostMedia_Deleter) Or() *__PostMedia_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PostMedia_Deleter) MediaId_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) MediaId_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) MediaId_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) MediaId_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaId_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaId_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaId_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaId_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaId_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) UserId_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) UserId_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) UserId_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) UserId_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) UserId_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) UserId_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) UserId_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) UserId_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) UserId_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) PostId_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) PostId_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) PostId_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) PostId_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) PostId_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) PostId_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) PostId_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) PostId_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) PostId_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) AlbumId_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) AlbumId_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) AlbumId_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) AlbumId_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) AlbumId_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) AlbumId_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) AlbumId_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) AlbumId_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) AlbumId_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) MediaTypeEnum_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) MediaTypeEnum_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) MediaTypeEnum_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaTypeEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) MediaTypeEnum_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaTypeEnum_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaTypeEnum_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaTypeEnum_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaTypeEnum_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) MediaTypeEnum_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) Width_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Width_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Width_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) Width_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Width_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Width_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Width_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Width_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Width_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) Height_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Height_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Height_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) Height_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Height_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Height_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Height_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Height_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Height_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) Size_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Size_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Size_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) Size_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Size_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Size_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Size_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Size_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Size_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) Duration_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Duration_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Duration_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) Duration_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Duration_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Duration_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Duration_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Duration_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Duration_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) CreatedTime_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) CreatedTime_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) CreatedTime_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) CreatedTime_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) CreatedTime_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) CreatedTime_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) CreatedTime_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) CreatedTime_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) CreatedTime_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) ViewCount_In(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) ViewCount_Ins(ins ...int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) ViewCount_NotIn(ins []int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) ViewCount_Eq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) ViewCount_NotEq(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) ViewCount_LT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) ViewCount_LE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) ViewCount_GT(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) ViewCount_GE(val int) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__PostMedia_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PostMedia_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PostMedia_Updater) Or() *__PostMedia_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PostMedia_Updater) MediaId_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) MediaId_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) MediaId_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) MediaId_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaId_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaId_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaId_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaId_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaId_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) UserId_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) UserId_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) UserId_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) UserId_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) UserId_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) UserId_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) UserId_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) UserId_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) UserId_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) PostId_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) PostId_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) PostId_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) PostId_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) PostId_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) PostId_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) PostId_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) PostId_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) PostId_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) AlbumId_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) AlbumId_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) AlbumId_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) AlbumId_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) AlbumId_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) AlbumId_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) AlbumId_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) AlbumId_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) AlbumId_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) MediaTypeEnum_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) MediaTypeEnum_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) MediaTypeEnum_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaTypeEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) MediaTypeEnum_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaTypeEnum_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaTypeEnum_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaTypeEnum_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaTypeEnum_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) MediaTypeEnum_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) Width_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Width_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Width_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) Width_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Width_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Width_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Width_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Width_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Width_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) Height_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Height_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Height_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) Height_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Height_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Height_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Height_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Height_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Height_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) Size_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Size_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Size_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) Size_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Size_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Size_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Size_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Size_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Size_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) Duration_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Duration_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Duration_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) Duration_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Duration_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Duration_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Duration_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Duration_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Duration_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) CreatedTime_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) CreatedTime_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) CreatedTime_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) CreatedTime_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) CreatedTime_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) CreatedTime_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) CreatedTime_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) CreatedTime_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) CreatedTime_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) ViewCount_In(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) ViewCount_Ins(ins ...int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) ViewCount_NotIn(ins []int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) ViewCount_Eq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) ViewCount_NotEq(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) ViewCount_LT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) ViewCount_LE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) ViewCount_GT(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) ViewCount_GE(val int) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__PostMedia_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PostMedia_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PostMedia_Selector) Or() *__PostMedia_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PostMedia_Selector) MediaId_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) MediaId_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) MediaId_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) MediaId_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaId_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaId_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaId_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaId_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaId_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) UserId_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) UserId_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) UserId_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) UserId_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) UserId_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) UserId_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) UserId_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) UserId_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) UserId_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) PostId_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) PostId_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) PostId_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) PostId_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) PostId_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) PostId_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) PostId_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) PostId_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) PostId_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) AlbumId_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) AlbumId_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) AlbumId_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) AlbumId_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) AlbumId_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) AlbumId_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) AlbumId_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) AlbumId_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) AlbumId_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) MediaTypeEnum_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) MediaTypeEnum_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaTypeEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) MediaTypeEnum_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaTypeEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) MediaTypeEnum_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaTypeEnum_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaTypeEnum_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaTypeEnum_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaTypeEnum_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) MediaTypeEnum_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaTypeEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) Width_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Width_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Width_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) Width_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Width_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Width_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Width_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Width_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Width_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) Height_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Height_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Height_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) Height_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Height_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Height_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Height_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Height_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Height_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) Size_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Size_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Size_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Size NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) Size_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Size_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Size_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Size_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Size_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Size_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Size >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) Duration_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Duration_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Duration_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Duration NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) Duration_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Duration_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Duration_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Duration_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Duration_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Duration_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Duration >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) CreatedTime_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) CreatedTime_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) CreatedTime_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) CreatedTime_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) CreatedTime_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) CreatedTime_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) CreatedTime_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) CreatedTime_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) CreatedTime_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) ViewCount_In(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) ViewCount_Ins(ins ...int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) ViewCount_NotIn(ins []int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) ViewCount_Eq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) ViewCount_NotEq(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) ViewCount_LT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) ViewCount_LE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) ViewCount_GT(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) ViewCount_GE(val int) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__PostMedia_Deleter) Extension_In(ins []string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Extension_NotIn(ins []string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Deleter) Extension_Like(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) Extension_Eq(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Extension_NotEq(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) Md5Hash_In(ins []string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Md5Hash_NotIn(ins []string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Deleter) Md5Hash_Like(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) Md5Hash_Eq(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Md5Hash_NotEq(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) Color_In(ins []string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Color IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Color_NotIn(ins []string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Color NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Deleter) Color_Like(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Color LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) Color_Eq(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Color = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Color_NotEq(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Color != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Deleter) Extra_In(ins []string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extra IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Deleter) Extra_NotIn(ins []string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extra NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Deleter) Extra_Like(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extra LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Deleter) Extra_Eq(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extra = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Deleter) Extra_NotEq(val string) *__PostMedia_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extra != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PostMedia_Updater) Extension_In(ins []string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Extension_NotIn(ins []string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Updater) Extension_Like(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) Extension_Eq(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Extension_NotEq(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) Md5Hash_In(ins []string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Md5Hash_NotIn(ins []string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Updater) Md5Hash_Like(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) Md5Hash_Eq(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Md5Hash_NotEq(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) Color_In(ins []string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Color IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Color_NotIn(ins []string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Color NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Updater) Color_Like(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Color LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) Color_Eq(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Color = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Color_NotEq(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Color != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Updater) Extra_In(ins []string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extra IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Updater) Extra_NotIn(ins []string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extra NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Updater) Extra_Like(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extra LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Updater) Extra_Eq(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extra = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Updater) Extra_NotEq(val string) *__PostMedia_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extra != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PostMedia_Selector) Extension_In(ins []string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Extension_NotIn(ins []string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Selector) Extension_Like(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) Extension_Eq(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Extension_NotEq(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) Md5Hash_In(ins []string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Md5Hash_NotIn(ins []string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Md5Hash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Selector) Md5Hash_Like(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) Md5Hash_Eq(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Md5Hash_NotEq(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Md5Hash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) Color_In(ins []string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Color IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Color_NotIn(ins []string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Color NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Selector) Color_Like(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Color LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) Color_Eq(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Color = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Color_NotEq(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Color != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostMedia_Selector) Extra_In(ins []string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extra IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostMedia_Selector) Extra_NotIn(ins []string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extra NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostMedia_Selector) Extra_Like(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extra LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostMedia_Selector) Extra_Eq(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extra = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostMedia_Selector) Extra_NotEq(val string) *__PostMedia_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extra != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PostMedia_Updater) MediaId(newVal int) *__PostMedia_Updater {
	up := updateCol{" MediaId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MediaId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) MediaId_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" MediaId = MediaId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MediaId = MediaId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MediaId = MediaId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MediaId = MediaId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostMedia_Updater) UserId(newVal int) *__PostMedia_Updater {
	up := updateCol{" UserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) UserId_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" UserId = UserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UserId = UserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UserId = UserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UserId = UserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostMedia_Updater) PostId(newVal int) *__PostMedia_Updater {
	up := updateCol{" PostId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PostId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) PostId_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" PostId = PostId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PostId = PostId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PostId = PostId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PostId = PostId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostMedia_Updater) AlbumId(newVal int) *__PostMedia_Updater {
	up := updateCol{" AlbumId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" AlbumId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) AlbumId_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" AlbumId = AlbumId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" AlbumId = AlbumId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" AlbumId = AlbumId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" AlbumId = AlbumId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostMedia_Updater) MediaTypeEnum(newVal int) *__PostMedia_Updater {
	up := updateCol{" MediaTypeEnum = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MediaTypeEnum = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) MediaTypeEnum_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" MediaTypeEnum = MediaTypeEnum+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MediaTypeEnum = MediaTypeEnum+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MediaTypeEnum = MediaTypeEnum- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MediaTypeEnum = MediaTypeEnum- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostMedia_Updater) Width(newVal int) *__PostMedia_Updater {
	up := updateCol{" Width = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Width = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) Width_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" Width = Width+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Width = Width+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Width = Width- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Width = Width- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostMedia_Updater) Height(newVal int) *__PostMedia_Updater {
	up := updateCol{" Height = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Height = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) Height_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" Height = Height+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Height = Height+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Height = Height- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Height = Height- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostMedia_Updater) Size(newVal int) *__PostMedia_Updater {
	up := updateCol{" Size = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Size = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) Size_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" Size = Size+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Size = Size+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Size = Size- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Size = Size- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostMedia_Updater) Duration(newVal int) *__PostMedia_Updater {
	up := updateCol{" Duration = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Duration = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) Duration_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" Duration = Duration+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Duration = Duration+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Duration = Duration- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Duration = Duration- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__PostMedia_Updater) Extension(newVal string) *__PostMedia_Updater {
	up := updateCol{"Extension = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Extension = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__PostMedia_Updater) Md5Hash(newVal string) *__PostMedia_Updater {
	up := updateCol{"Md5Hash = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Md5Hash = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__PostMedia_Updater) Color(newVal string) *__PostMedia_Updater {
	up := updateCol{"Color = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Color = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__PostMedia_Updater) CreatedTime(newVal int) *__PostMedia_Updater {
	up := updateCol{" CreatedTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatedTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) CreatedTime_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" CreatedTime = CreatedTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatedTime = CreatedTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatedTime = CreatedTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatedTime = CreatedTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostMedia_Updater) ViewCount(newVal int) *__PostMedia_Updater {
	up := updateCol{" ViewCount = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ViewCount = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostMedia_Updater) ViewCount_Increment(count int) *__PostMedia_Updater {
	if count > 0 {
		up := updateCol{" ViewCount = ViewCount+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ViewCount = ViewCount+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ViewCount = ViewCount- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ViewCount = ViewCount- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__PostMedia_Updater) Extra(newVal string) *__PostMedia_Updater {
	up := updateCol{"Extra = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Extra = "+ u.nextDollar()] = newVal
	return u
}

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PostMedia_Selector) OrderBy_MediaId_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY MediaId DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_MediaId_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY MediaId ASC "
	return u
}

func (u *__PostMedia_Selector) Select_MediaId() *__PostMedia_Selector {
	u.selectCol = "MediaId"
	return u
}

func (u *__PostMedia_Selector) OrderBy_UserId_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_UserId_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__PostMedia_Selector) Select_UserId() *__PostMedia_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__PostMedia_Selector) OrderBy_PostId_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_PostId_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__PostMedia_Selector) Select_PostId() *__PostMedia_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__PostMedia_Selector) OrderBy_AlbumId_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY AlbumId DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_AlbumId_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY AlbumId ASC "
	return u
}

func (u *__PostMedia_Selector) Select_AlbumId() *__PostMedia_Selector {
	u.selectCol = "AlbumId"
	return u
}

func (u *__PostMedia_Selector) OrderBy_MediaTypeEnum_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY MediaTypeEnum DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_MediaTypeEnum_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY MediaTypeEnum ASC "
	return u
}

func (u *__PostMedia_Selector) Select_MediaTypeEnum() *__PostMedia_Selector {
	u.selectCol = "MediaTypeEnum"
	return u
}

func (u *__PostMedia_Selector) OrderBy_Width_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Width DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_Width_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Width ASC "
	return u
}

func (u *__PostMedia_Selector) Select_Width() *__PostMedia_Selector {
	u.selectCol = "Width"
	return u
}

func (u *__PostMedia_Selector) OrderBy_Height_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Height DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_Height_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Height ASC "
	return u
}

func (u *__PostMedia_Selector) Select_Height() *__PostMedia_Selector {
	u.selectCol = "Height"
	return u
}

func (u *__PostMedia_Selector) OrderBy_Size_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Size DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_Size_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Size ASC "
	return u
}

func (u *__PostMedia_Selector) Select_Size() *__PostMedia_Selector {
	u.selectCol = "Size"
	return u
}

func (u *__PostMedia_Selector) OrderBy_Duration_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Duration DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_Duration_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Duration ASC "
	return u
}

func (u *__PostMedia_Selector) Select_Duration() *__PostMedia_Selector {
	u.selectCol = "Duration"
	return u
}

func (u *__PostMedia_Selector) OrderBy_Extension_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Extension DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_Extension_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Extension ASC "
	return u
}

func (u *__PostMedia_Selector) Select_Extension() *__PostMedia_Selector {
	u.selectCol = "Extension"
	return u
}

func (u *__PostMedia_Selector) OrderBy_Md5Hash_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Md5Hash DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_Md5Hash_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Md5Hash ASC "
	return u
}

func (u *__PostMedia_Selector) Select_Md5Hash() *__PostMedia_Selector {
	u.selectCol = "Md5Hash"
	return u
}

func (u *__PostMedia_Selector) OrderBy_Color_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Color DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_Color_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Color ASC "
	return u
}

func (u *__PostMedia_Selector) Select_Color() *__PostMedia_Selector {
	u.selectCol = "Color"
	return u
}

func (u *__PostMedia_Selector) OrderBy_CreatedTime_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_CreatedTime_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__PostMedia_Selector) Select_CreatedTime() *__PostMedia_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__PostMedia_Selector) OrderBy_ViewCount_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY ViewCount DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_ViewCount_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY ViewCount ASC "
	return u
}

func (u *__PostMedia_Selector) Select_ViewCount() *__PostMedia_Selector {
	u.selectCol = "ViewCount"
	return u
}

func (u *__PostMedia_Selector) OrderBy_Extra_Desc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Extra DESC "
	return u
}

func (u *__PostMedia_Selector) OrderBy_Extra_Asc() *__PostMedia_Selector {
	u.orderBy = " ORDER BY Extra ASC "
	return u
}

func (u *__PostMedia_Selector) Select_Extra() *__PostMedia_Selector {
	u.selectCol = "Extra"
	return u
}

func (u *__PostMedia_Selector) Limit(num int) *__PostMedia_Selector {
	u.limit = num
	return u
}

func (u *__PostMedia_Selector) Offset(num int) *__PostMedia_Selector {
	u.offset = num
	return u
}

func (u *__PostMedia_Selector) Order_Rand() *__PostMedia_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PostMedia_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.post_media"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PostMedia_Selector) GetRow(db *sqlx.DB) (*PostMedia, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, whereArgs)
	}

	row := &PostMedia{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnPostMedia_LoadOne(row)

	return row, nil
}

func (u *__PostMedia_Selector) GetRows(db *sqlx.DB) ([]*PostMedia, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*PostMedia
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPostMedia_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__PostMedia_Selector) GetRows2(db *sqlx.DB) ([]PostMedia, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*PostMedia
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPostMedia_LoadMany(rows)

	rows2 := make([]PostMedia, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__PostMedia_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__PostMedia_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PostMedia_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PostMedia_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PostMedia_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.post_media SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__PostMedia_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.post_media WHERE " + wheresStr

	// run query
	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PostMedia ////////////////

func MassInsert_PostMedia(rows []PostMedia, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(15, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun.post_media (" +
		"MediaId, UserId, PostId, AlbumId, MediaTypeEnum, Width, Height, Size, Duration, Extension, Md5Hash, Color, CreatedTime, ViewCount, Extra" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MediaId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.AlbumId)
		vals = append(vals, row.MediaTypeEnum)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Size)
		vals = append(vals, row.Duration)
		vals = append(vals, row.Extension)
		vals = append(vals, row.Md5Hash)
		vals = append(vals, row.Color)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.ViewCount)
		vals = append(vals, row.Extra)

	}

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_PostMedia(rows []PostMedia, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(15, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun.post_media (" +
		"MediaId, UserId, PostId, AlbumId, MediaTypeEnum, Width, Height, Size, Duration, Extension, Md5Hash, Color, CreatedTime, ViewCount, Extra" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.MediaId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.AlbumId)
		vals = append(vals, row.MediaTypeEnum)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Size)
		vals = append(vals, row.Duration)
		vals = append(vals, row.Extension)
		vals = append(vals, row.Md5Hash)
		vals = append(vals, row.Color)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.ViewCount)
		vals = append(vals, row.Extra)

	}

	if LogTableSqlReq.PostMedia {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PostMedia {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
