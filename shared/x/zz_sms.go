package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Sms represents a row from 'sun.sms'.

// Manualy copy this to project
type Sms__ struct {
	Id              int    `json:"Id"`              // Id -
	Hash            string `json:"Hash"`            // Hash -
	AppUuid         string `json:"AppUuid"`         // AppUuid -
	ClientPhone     string `json:"ClientPhone"`     // ClientPhone -
	GenratedCode    int    `json:"GenratedCode"`    // GenratedCode -
	SmsSenderNumber string `json:"SmsSenderNumber"` // SmsSenderNumber -
	SmsSendStatues  string `json:"SmsSendStatues"`  // SmsSendStatues -
	SmsHttpBody     string `json:"SmsHttpBody"`     // SmsHttpBody -
	Err             string `json:"Err"`             // Err -
	Carrier         string `json:"Carrier"`         // Carrier -
	Country         []byte `json:"Country"`         // Country -
	IsValidPhone    int    `json:"IsValidPhone"`    // IsValidPhone -
	IsConfirmed     int    `json:"IsConfirmed"`     // IsConfirmed -
	IsLogin         int    `json:"IsLogin"`         // IsLogin -
	IsRegister      int    `json:"IsRegister"`      // IsRegister -
	RetriedCount    int    `json:"RetriedCount"`    // RetriedCount -
	TTL             int    `json:"TTL"`             // TTL -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Sms exists in the database.
func (s *Sms) Exists() bool {
	return s._exists
}

// Deleted provides information if the Sms has been deleted from the database.
func (s *Sms) Deleted() bool {
	return s._deleted
}

// Insert inserts the Sms to the database.
func (s *Sms) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO sun.sms (` +
		`Hash, AppUuid, ClientPhone, GenratedCode, SmsSenderNumber, SmsSendStatues, SmsHttpBody, Err, Carrier, Country, IsValidPhone, IsConfirmed, IsLogin, IsRegister, RetriedCount, TTL` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Sms {
		XOLog(sqlstr, s.Hash, s.AppUuid, s.ClientPhone, s.GenratedCode, s.SmsSenderNumber, s.SmsSendStatues, s.SmsHttpBody, s.Err, s.Carrier, s.Country, s.IsValidPhone, s.IsConfirmed, s.IsLogin, s.IsRegister, s.RetriedCount, s.TTL)
	}
	res, err := db.Exec(sqlstr, s.Hash, s.AppUuid, s.ClientPhone, s.GenratedCode, s.SmsSenderNumber, s.SmsSendStatues, s.SmsHttpBody, s.Err, s.Carrier, s.Country, s.IsValidPhone, s.IsConfirmed, s.IsLogin, s.IsRegister, s.RetriedCount, s.TTL)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	s.Id = int(id)
	s._exists = true

	OnSms_AfterInsert(s)

	return nil
}

// Insert inserts the Sms to the database.
func (s *Sms) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.sms (` +
		`Hash, AppUuid, ClientPhone, GenratedCode, SmsSenderNumber, SmsSendStatues, SmsHttpBody, Err, Carrier, Country, IsValidPhone, IsConfirmed, IsLogin, IsRegister, RetriedCount, TTL` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Sms {
		XOLog(sqlstr, s.Hash, s.AppUuid, s.ClientPhone, s.GenratedCode, s.SmsSenderNumber, s.SmsSendStatues, s.SmsHttpBody, s.Err, s.Carrier, s.Country, s.IsValidPhone, s.IsConfirmed, s.IsLogin, s.IsRegister, s.RetriedCount, s.TTL)
	}
	res, err := db.Exec(sqlstr, s.Hash, s.AppUuid, s.ClientPhone, s.GenratedCode, s.SmsSenderNumber, s.SmsSendStatues, s.SmsHttpBody, s.Err, s.Carrier, s.Country, s.IsValidPhone, s.IsConfirmed, s.IsLogin, s.IsRegister, s.RetriedCount, s.TTL)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	s.Id = int(id)
	s._exists = true

	OnSms_AfterInsert(s)

	return nil
}

// Update updates the Sms in the database.
func (s *Sms) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.sms SET ` +
		`Hash = ?, AppUuid = ?, ClientPhone = ?, GenratedCode = ?, SmsSenderNumber = ?, SmsSendStatues = ?, SmsHttpBody = ?, Err = ?, Carrier = ?, Country = ?, IsValidPhone = ?, IsConfirmed = ?, IsLogin = ?, IsRegister = ?, RetriedCount = ?, TTL = ?` +
		` WHERE Id = ?`

	// run query
	if LogTableSqlReq.Sms {
		XOLog(sqlstr, s.Hash, s.AppUuid, s.ClientPhone, s.GenratedCode, s.SmsSenderNumber, s.SmsSendStatues, s.SmsHttpBody, s.Err, s.Carrier, s.Country, s.IsValidPhone, s.IsConfirmed, s.IsLogin, s.IsRegister, s.RetriedCount, s.TTL, s.Id)
	}
	_, err = db.Exec(sqlstr, s.Hash, s.AppUuid, s.ClientPhone, s.GenratedCode, s.SmsSenderNumber, s.SmsSendStatues, s.SmsHttpBody, s.Err, s.Carrier, s.Country, s.IsValidPhone, s.IsConfirmed, s.IsLogin, s.IsRegister, s.RetriedCount, s.TTL, s.Id)

	if LogTableSqlReq.Sms {
		XOLogErr(err)
	}
	OnSms_AfterUpdate(s)

	return err
}

// Save saves the Sms to the database.
func (s *Sms) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Replace(db)
}

// Delete deletes the Sms from the database.
func (s *Sms) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.sms WHERE Id = ?`

	// run query
	if LogTableSqlReq.Sms {
		XOLog(sqlstr, s.Id)
	}
	_, err = db.Exec(sqlstr, s.Id)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	s._deleted = true

	OnSms_AfterDelete(s)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Sms_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Sms_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Sms_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewSms_Deleter() *__Sms_Deleter {
	d := __Sms_Deleter{whereSep: " AND ", isMysql: true}
	return &d
}

func NewSms_Updater() *__Sms_Updater {
	u := __Sms_Updater{whereSep: " AND ", isMysql: true}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewSms_Selector() *__Sms_Selector {
	u := __Sms_Selector{whereSep: " AND ", selectCol: "*", isMysql: true}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__Sms_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__Sms_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__Sms_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Sms_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Sms_Deleter) Or() *__Sms_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Sms_Deleter) Id_In(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) Id_Ins(ins ...int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) Id_NotIn(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) Id_Eq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) Id_NotEq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) Id_LT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) Id_LE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) Id_GT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) Id_GE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) GenratedCode_In(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GenratedCode IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) GenratedCode_Ins(ins ...int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GenratedCode IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) GenratedCode_NotIn(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GenratedCode NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) GenratedCode_Eq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) GenratedCode_NotEq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) GenratedCode_LT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) GenratedCode_LE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) GenratedCode_GT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) GenratedCode_GE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) IsValidPhone_In(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsValidPhone IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) IsValidPhone_Ins(ins ...int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsValidPhone IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) IsValidPhone_NotIn(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsValidPhone NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) IsValidPhone_Eq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsValidPhone_NotEq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsValidPhone_LT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsValidPhone_LE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsValidPhone_GT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsValidPhone_GE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) IsConfirmed_In(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsConfirmed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) IsConfirmed_Ins(ins ...int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsConfirmed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) IsConfirmed_NotIn(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsConfirmed NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) IsConfirmed_Eq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsConfirmed_NotEq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsConfirmed_LT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsConfirmed_LE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsConfirmed_GT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsConfirmed_GE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) IsLogin_In(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLogin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) IsLogin_Ins(ins ...int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLogin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) IsLogin_NotIn(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLogin NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) IsLogin_Eq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsLogin_NotEq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsLogin_LT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsLogin_LE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsLogin_GT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsLogin_GE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) IsRegister_In(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsRegister IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) IsRegister_Ins(ins ...int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsRegister IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) IsRegister_NotIn(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsRegister NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) IsRegister_Eq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsRegister_NotEq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsRegister_LT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsRegister_LE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsRegister_GT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) IsRegister_GE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) RetriedCount_In(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RetriedCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) RetriedCount_Ins(ins ...int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RetriedCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) RetriedCount_NotIn(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RetriedCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) RetriedCount_Eq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) RetriedCount_NotEq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) RetriedCount_LT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) RetriedCount_LE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) RetriedCount_GT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) RetriedCount_GE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) TTL_In(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TTL IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) TTL_Ins(ins ...int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TTL IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) TTL_NotIn(ins []int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TTL NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) TTL_Eq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) TTL_NotEq(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) TTL_LT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) TTL_LE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) TTL_GT(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) TTL_GE(val int) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Sms_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Sms_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Sms_Updater) Or() *__Sms_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Sms_Updater) Id_In(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) Id_Ins(ins ...int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) Id_NotIn(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) Id_Eq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) Id_NotEq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) Id_LT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) Id_LE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) Id_GT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) Id_GE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) GenratedCode_In(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GenratedCode IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) GenratedCode_Ins(ins ...int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GenratedCode IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) GenratedCode_NotIn(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GenratedCode NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) GenratedCode_Eq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) GenratedCode_NotEq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) GenratedCode_LT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) GenratedCode_LE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) GenratedCode_GT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) GenratedCode_GE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) IsValidPhone_In(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsValidPhone IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) IsValidPhone_Ins(ins ...int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsValidPhone IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) IsValidPhone_NotIn(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsValidPhone NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) IsValidPhone_Eq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsValidPhone_NotEq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsValidPhone_LT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsValidPhone_LE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsValidPhone_GT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsValidPhone_GE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) IsConfirmed_In(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsConfirmed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) IsConfirmed_Ins(ins ...int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsConfirmed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) IsConfirmed_NotIn(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsConfirmed NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) IsConfirmed_Eq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsConfirmed_NotEq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsConfirmed_LT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsConfirmed_LE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsConfirmed_GT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsConfirmed_GE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) IsLogin_In(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLogin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) IsLogin_Ins(ins ...int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLogin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) IsLogin_NotIn(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLogin NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) IsLogin_Eq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsLogin_NotEq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsLogin_LT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsLogin_LE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsLogin_GT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsLogin_GE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) IsRegister_In(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsRegister IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) IsRegister_Ins(ins ...int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsRegister IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) IsRegister_NotIn(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsRegister NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) IsRegister_Eq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsRegister_NotEq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsRegister_LT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsRegister_LE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsRegister_GT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) IsRegister_GE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) RetriedCount_In(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RetriedCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) RetriedCount_Ins(ins ...int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RetriedCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) RetriedCount_NotIn(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RetriedCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) RetriedCount_Eq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) RetriedCount_NotEq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) RetriedCount_LT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) RetriedCount_LE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) RetriedCount_GT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) RetriedCount_GE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) TTL_In(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TTL IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) TTL_Ins(ins ...int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TTL IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) TTL_NotIn(ins []int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TTL NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) TTL_Eq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) TTL_NotEq(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) TTL_LT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) TTL_LE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) TTL_GT(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) TTL_GE(val int) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Sms_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Sms_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Sms_Selector) Or() *__Sms_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Sms_Selector) Id_In(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) Id_Ins(ins ...int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) Id_NotIn(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) Id_Eq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) Id_NotEq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) Id_LT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) Id_LE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) Id_GT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) Id_GE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) GenratedCode_In(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GenratedCode IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) GenratedCode_Ins(ins ...int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GenratedCode IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) GenratedCode_NotIn(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GenratedCode NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) GenratedCode_Eq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) GenratedCode_NotEq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) GenratedCode_LT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) GenratedCode_LE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) GenratedCode_GT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) GenratedCode_GE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GenratedCode >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) IsValidPhone_In(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsValidPhone IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) IsValidPhone_Ins(ins ...int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsValidPhone IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) IsValidPhone_NotIn(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsValidPhone NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) IsValidPhone_Eq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsValidPhone_NotEq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsValidPhone_LT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsValidPhone_LE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsValidPhone_GT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsValidPhone_GE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsValidPhone >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) IsConfirmed_In(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsConfirmed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) IsConfirmed_Ins(ins ...int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsConfirmed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) IsConfirmed_NotIn(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsConfirmed NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) IsConfirmed_Eq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsConfirmed_NotEq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsConfirmed_LT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsConfirmed_LE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsConfirmed_GT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsConfirmed_GE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsConfirmed >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) IsLogin_In(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLogin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) IsLogin_Ins(ins ...int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLogin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) IsLogin_NotIn(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLogin NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) IsLogin_Eq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsLogin_NotEq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsLogin_LT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsLogin_LE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsLogin_GT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsLogin_GE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLogin >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) IsRegister_In(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsRegister IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) IsRegister_Ins(ins ...int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsRegister IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) IsRegister_NotIn(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsRegister NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) IsRegister_Eq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsRegister_NotEq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsRegister_LT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsRegister_LE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsRegister_GT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) IsRegister_GE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsRegister >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) RetriedCount_In(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RetriedCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) RetriedCount_Ins(ins ...int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RetriedCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) RetriedCount_NotIn(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RetriedCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) RetriedCount_Eq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) RetriedCount_NotEq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) RetriedCount_LT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) RetriedCount_LE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) RetriedCount_GT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) RetriedCount_GE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RetriedCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) TTL_In(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TTL IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) TTL_Ins(ins ...int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TTL IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) TTL_NotIn(ins []int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TTL NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) TTL_Eq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) TTL_NotEq(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) TTL_LT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) TTL_LE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) TTL_GT(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) TTL_GE(val int) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TTL >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Sms_Deleter) Hash_In(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) Hash_NotIn(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Hash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Deleter) Hash_Like(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Hash LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) Hash_Eq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Hash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) Hash_NotEq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Hash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) AppUuid_In(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppUuid IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) AppUuid_NotIn(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppUuid NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Deleter) AppUuid_Like(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppUuid LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) AppUuid_Eq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppUuid = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) AppUuid_NotEq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppUuid != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) ClientPhone_In(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientPhone IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) ClientPhone_NotIn(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientPhone NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Deleter) ClientPhone_Like(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientPhone LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) ClientPhone_Eq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientPhone = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) ClientPhone_NotEq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientPhone != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) SmsSenderNumber_In(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSenderNumber IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) SmsSenderNumber_NotIn(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSenderNumber NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Deleter) SmsSenderNumber_Like(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSenderNumber LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) SmsSenderNumber_Eq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSenderNumber = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) SmsSenderNumber_NotEq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSenderNumber != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) SmsSendStatues_In(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSendStatues IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) SmsSendStatues_NotIn(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSendStatues NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Deleter) SmsSendStatues_Like(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSendStatues LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) SmsSendStatues_Eq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSendStatues = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) SmsSendStatues_NotEq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSendStatues != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) SmsHttpBody_In(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsHttpBody IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) SmsHttpBody_NotIn(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsHttpBody NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Deleter) SmsHttpBody_Like(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsHttpBody LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) SmsHttpBody_Eq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsHttpBody = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) SmsHttpBody_NotEq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsHttpBody != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) Err_In(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Err IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) Err_NotIn(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Err NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Deleter) Err_Like(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Err LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) Err_Eq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Err = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) Err_NotEq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Err != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Deleter) Carrier_In(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Carrier IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Deleter) Carrier_NotIn(ins []string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Carrier NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Deleter) Carrier_Like(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Carrier LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Deleter) Carrier_Eq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Carrier = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Deleter) Carrier_NotEq(val string) *__Sms_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Carrier != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Sms_Updater) Hash_In(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) Hash_NotIn(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Hash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Updater) Hash_Like(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Hash LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) Hash_Eq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Hash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) Hash_NotEq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Hash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) AppUuid_In(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppUuid IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) AppUuid_NotIn(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppUuid NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Updater) AppUuid_Like(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppUuid LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) AppUuid_Eq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppUuid = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) AppUuid_NotEq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppUuid != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) ClientPhone_In(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientPhone IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) ClientPhone_NotIn(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientPhone NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Updater) ClientPhone_Like(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientPhone LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) ClientPhone_Eq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientPhone = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) ClientPhone_NotEq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientPhone != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) SmsSenderNumber_In(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSenderNumber IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) SmsSenderNumber_NotIn(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSenderNumber NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Updater) SmsSenderNumber_Like(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSenderNumber LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) SmsSenderNumber_Eq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSenderNumber = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) SmsSenderNumber_NotEq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSenderNumber != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) SmsSendStatues_In(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSendStatues IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) SmsSendStatues_NotIn(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSendStatues NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Updater) SmsSendStatues_Like(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSendStatues LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) SmsSendStatues_Eq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSendStatues = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) SmsSendStatues_NotEq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSendStatues != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) SmsHttpBody_In(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsHttpBody IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) SmsHttpBody_NotIn(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsHttpBody NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Updater) SmsHttpBody_Like(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsHttpBody LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) SmsHttpBody_Eq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsHttpBody = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) SmsHttpBody_NotEq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsHttpBody != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) Err_In(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Err IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) Err_NotIn(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Err NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Updater) Err_Like(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Err LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) Err_Eq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Err = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) Err_NotEq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Err != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Updater) Carrier_In(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Carrier IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Updater) Carrier_NotIn(ins []string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Carrier NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Updater) Carrier_Like(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Carrier LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Updater) Carrier_Eq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Carrier = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Updater) Carrier_NotEq(val string) *__Sms_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Carrier != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Sms_Selector) Hash_In(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) Hash_NotIn(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Hash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Selector) Hash_Like(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Hash LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) Hash_Eq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Hash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) Hash_NotEq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Hash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) AppUuid_In(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppUuid IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) AppUuid_NotIn(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AppUuid NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Selector) AppUuid_Like(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppUuid LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) AppUuid_Eq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppUuid = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) AppUuid_NotEq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AppUuid != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) ClientPhone_In(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientPhone IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) ClientPhone_NotIn(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientPhone NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Selector) ClientPhone_Like(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientPhone LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) ClientPhone_Eq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientPhone = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) ClientPhone_NotEq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientPhone != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) SmsSenderNumber_In(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSenderNumber IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) SmsSenderNumber_NotIn(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSenderNumber NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Selector) SmsSenderNumber_Like(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSenderNumber LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) SmsSenderNumber_Eq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSenderNumber = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) SmsSenderNumber_NotEq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSenderNumber != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) SmsSendStatues_In(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSendStatues IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) SmsSendStatues_NotIn(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsSendStatues NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Selector) SmsSendStatues_Like(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSendStatues LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) SmsSendStatues_Eq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSendStatues = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) SmsSendStatues_NotEq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsSendStatues != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) SmsHttpBody_In(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsHttpBody IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) SmsHttpBody_NotIn(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SmsHttpBody NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Selector) SmsHttpBody_Like(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsHttpBody LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) SmsHttpBody_Eq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsHttpBody = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) SmsHttpBody_NotEq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SmsHttpBody != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) Err_In(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Err IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) Err_NotIn(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Err NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Selector) Err_Like(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Err LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) Err_Eq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Err = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) Err_NotEq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Err != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Sms_Selector) Carrier_In(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Carrier IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Sms_Selector) Carrier_NotIn(ins []string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Carrier NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Sms_Selector) Carrier_Like(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Carrier LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Sms_Selector) Carrier_Eq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Carrier = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Sms_Selector) Carrier_NotEq(val string) *__Sms_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Carrier != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Sms_Updater) Id(newVal int) *__Sms_Updater {
	up := updateCol{" Id = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Id = " + u.nextDollar()] = newVal
	return u
}

func (u *__Sms_Updater) Id_Increment(count int) *__Sms_Updater {
	if count > 0 {
		up := updateCol{" Id = Id+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Id = Id+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Id = Id- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Id = Id- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Sms_Updater) Hash(newVal string) *__Sms_Updater {
	up := updateCol{"Hash = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Hash = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Sms_Updater) AppUuid(newVal string) *__Sms_Updater {
	up := updateCol{"AppUuid = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" AppUuid = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Sms_Updater) ClientPhone(newVal string) *__Sms_Updater {
	up := updateCol{"ClientPhone = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ClientPhone = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Sms_Updater) GenratedCode(newVal int) *__Sms_Updater {
	up := updateCol{" GenratedCode = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" GenratedCode = " + u.nextDollar()] = newVal
	return u
}

func (u *__Sms_Updater) GenratedCode_Increment(count int) *__Sms_Updater {
	if count > 0 {
		up := updateCol{" GenratedCode = GenratedCode+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" GenratedCode = GenratedCode+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" GenratedCode = GenratedCode- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" GenratedCode = GenratedCode- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Sms_Updater) SmsSenderNumber(newVal string) *__Sms_Updater {
	up := updateCol{"SmsSenderNumber = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" SmsSenderNumber = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Sms_Updater) SmsSendStatues(newVal string) *__Sms_Updater {
	up := updateCol{"SmsSendStatues = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" SmsSendStatues = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Sms_Updater) SmsHttpBody(newVal string) *__Sms_Updater {
	up := updateCol{"SmsHttpBody = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" SmsHttpBody = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Sms_Updater) Err(newVal string) *__Sms_Updater {
	up := updateCol{"Err = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Err = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Sms_Updater) Carrier(newVal string) *__Sms_Updater {
	up := updateCol{"Carrier = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Carrier = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string

//ints

func (u *__Sms_Updater) IsValidPhone(newVal int) *__Sms_Updater {
	up := updateCol{" IsValidPhone = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsValidPhone = " + u.nextDollar()] = newVal
	return u
}

func (u *__Sms_Updater) IsValidPhone_Increment(count int) *__Sms_Updater {
	if count > 0 {
		up := updateCol{" IsValidPhone = IsValidPhone+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsValidPhone = IsValidPhone+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsValidPhone = IsValidPhone- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsValidPhone = IsValidPhone- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Sms_Updater) IsConfirmed(newVal int) *__Sms_Updater {
	up := updateCol{" IsConfirmed = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsConfirmed = " + u.nextDollar()] = newVal
	return u
}

func (u *__Sms_Updater) IsConfirmed_Increment(count int) *__Sms_Updater {
	if count > 0 {
		up := updateCol{" IsConfirmed = IsConfirmed+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsConfirmed = IsConfirmed+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsConfirmed = IsConfirmed- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsConfirmed = IsConfirmed- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Sms_Updater) IsLogin(newVal int) *__Sms_Updater {
	up := updateCol{" IsLogin = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsLogin = " + u.nextDollar()] = newVal
	return u
}

func (u *__Sms_Updater) IsLogin_Increment(count int) *__Sms_Updater {
	if count > 0 {
		up := updateCol{" IsLogin = IsLogin+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsLogin = IsLogin+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsLogin = IsLogin- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsLogin = IsLogin- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Sms_Updater) IsRegister(newVal int) *__Sms_Updater {
	up := updateCol{" IsRegister = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsRegister = " + u.nextDollar()] = newVal
	return u
}

func (u *__Sms_Updater) IsRegister_Increment(count int) *__Sms_Updater {
	if count > 0 {
		up := updateCol{" IsRegister = IsRegister+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsRegister = IsRegister+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsRegister = IsRegister- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsRegister = IsRegister- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Sms_Updater) RetriedCount(newVal int) *__Sms_Updater {
	up := updateCol{" RetriedCount = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" RetriedCount = " + u.nextDollar()] = newVal
	return u
}

func (u *__Sms_Updater) RetriedCount_Increment(count int) *__Sms_Updater {
	if count > 0 {
		up := updateCol{" RetriedCount = RetriedCount+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" RetriedCount = RetriedCount+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" RetriedCount = RetriedCount- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" RetriedCount = RetriedCount- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Sms_Updater) TTL(newVal int) *__Sms_Updater {
	up := updateCol{" TTL = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" TTL = " + u.nextDollar()] = newVal
	return u
}

func (u *__Sms_Updater) TTL_Increment(count int) *__Sms_Updater {
	if count > 0 {
		up := updateCol{" TTL = TTL+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" TTL = TTL+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" TTL = TTL- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" TTL = TTL- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Sms_Selector) OrderBy_Id_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_Id_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Sms_Selector) Select_Id() *__Sms_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Sms_Selector) OrderBy_Hash_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY Hash DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_Hash_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY Hash ASC "
	return u
}

func (u *__Sms_Selector) Select_Hash() *__Sms_Selector {
	u.selectCol = "Hash"
	return u
}

func (u *__Sms_Selector) OrderBy_AppUuid_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY AppUuid DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_AppUuid_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY AppUuid ASC "
	return u
}

func (u *__Sms_Selector) Select_AppUuid() *__Sms_Selector {
	u.selectCol = "AppUuid"
	return u
}

func (u *__Sms_Selector) OrderBy_ClientPhone_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY ClientPhone DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_ClientPhone_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY ClientPhone ASC "
	return u
}

func (u *__Sms_Selector) Select_ClientPhone() *__Sms_Selector {
	u.selectCol = "ClientPhone"
	return u
}

func (u *__Sms_Selector) OrderBy_GenratedCode_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY GenratedCode DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_GenratedCode_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY GenratedCode ASC "
	return u
}

func (u *__Sms_Selector) Select_GenratedCode() *__Sms_Selector {
	u.selectCol = "GenratedCode"
	return u
}

func (u *__Sms_Selector) OrderBy_SmsSenderNumber_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY SmsSenderNumber DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_SmsSenderNumber_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY SmsSenderNumber ASC "
	return u
}

func (u *__Sms_Selector) Select_SmsSenderNumber() *__Sms_Selector {
	u.selectCol = "SmsSenderNumber"
	return u
}

func (u *__Sms_Selector) OrderBy_SmsSendStatues_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY SmsSendStatues DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_SmsSendStatues_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY SmsSendStatues ASC "
	return u
}

func (u *__Sms_Selector) Select_SmsSendStatues() *__Sms_Selector {
	u.selectCol = "SmsSendStatues"
	return u
}

func (u *__Sms_Selector) OrderBy_SmsHttpBody_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY SmsHttpBody DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_SmsHttpBody_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY SmsHttpBody ASC "
	return u
}

func (u *__Sms_Selector) Select_SmsHttpBody() *__Sms_Selector {
	u.selectCol = "SmsHttpBody"
	return u
}

func (u *__Sms_Selector) OrderBy_Err_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY Err DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_Err_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY Err ASC "
	return u
}

func (u *__Sms_Selector) Select_Err() *__Sms_Selector {
	u.selectCol = "Err"
	return u
}

func (u *__Sms_Selector) OrderBy_Carrier_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY Carrier DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_Carrier_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY Carrier ASC "
	return u
}

func (u *__Sms_Selector) Select_Carrier() *__Sms_Selector {
	u.selectCol = "Carrier"
	return u
}

func (u *__Sms_Selector) OrderBy_Country_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY Country DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_Country_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY Country ASC "
	return u
}

func (u *__Sms_Selector) Select_Country() *__Sms_Selector {
	u.selectCol = "Country"
	return u
}

func (u *__Sms_Selector) OrderBy_IsValidPhone_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY IsValidPhone DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_IsValidPhone_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY IsValidPhone ASC "
	return u
}

func (u *__Sms_Selector) Select_IsValidPhone() *__Sms_Selector {
	u.selectCol = "IsValidPhone"
	return u
}

func (u *__Sms_Selector) OrderBy_IsConfirmed_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY IsConfirmed DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_IsConfirmed_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY IsConfirmed ASC "
	return u
}

func (u *__Sms_Selector) Select_IsConfirmed() *__Sms_Selector {
	u.selectCol = "IsConfirmed"
	return u
}

func (u *__Sms_Selector) OrderBy_IsLogin_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY IsLogin DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_IsLogin_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY IsLogin ASC "
	return u
}

func (u *__Sms_Selector) Select_IsLogin() *__Sms_Selector {
	u.selectCol = "IsLogin"
	return u
}

func (u *__Sms_Selector) OrderBy_IsRegister_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY IsRegister DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_IsRegister_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY IsRegister ASC "
	return u
}

func (u *__Sms_Selector) Select_IsRegister() *__Sms_Selector {
	u.selectCol = "IsRegister"
	return u
}

func (u *__Sms_Selector) OrderBy_RetriedCount_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY RetriedCount DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_RetriedCount_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY RetriedCount ASC "
	return u
}

func (u *__Sms_Selector) Select_RetriedCount() *__Sms_Selector {
	u.selectCol = "RetriedCount"
	return u
}

func (u *__Sms_Selector) OrderBy_TTL_Desc() *__Sms_Selector {
	u.orderBy = " ORDER BY TTL DESC "
	return u
}

func (u *__Sms_Selector) OrderBy_TTL_Asc() *__Sms_Selector {
	u.orderBy = " ORDER BY TTL ASC "
	return u
}

func (u *__Sms_Selector) Select_TTL() *__Sms_Selector {
	u.selectCol = "TTL"
	return u
}

func (u *__Sms_Selector) Limit(num int) *__Sms_Selector {
	u.limit = num
	return u
}

func (u *__Sms_Selector) Offset(num int) *__Sms_Selector {
	u.offset = num
	return u
}

func (u *__Sms_Selector) Order_Rand() *__Sms_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Sms_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.sms"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Sms_Selector) GetRow(db *sqlx.DB) (*Sms, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, whereArgs)
	}

	row := &Sms{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnSms_LoadOne(row)

	return row, nil
}

func (u *__Sms_Selector) GetRows(db *sqlx.DB) ([]*Sms, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*Sms
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnSms_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Sms_Selector) GetRows2(db *sqlx.DB) ([]Sms, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*Sms
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnSms_LoadMany(rows)

	rows2 := make([]Sms, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Sms_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__Sms_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Sms_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Sms_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Sms_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.sms SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__Sms_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.sms WHERE " + wheresStr

	// run query
	if LogTableSqlReq.Sms {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Sms ////////////////

func MassInsert_Sms(rows []Sms, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun.sms (" +
		"Hash, AppUuid, ClientPhone, GenratedCode, SmsSenderNumber, SmsSendStatues, SmsHttpBody, Err, Carrier, Country, IsValidPhone, IsConfirmed, IsLogin, IsRegister, RetriedCount, TTL" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Hash)
		vals = append(vals, row.AppUuid)
		vals = append(vals, row.ClientPhone)
		vals = append(vals, row.GenratedCode)
		vals = append(vals, row.SmsSenderNumber)
		vals = append(vals, row.SmsSendStatues)
		vals = append(vals, row.SmsHttpBody)
		vals = append(vals, row.Err)
		vals = append(vals, row.Carrier)
		vals = append(vals, row.Country)
		vals = append(vals, row.IsValidPhone)
		vals = append(vals, row.IsConfirmed)
		vals = append(vals, row.IsLogin)
		vals = append(vals, row.IsRegister)
		vals = append(vals, row.RetriedCount)
		vals = append(vals, row.TTL)

	}

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_Sms(rows []Sms, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun.sms (" +
		"Hash, AppUuid, ClientPhone, GenratedCode, SmsSenderNumber, SmsSendStatues, SmsHttpBody, Err, Carrier, Country, IsValidPhone, IsConfirmed, IsLogin, IsRegister, RetriedCount, TTL" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Hash)
		vals = append(vals, row.AppUuid)
		vals = append(vals, row.ClientPhone)
		vals = append(vals, row.GenratedCode)
		vals = append(vals, row.SmsSenderNumber)
		vals = append(vals, row.SmsSendStatues)
		vals = append(vals, row.SmsHttpBody)
		vals = append(vals, row.Err)
		vals = append(vals, row.Carrier)
		vals = append(vals, row.Country)
		vals = append(vals, row.IsValidPhone)
		vals = append(vals, row.IsConfirmed)
		vals = append(vals, row.IsLogin)
		vals = append(vals, row.IsRegister)
		vals = append(vals, row.RetriedCount)
		vals = append(vals, row.TTL)

	}

	if LogTableSqlReq.Sms {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Sms {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
