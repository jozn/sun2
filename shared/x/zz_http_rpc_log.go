package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// HTTPRPCLog represents a row from 'sun_log.http_rpc_log'.

// Manualy copy this to project
type HTTPRPCLog__ struct {
	Id              int    `json:"Id"`              // Id -
	Time            string `json:"Time"`            // Time -
	MethodFull      string `json:"MethodFull"`      // MethodFull -
	MethodParent    string `json:"MethodParent"`    // MethodParent -
	UserId          int    `json:"UserId"`          // UserId -
	SessionId       string `json:"SessionId"`       // SessionId -
	StatusCode      int    `json:"StatusCode"`      // StatusCode -
	InputSize       int    `json:"InputSize"`       // InputSize -
	OutputSize      int    `json:"OutputSize"`      // OutputSize -
	ReqestJson      string `json:"ReqestJson"`      // ReqestJson -
	ResponseJson    string `json:"ResponseJson"`    // ResponseJson -
	ReqestParamJson string `json:"ReqestParamJson"` // ReqestParamJson -
	ResponseMsgJson string `json:"ResponseMsgJson"` // ResponseMsgJson -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HTTPRPCLog exists in the database.
func (hrl *HTTPRPCLog) Exists() bool {
	return hrl._exists
}

// Deleted provides information if the HTTPRPCLog has been deleted from the database.
func (hrl *HTTPRPCLog) Deleted() bool {
	return hrl._deleted
}

// Insert inserts the HTTPRPCLog to the database.
func (hrl *HTTPRPCLog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if hrl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO sun_log.http_rpc_log (` +
		`Time, MethodFull, MethodParent, UserId, SessionId, StatusCode, InputSize, OutputSize, ReqestJson, ResponseJson, ReqestParamJson, ResponseMsgJson` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, hrl.Time, hrl.MethodFull, hrl.MethodParent, hrl.UserId, hrl.SessionId, hrl.StatusCode, hrl.InputSize, hrl.OutputSize, hrl.ReqestJson, hrl.ResponseJson, hrl.ReqestParamJson, hrl.ResponseMsgJson)
	}
	res, err := db.Exec(sqlstr, hrl.Time, hrl.MethodFull, hrl.MethodParent, hrl.UserId, hrl.SessionId, hrl.StatusCode, hrl.InputSize, hrl.OutputSize, hrl.ReqestJson, hrl.ResponseJson, hrl.ReqestParamJson, hrl.ResponseMsgJson)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	hrl.Id = int(id)
	hrl._exists = true

	OnHTTPRPCLog_AfterInsert(hrl)

	return nil
}

// Insert inserts the HTTPRPCLog to the database.
func (hrl *HTTPRPCLog) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_log.http_rpc_log (` +
		`Time, MethodFull, MethodParent, UserId, SessionId, StatusCode, InputSize, OutputSize, ReqestJson, ResponseJson, ReqestParamJson, ResponseMsgJson` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, hrl.Time, hrl.MethodFull, hrl.MethodParent, hrl.UserId, hrl.SessionId, hrl.StatusCode, hrl.InputSize, hrl.OutputSize, hrl.ReqestJson, hrl.ResponseJson, hrl.ReqestParamJson, hrl.ResponseMsgJson)
	}
	res, err := db.Exec(sqlstr, hrl.Time, hrl.MethodFull, hrl.MethodParent, hrl.UserId, hrl.SessionId, hrl.StatusCode, hrl.InputSize, hrl.OutputSize, hrl.ReqestJson, hrl.ResponseJson, hrl.ReqestParamJson, hrl.ResponseMsgJson)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	hrl.Id = int(id)
	hrl._exists = true

	OnHTTPRPCLog_AfterInsert(hrl)

	return nil
}

// Update updates the HTTPRPCLog in the database.
func (hrl *HTTPRPCLog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hrl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if hrl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_log.http_rpc_log SET ` +
		`Time = ?, MethodFull = ?, MethodParent = ?, UserId = ?, SessionId = ?, StatusCode = ?, InputSize = ?, OutputSize = ?, ReqestJson = ?, ResponseJson = ?, ReqestParamJson = ?, ResponseMsgJson = ?` +
		` WHERE Id = ?`

	// run query
	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, hrl.Time, hrl.MethodFull, hrl.MethodParent, hrl.UserId, hrl.SessionId, hrl.StatusCode, hrl.InputSize, hrl.OutputSize, hrl.ReqestJson, hrl.ResponseJson, hrl.ReqestParamJson, hrl.ResponseMsgJson, hrl.Id)
	}
	_, err = db.Exec(sqlstr, hrl.Time, hrl.MethodFull, hrl.MethodParent, hrl.UserId, hrl.SessionId, hrl.StatusCode, hrl.InputSize, hrl.OutputSize, hrl.ReqestJson, hrl.ResponseJson, hrl.ReqestParamJson, hrl.ResponseMsgJson, hrl.Id)

	if LogTableSqlReq.HTTPRPCLog {
		XOLogErr(err)
	}
	OnHTTPRPCLog_AfterUpdate(hrl)

	return err
}

// Save saves the HTTPRPCLog to the database.
func (hrl *HTTPRPCLog) Save(db XODB) error {
	if hrl.Exists() {
		return hrl.Update(db)
	}

	return hrl.Replace(db)
}

// Delete deletes the HTTPRPCLog from the database.
func (hrl *HTTPRPCLog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hrl._exists {
		return nil
	}

	// if deleted, bail
	if hrl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_log.http_rpc_log WHERE Id = ?`

	// run query
	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, hrl.Id)
	}
	_, err = db.Exec(sqlstr, hrl.Id)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	hrl._deleted = true

	OnHTTPRPCLog_AfterDelete(hrl)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __HTTPRPCLog_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __HTTPRPCLog_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __HTTPRPCLog_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewHTTPRPCLog_Deleter() *__HTTPRPCLog_Deleter {
	d := __HTTPRPCLog_Deleter{whereSep: " AND "}
	return &d
}

func NewHTTPRPCLog_Updater() *__HTTPRPCLog_Updater {
	u := __HTTPRPCLog_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewHTTPRPCLog_Selector() *__HTTPRPCLog_Selector {
	u := __HTTPRPCLog_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__HTTPRPCLog_Deleter) Or() *__HTTPRPCLog_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__HTTPRPCLog_Deleter) Id_In(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) Id_Ins(ins ...int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) Id_NotIn(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) Id_Eq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) Id_NotEq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) Id_LT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) Id_LE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) Id_GT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) Id_GE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) UserId_In(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) UserId_Ins(ins ...int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) UserId_NotIn(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) UserId_Eq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) UserId_NotEq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) UserId_LT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) UserId_LE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) UserId_GT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) UserId_GE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) StatusCode_In(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusCode IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) StatusCode_Ins(ins ...int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusCode IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) StatusCode_NotIn(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusCode NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) StatusCode_Eq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) StatusCode_NotEq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) StatusCode_LT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) StatusCode_LE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) StatusCode_GT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) StatusCode_GE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) InputSize_In(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) InputSize_Ins(ins ...int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) InputSize_NotIn(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InputSize NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) InputSize_Eq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) InputSize_NotEq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) InputSize_LT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) InputSize_LE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) InputSize_GT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) InputSize_GE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) OutputSize_In(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OutputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) OutputSize_Ins(ins ...int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OutputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) OutputSize_NotIn(ins []int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OutputSize NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) OutputSize_Eq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) OutputSize_NotEq(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) OutputSize_LT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) OutputSize_LE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) OutputSize_GT(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) OutputSize_GE(val int) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__HTTPRPCLog_Updater) Or() *__HTTPRPCLog_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__HTTPRPCLog_Updater) Id_In(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) Id_Ins(ins ...int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) Id_NotIn(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) Id_Eq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) Id_NotEq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) Id_LT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) Id_LE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) Id_GT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) Id_GE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) UserId_In(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) UserId_Ins(ins ...int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) UserId_NotIn(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) UserId_Eq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) UserId_NotEq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) UserId_LT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) UserId_LE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) UserId_GT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) UserId_GE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) StatusCode_In(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusCode IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) StatusCode_Ins(ins ...int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusCode IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) StatusCode_NotIn(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusCode NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) StatusCode_Eq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) StatusCode_NotEq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) StatusCode_LT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) StatusCode_LE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) StatusCode_GT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) StatusCode_GE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) InputSize_In(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) InputSize_Ins(ins ...int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) InputSize_NotIn(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InputSize NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) InputSize_Eq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) InputSize_NotEq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) InputSize_LT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) InputSize_LE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) InputSize_GT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) InputSize_GE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) OutputSize_In(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OutputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) OutputSize_Ins(ins ...int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OutputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) OutputSize_NotIn(ins []int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OutputSize NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) OutputSize_Eq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) OutputSize_NotEq(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) OutputSize_LT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) OutputSize_LE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) OutputSize_GT(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) OutputSize_GE(val int) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__HTTPRPCLog_Selector) Or() *__HTTPRPCLog_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__HTTPRPCLog_Selector) Id_In(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) Id_Ins(ins ...int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) Id_NotIn(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) Id_Eq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) Id_NotEq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) Id_LT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) Id_LE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) Id_GT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) Id_GE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) UserId_In(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) UserId_Ins(ins ...int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) UserId_NotIn(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) UserId_Eq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) UserId_NotEq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) UserId_LT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) UserId_LE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) UserId_GT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) UserId_GE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) StatusCode_In(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusCode IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) StatusCode_Ins(ins ...int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusCode IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) StatusCode_NotIn(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StatusCode NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) StatusCode_Eq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) StatusCode_NotEq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) StatusCode_LT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) StatusCode_LE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) StatusCode_GT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) StatusCode_GE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StatusCode >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) InputSize_In(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) InputSize_Ins(ins ...int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) InputSize_NotIn(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InputSize NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) InputSize_Eq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) InputSize_NotEq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) InputSize_LT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) InputSize_LE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) InputSize_GT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) InputSize_GE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InputSize >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) OutputSize_In(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OutputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) OutputSize_Ins(ins ...int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OutputSize IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) OutputSize_NotIn(ins []int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OutputSize NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) OutputSize_Eq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) OutputSize_NotEq(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) OutputSize_LT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) OutputSize_LE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) OutputSize_GT(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) OutputSize_GE(val int) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OutputSize >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__HTTPRPCLog_Deleter) Time_In(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Time IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) Time_NotIn(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Time NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Deleter) Time_Like(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Time LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) Time_Eq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Time = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) Time_NotEq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Time != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) MethodFull_In(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodFull IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) MethodFull_NotIn(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodFull NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Deleter) MethodFull_Like(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodFull LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) MethodFull_Eq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodFull = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) MethodFull_NotEq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodFull != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) MethodParent_In(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodParent IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) MethodParent_NotIn(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodParent NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Deleter) MethodParent_Like(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodParent LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) MethodParent_Eq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodParent = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) MethodParent_NotEq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodParent != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) SessionId_In(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) SessionId_NotIn(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Deleter) SessionId_Like(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionId LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) SessionId_Eq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) SessionId_NotEq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) ReqestJson_In(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) ReqestJson_NotIn(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Deleter) ReqestJson_Like(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) ReqestJson_Eq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) ReqestJson_NotEq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) ResponseJson_In(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) ResponseJson_NotIn(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Deleter) ResponseJson_Like(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) ResponseJson_Eq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) ResponseJson_NotEq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) ReqestParamJson_In(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestParamJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) ReqestParamJson_NotIn(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestParamJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Deleter) ReqestParamJson_Like(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestParamJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) ReqestParamJson_Eq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestParamJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) ReqestParamJson_NotEq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestParamJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Deleter) ResponseMsgJson_In(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseMsgJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Deleter) ResponseMsgJson_NotIn(ins []string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseMsgJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Deleter) ResponseMsgJson_Like(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseMsgJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Deleter) ResponseMsgJson_Eq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseMsgJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Deleter) ResponseMsgJson_NotEq(val string) *__HTTPRPCLog_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseMsgJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__HTTPRPCLog_Updater) Time_In(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Time IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) Time_NotIn(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Time NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Updater) Time_Like(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Time LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) Time_Eq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Time = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) Time_NotEq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Time != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) MethodFull_In(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodFull IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) MethodFull_NotIn(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodFull NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Updater) MethodFull_Like(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodFull LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) MethodFull_Eq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodFull = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) MethodFull_NotEq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodFull != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) MethodParent_In(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodParent IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) MethodParent_NotIn(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodParent NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Updater) MethodParent_Like(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodParent LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) MethodParent_Eq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodParent = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) MethodParent_NotEq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodParent != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) SessionId_In(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) SessionId_NotIn(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Updater) SessionId_Like(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionId LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) SessionId_Eq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) SessionId_NotEq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) ReqestJson_In(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) ReqestJson_NotIn(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Updater) ReqestJson_Like(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) ReqestJson_Eq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) ReqestJson_NotEq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) ResponseJson_In(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) ResponseJson_NotIn(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Updater) ResponseJson_Like(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) ResponseJson_Eq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) ResponseJson_NotEq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) ReqestParamJson_In(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestParamJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) ReqestParamJson_NotIn(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestParamJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Updater) ReqestParamJson_Like(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestParamJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) ReqestParamJson_Eq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestParamJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) ReqestParamJson_NotEq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestParamJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Updater) ResponseMsgJson_In(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseMsgJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Updater) ResponseMsgJson_NotIn(ins []string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseMsgJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Updater) ResponseMsgJson_Like(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseMsgJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Updater) ResponseMsgJson_Eq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseMsgJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Updater) ResponseMsgJson_NotEq(val string) *__HTTPRPCLog_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseMsgJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__HTTPRPCLog_Selector) Time_In(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Time IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) Time_NotIn(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Time NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Selector) Time_Like(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Time LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) Time_Eq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Time = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) Time_NotEq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Time != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) MethodFull_In(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodFull IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) MethodFull_NotIn(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodFull NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Selector) MethodFull_Like(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodFull LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) MethodFull_Eq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodFull = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) MethodFull_NotEq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodFull != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) MethodParent_In(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodParent IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) MethodParent_NotIn(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MethodParent NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Selector) MethodParent_Like(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodParent LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) MethodParent_Eq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodParent = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) MethodParent_NotEq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MethodParent != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) SessionId_In(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) SessionId_NotIn(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Selector) SessionId_Like(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionId LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) SessionId_Eq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) SessionId_NotEq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) ReqestJson_In(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) ReqestJson_NotIn(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Selector) ReqestJson_Like(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) ReqestJson_Eq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) ReqestJson_NotEq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) ResponseJson_In(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) ResponseJson_NotIn(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Selector) ResponseJson_Like(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) ResponseJson_Eq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) ResponseJson_NotEq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) ReqestParamJson_In(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestParamJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) ReqestParamJson_NotIn(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReqestParamJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Selector) ReqestParamJson_Like(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestParamJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) ReqestParamJson_Eq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestParamJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) ReqestParamJson_NotEq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReqestParamJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HTTPRPCLog_Selector) ResponseMsgJson_In(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseMsgJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HTTPRPCLog_Selector) ResponseMsgJson_NotIn(ins []string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResponseMsgJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__HTTPRPCLog_Selector) ResponseMsgJson_Like(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseMsgJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HTTPRPCLog_Selector) ResponseMsgJson_Eq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseMsgJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HTTPRPCLog_Selector) ResponseMsgJson_NotEq(val string) *__HTTPRPCLog_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResponseMsgJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__HTTPRPCLog_Updater) Id(newVal int) *__HTTPRPCLog_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__HTTPRPCLog_Updater) Id_Increment(count int) *__HTTPRPCLog_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__HTTPRPCLog_Updater) Time(newVal string) *__HTTPRPCLog_Updater {
	u.updates[" Time = ? "] = newVal
	return u
}

//ints

//string
func (u *__HTTPRPCLog_Updater) MethodFull(newVal string) *__HTTPRPCLog_Updater {
	u.updates[" MethodFull = ? "] = newVal
	return u
}

//ints

//string
func (u *__HTTPRPCLog_Updater) MethodParent(newVal string) *__HTTPRPCLog_Updater {
	u.updates[" MethodParent = ? "] = newVal
	return u
}

//ints

func (u *__HTTPRPCLog_Updater) UserId(newVal int) *__HTTPRPCLog_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__HTTPRPCLog_Updater) UserId_Increment(count int) *__HTTPRPCLog_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__HTTPRPCLog_Updater) SessionId(newVal string) *__HTTPRPCLog_Updater {
	u.updates[" SessionId = ? "] = newVal
	return u
}

//ints

func (u *__HTTPRPCLog_Updater) StatusCode(newVal int) *__HTTPRPCLog_Updater {
	u.updates[" StatusCode = ? "] = newVal
	return u
}

func (u *__HTTPRPCLog_Updater) StatusCode_Increment(count int) *__HTTPRPCLog_Updater {
	if count > 0 {
		u.updates[" StatusCode = StatusCode+? "] = count
	}

	if count < 0 {
		u.updates[" StatusCode = StatusCode-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__HTTPRPCLog_Updater) InputSize(newVal int) *__HTTPRPCLog_Updater {
	u.updates[" InputSize = ? "] = newVal
	return u
}

func (u *__HTTPRPCLog_Updater) InputSize_Increment(count int) *__HTTPRPCLog_Updater {
	if count > 0 {
		u.updates[" InputSize = InputSize+? "] = count
	}

	if count < 0 {
		u.updates[" InputSize = InputSize-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__HTTPRPCLog_Updater) OutputSize(newVal int) *__HTTPRPCLog_Updater {
	u.updates[" OutputSize = ? "] = newVal
	return u
}

func (u *__HTTPRPCLog_Updater) OutputSize_Increment(count int) *__HTTPRPCLog_Updater {
	if count > 0 {
		u.updates[" OutputSize = OutputSize+? "] = count
	}

	if count < 0 {
		u.updates[" OutputSize = OutputSize-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__HTTPRPCLog_Updater) ReqestJson(newVal string) *__HTTPRPCLog_Updater {
	u.updates[" ReqestJson = ? "] = newVal
	return u
}

//ints

//string
func (u *__HTTPRPCLog_Updater) ResponseJson(newVal string) *__HTTPRPCLog_Updater {
	u.updates[" ResponseJson = ? "] = newVal
	return u
}

//ints

//string
func (u *__HTTPRPCLog_Updater) ReqestParamJson(newVal string) *__HTTPRPCLog_Updater {
	u.updates[" ReqestParamJson = ? "] = newVal
	return u
}

//ints

//string
func (u *__HTTPRPCLog_Updater) ResponseMsgJson(newVal string) *__HTTPRPCLog_Updater {
	u.updates[" ResponseMsgJson = ? "] = newVal
	return u
}

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__HTTPRPCLog_Selector) OrderBy_Id_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_Id_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_Id() *__HTTPRPCLog_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_Time_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY Time DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_Time_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY Time ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_Time() *__HTTPRPCLog_Selector {
	u.selectCol = "Time"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_MethodFull_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY MethodFull DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_MethodFull_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY MethodFull ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_MethodFull() *__HTTPRPCLog_Selector {
	u.selectCol = "MethodFull"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_MethodParent_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY MethodParent DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_MethodParent_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY MethodParent ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_MethodParent() *__HTTPRPCLog_Selector {
	u.selectCol = "MethodParent"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_UserId_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_UserId_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_UserId() *__HTTPRPCLog_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_SessionId_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY SessionId DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_SessionId_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY SessionId ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_SessionId() *__HTTPRPCLog_Selector {
	u.selectCol = "SessionId"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_StatusCode_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY StatusCode DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_StatusCode_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY StatusCode ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_StatusCode() *__HTTPRPCLog_Selector {
	u.selectCol = "StatusCode"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_InputSize_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY InputSize DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_InputSize_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY InputSize ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_InputSize() *__HTTPRPCLog_Selector {
	u.selectCol = "InputSize"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_OutputSize_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY OutputSize DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_OutputSize_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY OutputSize ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_OutputSize() *__HTTPRPCLog_Selector {
	u.selectCol = "OutputSize"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_ReqestJson_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY ReqestJson DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_ReqestJson_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY ReqestJson ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_ReqestJson() *__HTTPRPCLog_Selector {
	u.selectCol = "ReqestJson"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_ResponseJson_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY ResponseJson DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_ResponseJson_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY ResponseJson ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_ResponseJson() *__HTTPRPCLog_Selector {
	u.selectCol = "ResponseJson"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_ReqestParamJson_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY ReqestParamJson DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_ReqestParamJson_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY ReqestParamJson ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_ReqestParamJson() *__HTTPRPCLog_Selector {
	u.selectCol = "ReqestParamJson"
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_ResponseMsgJson_Desc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY ResponseMsgJson DESC "
	return u
}

func (u *__HTTPRPCLog_Selector) OrderBy_ResponseMsgJson_Asc() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY ResponseMsgJson ASC "
	return u
}

func (u *__HTTPRPCLog_Selector) Select_ResponseMsgJson() *__HTTPRPCLog_Selector {
	u.selectCol = "ResponseMsgJson"
	return u
}

func (u *__HTTPRPCLog_Selector) Limit(num int) *__HTTPRPCLog_Selector {
	u.limit = num
	return u
}

func (u *__HTTPRPCLog_Selector) Offset(num int) *__HTTPRPCLog_Selector {
	u.offset = num
	return u
}

func (u *__HTTPRPCLog_Selector) Order_Rand() *__HTTPRPCLog_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__HTTPRPCLog_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_log.http_rpc_log"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__HTTPRPCLog_Selector) GetRow(db *sqlx.DB) (*HTTPRPCLog, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, whereArgs)
	}

	row := &HTTPRPCLog{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnHTTPRPCLog_LoadOne(row)

	return row, nil
}

func (u *__HTTPRPCLog_Selector) GetRows(db *sqlx.DB) ([]*HTTPRPCLog, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*HTTPRPCLog
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnHTTPRPCLog_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__HTTPRPCLog_Selector) GetRows2(db *sqlx.DB) ([]HTTPRPCLog, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*HTTPRPCLog
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnHTTPRPCLog_LoadMany(rows)

	rows2 := make([]HTTPRPCLog, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__HTTPRPCLog_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__HTTPRPCLog_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__HTTPRPCLog_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__HTTPRPCLog_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__HTTPRPCLog_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_log.http_rpc_log SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__HTTPRPCLog_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_log.http_rpc_log WHERE " + wheresStr

	// run query
	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  HTTPRPCLog ////////////////

func MassInsert_HTTPRPCLog(rows []HTTPRPCLog, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "( ms_question_mark .Columns .PrimaryKey.ColumnName }})," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun_log.http_rpc_log (" +
		"Time, MethodFull, MethodParent, UserId, SessionId, StatusCode, InputSize, OutputSize, ReqestJson, ResponseJson, ReqestParamJson, ResponseMsgJson" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Time)
		vals = append(vals, row.MethodFull)
		vals = append(vals, row.MethodParent)
		vals = append(vals, row.UserId)
		vals = append(vals, row.SessionId)
		vals = append(vals, row.StatusCode)
		vals = append(vals, row.InputSize)
		vals = append(vals, row.OutputSize)
		vals = append(vals, row.ReqestJson)
		vals = append(vals, row.ResponseJson)
		vals = append(vals, row.ReqestParamJson)
		vals = append(vals, row.ResponseMsgJson)

	}

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_HTTPRPCLog(rows []HTTPRPCLog, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun_log.http_rpc_log (" +
		"Time, MethodFull, MethodParent, UserId, SessionId, StatusCode, InputSize, OutputSize, ReqestJson, ResponseJson, ReqestParamJson, ResponseMsgJson" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Time)
		vals = append(vals, row.MethodFull)
		vals = append(vals, row.MethodParent)
		vals = append(vals, row.UserId)
		vals = append(vals, row.SessionId)
		vals = append(vals, row.StatusCode)
		vals = append(vals, row.InputSize)
		vals = append(vals, row.OutputSize)
		vals = append(vals, row.ReqestJson)
		vals = append(vals, row.ResponseJson)
		vals = append(vals, row.ReqestParamJson)
		vals = append(vals, row.ResponseMsgJson)

	}

	if LogTableSqlReq.HTTPRPCLog {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.HTTPRPCLog {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//
