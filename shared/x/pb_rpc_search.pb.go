// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb_rpc_search.proto

package x

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PB_SearchResponse_AddNewC struct {
}

func (m *PB_SearchResponse_AddNewC) Reset()                    { *m = PB_SearchResponse_AddNewC{} }
func (m *PB_SearchResponse_AddNewC) String() string            { return proto.CompactTextString(m) }
func (*PB_SearchResponse_AddNewC) ProtoMessage()               {}
func (*PB_SearchResponse_AddNewC) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func init() {
	proto.RegisterType((*PB_SearchResponse_AddNewC)(nil), "PB_SearchResponse_AddNewC")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPC_Search service

type RPC_SearchClient interface {
	SearchTags(ctx context.Context, in *PB_SearchResponse_AddNewC, opts ...grpc.CallOption) (*PB_SearchResponse_AddNewC, error)
}

type rPC_SearchClient struct {
	cc *grpc.ClientConn
}

func NewRPC_SearchClient(cc *grpc.ClientConn) RPC_SearchClient {
	return &rPC_SearchClient{cc}
}

func (c *rPC_SearchClient) SearchTags(ctx context.Context, in *PB_SearchResponse_AddNewC, opts ...grpc.CallOption) (*PB_SearchResponse_AddNewC, error) {
	out := new(PB_SearchResponse_AddNewC)
	err := grpc.Invoke(ctx, "/RPC_Search/SearchTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPC_Search service

type RPC_SearchServer interface {
	SearchTags(context.Context, *PB_SearchResponse_AddNewC) (*PB_SearchResponse_AddNewC, error)
}

func RegisterRPC_SearchServer(s *grpc.Server, srv RPC_SearchServer) {
	s.RegisterService(&_RPC_Search_serviceDesc, srv)
}

func _RPC_Search_SearchTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PB_SearchResponse_AddNewC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_SearchServer).SearchTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_Search/SearchTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_SearchServer).SearchTags(ctx, req.(*PB_SearchResponse_AddNewC))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RPC_Search",
	HandlerType: (*RPC_SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchTags",
			Handler:    _RPC_Search_SearchTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_rpc_search.proto",
}

func init() { proto.RegisterFile("pb_rpc_search.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x48, 0x8a, 0x2f,
	0x2a, 0x48, 0x8e, 0x2f, 0x4e, 0x4d, 0x2c, 0x4a, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57,
	0x92, 0xe6, 0x92, 0x0c, 0x70, 0x8a, 0x0f, 0x06, 0x0b, 0x05, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15,
	0xa7, 0xc6, 0x3b, 0xa6, 0xa4, 0xf8, 0xa5, 0x96, 0x3b, 0x1b, 0x05, 0x71, 0x71, 0x05, 0x05, 0x38,
	0x43, 0x65, 0x85, 0x5c, 0xb8, 0xb8, 0x20, 0xac, 0x90, 0xc4, 0xf4, 0x62, 0x21, 0x29, 0x3d, 0x9c,
	0xfa, 0xa4, 0xf0, 0xc8, 0x39, 0x09, 0x72, 0x71, 0x64, 0x16, 0xe9, 0xe5, 0x16, 0xeb, 0x15, 0x24,
	0x79, 0x30, 0x07, 0x30, 0x46, 0x31, 0x56, 0x24, 0xb1, 0x81, 0x9d, 0x62, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x62, 0x94, 0x75, 0x1b, 0xa1, 0x00, 0x00, 0x00,
}
