package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Event represents a row from 'sun.event'.

// Manualy copy this to project
type Event__ struct {
	EventId      int    `json:"EventId"`      // EventId -
	EventType    int    `json:"EventType"`    // EventType -
	ByUserId     int    `json:"ByUserId"`     // ByUserId -
	PeerUserId   int    `json:"PeerUserId"`   // PeerUserId -
	PostId       int    `json:"PostId"`       // PostId -
	CommentId    int    `json:"CommentId"`    // CommentId -
	HashTagId    int    `json:"HashTagId"`    // HashTagId -
	GroupId      int    `json:"GroupId"`      // GroupId -
	ActionId     int    `json:"ActionId"`     // ActionId -
	ChatId       int    `json:"ChatId"`       // ChatId -
	ChatKey      string `json:"ChatKey"`      // ChatKey -
	MessageId    int    `json:"MessageId"`    // MessageId -
	ReSharedId   int    `json:"ReSharedId"`   // ReSharedId -
	Murmur64Hash int    `json:"Murmur64Hash"` // Murmur64Hash -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Event exists in the database.
func (e *Event) Exists() bool {
	return e._exists
}

// Deleted provides information if the Event has been deleted from the database.
func (e *Event) Deleted() bool {
	return e._deleted
}

// Insert inserts the Event to the database.
func (e *Event) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.event (` +
		`EventId, EventType, ByUserId, PeerUserId, PostId, CommentId, HashTagId, GroupId, ActionId, ChatId, ChatKey, MessageId, ReSharedId, Murmur64Hash` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Event {
		XOLog(sqlstr, e.EventId, e.EventType, e.ByUserId, e.PeerUserId, e.PostId, e.CommentId, e.HashTagId, e.GroupId, e.ActionId, e.ChatId, e.ChatKey, e.MessageId, e.ReSharedId, e.Murmur64Hash)
	}
	_, err = db.Exec(sqlstr, e.EventId, e.EventType, e.ByUserId, e.PeerUserId, e.PostId, e.CommentId, e.HashTagId, e.GroupId, e.ActionId, e.ChatId, e.ChatKey, e.MessageId, e.ReSharedId, e.Murmur64Hash)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	OnEvent_AfterInsert(e)

	return nil
}

// Insert inserts the Event to the database.
func (e *Event) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.event (` +
		`EventId, EventType, ByUserId, PeerUserId, PostId, CommentId, HashTagId, GroupId, ActionId, ChatId, ChatKey, MessageId, ReSharedId, Murmur64Hash` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Event {
		XOLog(sqlstr, e.EventId, e.EventType, e.ByUserId, e.PeerUserId, e.PostId, e.CommentId, e.HashTagId, e.GroupId, e.ActionId, e.ChatId, e.ChatKey, e.MessageId, e.ReSharedId, e.Murmur64Hash)
	}
	_, err = db.Exec(sqlstr, e.EventId, e.EventType, e.ByUserId, e.PeerUserId, e.PostId, e.CommentId, e.HashTagId, e.GroupId, e.ActionId, e.ChatId, e.ChatKey, e.MessageId, e.ReSharedId, e.Murmur64Hash)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return err
	}

	e._exists = true

	OnEvent_AfterInsert(e)

	return nil
}

// Update updates the Event in the database.
func (e *Event) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.event SET ` +
		`EventType = ?, ByUserId = ?, PeerUserId = ?, PostId = ?, CommentId = ?, HashTagId = ?, GroupId = ?, ActionId = ?, ChatId = ?, ChatKey = ?, MessageId = ?, ReSharedId = ?, Murmur64Hash = ?` +
		` WHERE EventId = ?`

	// run query
	if LogTableSqlReq.Event {
		XOLog(sqlstr, e.EventType, e.ByUserId, e.PeerUserId, e.PostId, e.CommentId, e.HashTagId, e.GroupId, e.ActionId, e.ChatId, e.ChatKey, e.MessageId, e.ReSharedId, e.Murmur64Hash, e.EventId)
	}
	_, err = db.Exec(sqlstr, e.EventType, e.ByUserId, e.PeerUserId, e.PostId, e.CommentId, e.HashTagId, e.GroupId, e.ActionId, e.ChatId, e.ChatKey, e.MessageId, e.ReSharedId, e.Murmur64Hash, e.EventId)

	if LogTableSqlReq.Event {
		XOLogErr(err)
	}
	OnEvent_AfterUpdate(e)

	return err
}

// Save saves the Event to the database.
func (e *Event) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Replace(db)
}

// Delete deletes the Event from the database.
func (e *Event) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.event WHERE EventId = ?`

	// run query
	if LogTableSqlReq.Event {
		XOLog(sqlstr, e.EventId)
	}
	_, err = db.Exec(sqlstr, e.EventId)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	e._deleted = true

	OnEvent_AfterDelete(e)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Event_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Event_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Event_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewEvent_Deleter() *__Event_Deleter {
	d := __Event_Deleter{whereSep: " AND ", isMysql: true}
	return &d
}

func NewEvent_Updater() *__Event_Updater {
	u := __Event_Updater{whereSep: " AND ", isMysql: true}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewEvent_Selector() *__Event_Selector {
	u := __Event_Selector{whereSep: " AND ", selectCol: "*", isMysql: true}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__Event_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__Event_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__Event_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Event_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Event_Deleter) Or() *__Event_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Event_Deleter) EventId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) EventId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) EventId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) EventId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) EventType_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) EventType_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) EventType_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) EventType_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventType_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventType_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventType_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventType_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) EventType_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) ByUserId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) ByUserId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) ByUserId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) ByUserId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ByUserId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ByUserId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ByUserId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ByUserId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ByUserId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) PeerUserId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) PeerUserId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) PeerUserId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) PeerUserId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PeerUserId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PeerUserId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PeerUserId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PeerUserId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PeerUserId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) PostId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) PostId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) PostId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) PostId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PostId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PostId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PostId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PostId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) PostId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) CommentId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) CommentId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) CommentId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) CommentId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) CommentId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) CommentId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) CommentId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) CommentId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) CommentId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) HashTagId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) HashTagId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) HashTagId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) HashTagId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) HashTagId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) HashTagId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) HashTagId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) HashTagId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) HashTagId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) GroupId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) GroupId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) GroupId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) GroupId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) GroupId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) GroupId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) GroupId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) GroupId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) GroupId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) ActionId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) ActionId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) ActionId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) ActionId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ActionId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ActionId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ActionId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ActionId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ActionId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) ChatId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) ChatId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) ChatId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) ChatId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ChatId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ChatId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ChatId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ChatId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ChatId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) MessageId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) MessageId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) MessageId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) MessageId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) MessageId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) MessageId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) MessageId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) MessageId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) MessageId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) ReSharedId_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) ReSharedId_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) ReSharedId_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) ReSharedId_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ReSharedId_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ReSharedId_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ReSharedId_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ReSharedId_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ReSharedId_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Deleter) Murmur64Hash_In(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) Murmur64Hash_Ins(ins ...int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) Murmur64Hash_NotIn(ins []int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) Murmur64Hash_Eq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) Murmur64Hash_NotEq(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) Murmur64Hash_LT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) Murmur64Hash_LE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) Murmur64Hash_GT(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) Murmur64Hash_GE(val int) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Event_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Event_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Event_Updater) Or() *__Event_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Event_Updater) EventId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) EventId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) EventId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) EventId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) EventType_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) EventType_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) EventType_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) EventType_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventType_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventType_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventType_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventType_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) EventType_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) ByUserId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) ByUserId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) ByUserId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) ByUserId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ByUserId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ByUserId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ByUserId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ByUserId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ByUserId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) PeerUserId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) PeerUserId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) PeerUserId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) PeerUserId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PeerUserId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PeerUserId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PeerUserId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PeerUserId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PeerUserId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) PostId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) PostId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) PostId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) PostId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PostId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PostId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PostId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PostId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) PostId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) CommentId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) CommentId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) CommentId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) CommentId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) CommentId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) CommentId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) CommentId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) CommentId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) CommentId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) HashTagId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) HashTagId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) HashTagId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) HashTagId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) HashTagId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) HashTagId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) HashTagId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) HashTagId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) HashTagId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) GroupId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) GroupId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) GroupId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) GroupId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) GroupId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) GroupId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) GroupId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) GroupId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) GroupId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) ActionId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) ActionId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) ActionId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) ActionId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ActionId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ActionId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ActionId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ActionId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ActionId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) ChatId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) ChatId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) ChatId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) ChatId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ChatId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ChatId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ChatId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ChatId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ChatId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) MessageId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) MessageId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) MessageId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) MessageId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) MessageId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) MessageId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) MessageId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) MessageId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) MessageId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) ReSharedId_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) ReSharedId_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) ReSharedId_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) ReSharedId_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ReSharedId_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ReSharedId_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ReSharedId_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ReSharedId_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ReSharedId_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Updater) Murmur64Hash_In(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) Murmur64Hash_Ins(ins ...int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) Murmur64Hash_NotIn(ins []int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) Murmur64Hash_Eq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) Murmur64Hash_NotEq(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) Murmur64Hash_LT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) Murmur64Hash_LE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) Murmur64Hash_GT(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) Murmur64Hash_GE(val int) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Event_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Event_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Event_Selector) Or() *__Event_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Event_Selector) EventId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) EventId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) EventId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) EventId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) EventType_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) EventType_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) EventType_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EventType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) EventType_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventType_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventType_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventType_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventType_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) EventType_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EventType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) ByUserId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) ByUserId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) ByUserId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ByUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) ByUserId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ByUserId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ByUserId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ByUserId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ByUserId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ByUserId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ByUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) PeerUserId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) PeerUserId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) PeerUserId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) PeerUserId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PeerUserId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PeerUserId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PeerUserId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PeerUserId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PeerUserId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) PostId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) PostId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) PostId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) PostId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PostId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PostId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PostId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PostId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) PostId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) CommentId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) CommentId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) CommentId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) CommentId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) CommentId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) CommentId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) CommentId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) CommentId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) CommentId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) HashTagId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) HashTagId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) HashTagId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) HashTagId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) HashTagId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) HashTagId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) HashTagId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) HashTagId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) HashTagId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) GroupId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) GroupId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) GroupId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) GroupId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) GroupId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) GroupId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) GroupId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) GroupId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) GroupId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) ActionId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) ActionId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) ActionId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) ActionId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ActionId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ActionId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ActionId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ActionId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ActionId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) ChatId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) ChatId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) ChatId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) ChatId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ChatId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ChatId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ChatId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ChatId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ChatId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) MessageId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) MessageId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) MessageId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) MessageId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) MessageId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) MessageId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) MessageId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) MessageId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) MessageId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) ReSharedId_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) ReSharedId_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) ReSharedId_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) ReSharedId_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ReSharedId_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ReSharedId_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ReSharedId_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ReSharedId_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ReSharedId_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Event_Selector) Murmur64Hash_In(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) Murmur64Hash_Ins(ins ...int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) Murmur64Hash_NotIn(ins []int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) Murmur64Hash_Eq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) Murmur64Hash_NotEq(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) Murmur64Hash_LT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) Murmur64Hash_LE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) Murmur64Hash_GT(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) Murmur64Hash_GE(val int) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Event_Deleter) ChatKey_In(ins []string) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Deleter) ChatKey_NotIn(ins []string) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Event_Deleter) ChatKey_Like(val string) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Deleter) ChatKey_Eq(val string) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Deleter) ChatKey_NotEq(val string) *__Event_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Event_Updater) ChatKey_In(ins []string) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Updater) ChatKey_NotIn(ins []string) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Event_Updater) ChatKey_Like(val string) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Updater) ChatKey_Eq(val string) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Updater) ChatKey_NotEq(val string) *__Event_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Event_Selector) ChatKey_In(ins []string) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Event_Selector) ChatKey_NotIn(ins []string) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Event_Selector) ChatKey_Like(val string) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Event_Selector) ChatKey_Eq(val string) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Event_Selector) ChatKey_NotEq(val string) *__Event_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Event_Updater) EventId(newVal int) *__Event_Updater {
	up := updateCol{" EventId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" EventId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) EventId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" EventId = EventId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" EventId = EventId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" EventId = EventId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" EventId = EventId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) EventType(newVal int) *__Event_Updater {
	up := updateCol{" EventType = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" EventType = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) EventType_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" EventType = EventType+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" EventType = EventType+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" EventType = EventType- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" EventType = EventType- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) ByUserId(newVal int) *__Event_Updater {
	up := updateCol{" ByUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ByUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) ByUserId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" ByUserId = ByUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ByUserId = ByUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ByUserId = ByUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ByUserId = ByUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) PeerUserId(newVal int) *__Event_Updater {
	up := updateCol{" PeerUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PeerUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) PeerUserId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" PeerUserId = PeerUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PeerUserId = PeerUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PeerUserId = PeerUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PeerUserId = PeerUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) PostId(newVal int) *__Event_Updater {
	up := updateCol{" PostId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PostId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) PostId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" PostId = PostId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PostId = PostId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PostId = PostId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PostId = PostId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) CommentId(newVal int) *__Event_Updater {
	up := updateCol{" CommentId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CommentId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) CommentId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" CommentId = CommentId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CommentId = CommentId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CommentId = CommentId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CommentId = CommentId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) HashTagId(newVal int) *__Event_Updater {
	up := updateCol{" HashTagId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" HashTagId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) HashTagId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" HashTagId = HashTagId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" HashTagId = HashTagId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" HashTagId = HashTagId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" HashTagId = HashTagId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) GroupId(newVal int) *__Event_Updater {
	up := updateCol{" GroupId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" GroupId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) GroupId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" GroupId = GroupId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" GroupId = GroupId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" GroupId = GroupId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" GroupId = GroupId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) ActionId(newVal int) *__Event_Updater {
	up := updateCol{" ActionId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ActionId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) ActionId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" ActionId = ActionId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ActionId = ActionId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ActionId = ActionId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ActionId = ActionId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) ChatId(newVal int) *__Event_Updater {
	up := updateCol{" ChatId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ChatId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) ChatId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" ChatId = ChatId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ChatId = ChatId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ChatId = ChatId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ChatId = ChatId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Event_Updater) ChatKey(newVal string) *__Event_Updater {
	up := updateCol{"ChatKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ChatKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Event_Updater) MessageId(newVal int) *__Event_Updater {
	up := updateCol{" MessageId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MessageId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) MessageId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" MessageId = MessageId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MessageId = MessageId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MessageId = MessageId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MessageId = MessageId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) ReSharedId(newVal int) *__Event_Updater {
	up := updateCol{" ReSharedId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ReSharedId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) ReSharedId_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" ReSharedId = ReSharedId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ReSharedId = ReSharedId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ReSharedId = ReSharedId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ReSharedId = ReSharedId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Event_Updater) Murmur64Hash(newVal int) *__Event_Updater {
	up := updateCol{" Murmur64Hash = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Murmur64Hash = " + u.nextDollar()] = newVal
	return u
}

func (u *__Event_Updater) Murmur64Hash_Increment(count int) *__Event_Updater {
	if count > 0 {
		up := updateCol{" Murmur64Hash = Murmur64Hash+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Murmur64Hash = Murmur64Hash+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Murmur64Hash = Murmur64Hash- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Murmur64Hash = Murmur64Hash- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Event_Selector) OrderBy_EventId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY EventId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_EventId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY EventId ASC "
	return u
}

func (u *__Event_Selector) Select_EventId() *__Event_Selector {
	u.selectCol = "EventId"
	return u
}

func (u *__Event_Selector) OrderBy_EventType_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY EventType DESC "
	return u
}

func (u *__Event_Selector) OrderBy_EventType_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY EventType ASC "
	return u
}

func (u *__Event_Selector) Select_EventType() *__Event_Selector {
	u.selectCol = "EventType"
	return u
}

func (u *__Event_Selector) OrderBy_ByUserId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY ByUserId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_ByUserId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY ByUserId ASC "
	return u
}

func (u *__Event_Selector) Select_ByUserId() *__Event_Selector {
	u.selectCol = "ByUserId"
	return u
}

func (u *__Event_Selector) OrderBy_PeerUserId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_PeerUserId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__Event_Selector) Select_PeerUserId() *__Event_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__Event_Selector) OrderBy_PostId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_PostId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Event_Selector) Select_PostId() *__Event_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Event_Selector) OrderBy_CommentId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY CommentId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_CommentId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY CommentId ASC "
	return u
}

func (u *__Event_Selector) Select_CommentId() *__Event_Selector {
	u.selectCol = "CommentId"
	return u
}

func (u *__Event_Selector) OrderBy_HashTagId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY HashTagId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_HashTagId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY HashTagId ASC "
	return u
}

func (u *__Event_Selector) Select_HashTagId() *__Event_Selector {
	u.selectCol = "HashTagId"
	return u
}

func (u *__Event_Selector) OrderBy_GroupId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY GroupId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_GroupId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY GroupId ASC "
	return u
}

func (u *__Event_Selector) Select_GroupId() *__Event_Selector {
	u.selectCol = "GroupId"
	return u
}

func (u *__Event_Selector) OrderBy_ActionId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY ActionId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_ActionId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY ActionId ASC "
	return u
}

func (u *__Event_Selector) Select_ActionId() *__Event_Selector {
	u.selectCol = "ActionId"
	return u
}

func (u *__Event_Selector) OrderBy_ChatId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY ChatId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_ChatId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY ChatId ASC "
	return u
}

func (u *__Event_Selector) Select_ChatId() *__Event_Selector {
	u.selectCol = "ChatId"
	return u
}

func (u *__Event_Selector) OrderBy_ChatKey_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY ChatKey DESC "
	return u
}

func (u *__Event_Selector) OrderBy_ChatKey_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY ChatKey ASC "
	return u
}

func (u *__Event_Selector) Select_ChatKey() *__Event_Selector {
	u.selectCol = "ChatKey"
	return u
}

func (u *__Event_Selector) OrderBy_MessageId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_MessageId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__Event_Selector) Select_MessageId() *__Event_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__Event_Selector) OrderBy_ReSharedId_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY ReSharedId DESC "
	return u
}

func (u *__Event_Selector) OrderBy_ReSharedId_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY ReSharedId ASC "
	return u
}

func (u *__Event_Selector) Select_ReSharedId() *__Event_Selector {
	u.selectCol = "ReSharedId"
	return u
}

func (u *__Event_Selector) OrderBy_Murmur64Hash_Desc() *__Event_Selector {
	u.orderBy = " ORDER BY Murmur64Hash DESC "
	return u
}

func (u *__Event_Selector) OrderBy_Murmur64Hash_Asc() *__Event_Selector {
	u.orderBy = " ORDER BY Murmur64Hash ASC "
	return u
}

func (u *__Event_Selector) Select_Murmur64Hash() *__Event_Selector {
	u.selectCol = "Murmur64Hash"
	return u
}

func (u *__Event_Selector) Limit(num int) *__Event_Selector {
	u.limit = num
	return u
}

func (u *__Event_Selector) Offset(num int) *__Event_Selector {
	u.offset = num
	return u
}

func (u *__Event_Selector) Order_Rand() *__Event_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Event_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.event"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Event_Selector) GetRow(db *sqlx.DB) (*Event, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Event {
		XOLog(sqlstr, whereArgs)
	}

	row := &Event{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnEvent_LoadOne(row)

	return row, nil
}

func (u *__Event_Selector) GetRows(db *sqlx.DB) ([]*Event, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Event {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*Event
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnEvent_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Event_Selector) GetRows2(db *sqlx.DB) ([]Event, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Event {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*Event
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnEvent_LoadMany(rows)

	rows2 := make([]Event, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Event_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Event {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__Event_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Event {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Event_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Event {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Event_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Event {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Event_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.event SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.Event {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__Event_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.event WHERE " + wheresStr

	// run query
	if LogTableSqlReq.Event {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Event ////////////////

func MassInsert_Event(rows []Event, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(14, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun.event (" +
		"EventId, EventType, ByUserId, PeerUserId, PostId, CommentId, HashTagId, GroupId, ActionId, ChatId, ChatKey, MessageId, ReSharedId, Murmur64Hash" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.EventId)
		vals = append(vals, row.EventType)
		vals = append(vals, row.ByUserId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.CommentId)
		vals = append(vals, row.HashTagId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.ActionId)
		vals = append(vals, row.ChatId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.ReSharedId)
		vals = append(vals, row.Murmur64Hash)

	}

	if LogTableSqlReq.Event {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_Event(rows []Event, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(14, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun.event (" +
		"EventId, EventType, ByUserId, PeerUserId, PostId, CommentId, HashTagId, GroupId, ActionId, ChatId, ChatKey, MessageId, ReSharedId, Murmur64Hash" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.EventId)
		vals = append(vals, row.EventType)
		vals = append(vals, row.ByUserId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.CommentId)
		vals = append(vals, row.HashTagId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.ActionId)
		vals = append(vals, row.ChatId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.ReSharedId)
		vals = append(vals, row.Murmur64Hash)

	}

	if LogTableSqlReq.Event {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Event {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//
