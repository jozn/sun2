package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// HomeFanout represents a row from 'sun_meta.home_fanout'.

// Manualy copy this to project
type HomeFanout__ struct {
	OrderId    int `json:"OrderId"`    // OrderId -
	ForUserId  int `json:"ForUserId"`  // ForUserId -
	PostId     int `json:"PostId"`     // PostId -
	PostUserId int `json:"PostUserId"` // PostUserId -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HomeFanout exists in the database.
func (hf *HomeFanout) Exists() bool {
	return hf._exists
}

// Deleted provides information if the HomeFanout has been deleted from the database.
func (hf *HomeFanout) Deleted() bool {
	return hf._deleted
}

// Insert inserts the HomeFanout to the database.
func (hf *HomeFanout) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if hf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_meta.home_fanout (` +
		`OrderId, ForUserId, PostId, PostUserId` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, hf.OrderId, hf.ForUserId, hf.PostId, hf.PostUserId)
	}
	_, err = db.Exec(sqlstr, hf.OrderId, hf.ForUserId, hf.PostId, hf.PostUserId)
	if err != nil {
		return err
	}

	// set existence
	hf._exists = true

	OnHomeFanout_AfterInsert(hf)

	return nil
}

// Insert inserts the HomeFanout to the database.
func (hf *HomeFanout) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_meta.home_fanout (` +
		`OrderId, ForUserId, PostId, PostUserId` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, hf.OrderId, hf.ForUserId, hf.PostId, hf.PostUserId)
	}
	_, err = db.Exec(sqlstr, hf.OrderId, hf.ForUserId, hf.PostId, hf.PostUserId)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return err
	}

	hf._exists = true

	OnHomeFanout_AfterInsert(hf)

	return nil
}

// Update updates the HomeFanout in the database.
func (hf *HomeFanout) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hf._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if hf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_meta.home_fanout SET ` +
		`ForUserId = ?, PostId = ?, PostUserId = ?` +
		` WHERE OrderId = ?`

	// run query
	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, hf.ForUserId, hf.PostId, hf.PostUserId, hf.OrderId)
	}
	_, err = db.Exec(sqlstr, hf.ForUserId, hf.PostId, hf.PostUserId, hf.OrderId)

	if LogTableSqlReq.HomeFanout {
		XOLogErr(err)
	}
	OnHomeFanout_AfterUpdate(hf)

	return err
}

// Save saves the HomeFanout to the database.
func (hf *HomeFanout) Save(db XODB) error {
	if hf.Exists() {
		return hf.Update(db)
	}

	return hf.Replace(db)
}

// Delete deletes the HomeFanout from the database.
func (hf *HomeFanout) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hf._exists {
		return nil
	}

	// if deleted, bail
	if hf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_meta.home_fanout WHERE OrderId = ?`

	// run query
	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, hf.OrderId)
	}
	_, err = db.Exec(sqlstr, hf.OrderId)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	hf._deleted = true

	OnHomeFanout_AfterDelete(hf)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __HomeFanout_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __HomeFanout_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __HomeFanout_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewHomeFanout_Deleter() *__HomeFanout_Deleter {
	d := __HomeFanout_Deleter{whereSep: " AND "}
	return &d
}

func NewHomeFanout_Updater() *__HomeFanout_Updater {
	u := __HomeFanout_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewHomeFanout_Selector() *__HomeFanout_Selector {
	u := __HomeFanout_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__HomeFanout_Deleter) Or() *__HomeFanout_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__HomeFanout_Deleter) OrderId_In(ins []int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Deleter) OrderId_Ins(ins ...int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Deleter) OrderId_NotIn(ins []int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Deleter) OrderId_Eq(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) OrderId_NotEq(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) OrderId_LT(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) OrderId_LE(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) OrderId_GT(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) OrderId_GE(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HomeFanout_Deleter) ForUserId_In(ins []int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Deleter) ForUserId_Ins(ins ...int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Deleter) ForUserId_NotIn(ins []int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Deleter) ForUserId_Eq(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) ForUserId_NotEq(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) ForUserId_LT(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) ForUserId_LE(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) ForUserId_GT(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) ForUserId_GE(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HomeFanout_Deleter) PostId_In(ins []int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Deleter) PostId_Ins(ins ...int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Deleter) PostId_NotIn(ins []int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Deleter) PostId_Eq(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostId_NotEq(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostId_LT(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostId_LE(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostId_GT(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostId_GE(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HomeFanout_Deleter) PostUserId_In(ins []int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Deleter) PostUserId_Ins(ins ...int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Deleter) PostUserId_NotIn(ins []int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Deleter) PostUserId_Eq(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostUserId_NotEq(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostUserId_LT(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostUserId_LE(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostUserId_GT(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Deleter) PostUserId_GE(val int) *__HomeFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__HomeFanout_Updater) Or() *__HomeFanout_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__HomeFanout_Updater) OrderId_In(ins []int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Updater) OrderId_Ins(ins ...int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Updater) OrderId_NotIn(ins []int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Updater) OrderId_Eq(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) OrderId_NotEq(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) OrderId_LT(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) OrderId_LE(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) OrderId_GT(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) OrderId_GE(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HomeFanout_Updater) ForUserId_In(ins []int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Updater) ForUserId_Ins(ins ...int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Updater) ForUserId_NotIn(ins []int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Updater) ForUserId_Eq(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) ForUserId_NotEq(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) ForUserId_LT(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) ForUserId_LE(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) ForUserId_GT(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) ForUserId_GE(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HomeFanout_Updater) PostId_In(ins []int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Updater) PostId_Ins(ins ...int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Updater) PostId_NotIn(ins []int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Updater) PostId_Eq(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostId_NotEq(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostId_LT(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostId_LE(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostId_GT(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostId_GE(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HomeFanout_Updater) PostUserId_In(ins []int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Updater) PostUserId_Ins(ins ...int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Updater) PostUserId_NotIn(ins []int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Updater) PostUserId_Eq(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostUserId_NotEq(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostUserId_LT(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostUserId_LE(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostUserId_GT(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Updater) PostUserId_GE(val int) *__HomeFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__HomeFanout_Selector) Or() *__HomeFanout_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__HomeFanout_Selector) OrderId_In(ins []int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Selector) OrderId_Ins(ins ...int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Selector) OrderId_NotIn(ins []int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Selector) OrderId_Eq(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) OrderId_NotEq(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) OrderId_LT(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) OrderId_LE(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) OrderId_GT(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) OrderId_GE(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HomeFanout_Selector) ForUserId_In(ins []int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Selector) ForUserId_Ins(ins ...int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Selector) ForUserId_NotIn(ins []int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Selector) ForUserId_Eq(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) ForUserId_NotEq(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) ForUserId_LT(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) ForUserId_LE(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) ForUserId_GT(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) ForUserId_GE(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HomeFanout_Selector) PostId_In(ins []int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Selector) PostId_Ins(ins ...int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Selector) PostId_NotIn(ins []int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Selector) PostId_Eq(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostId_NotEq(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostId_LT(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostId_LE(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostId_GT(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostId_GE(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__HomeFanout_Selector) PostUserId_In(ins []int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Selector) PostUserId_Ins(ins ...int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__HomeFanout_Selector) PostUserId_NotIn(ins []int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__HomeFanout_Selector) PostUserId_Eq(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostUserId_NotEq(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostUserId_LT(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostUserId_LE(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostUserId_GT(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__HomeFanout_Selector) PostUserId_GE(val int) *__HomeFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__HomeFanout_Updater) OrderId(newVal int) *__HomeFanout_Updater {
	u.updates[" OrderId = ? "] = newVal
	return u
}

func (u *__HomeFanout_Updater) OrderId_Increment(count int) *__HomeFanout_Updater {
	if count > 0 {
		u.updates[" OrderId = OrderId+? "] = count
	}

	if count < 0 {
		u.updates[" OrderId = OrderId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__HomeFanout_Updater) ForUserId(newVal int) *__HomeFanout_Updater {
	u.updates[" ForUserId = ? "] = newVal
	return u
}

func (u *__HomeFanout_Updater) ForUserId_Increment(count int) *__HomeFanout_Updater {
	if count > 0 {
		u.updates[" ForUserId = ForUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ForUserId = ForUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__HomeFanout_Updater) PostId(newVal int) *__HomeFanout_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__HomeFanout_Updater) PostId_Increment(count int) *__HomeFanout_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__HomeFanout_Updater) PostUserId(newVal int) *__HomeFanout_Updater {
	u.updates[" PostUserId = ? "] = newVal
	return u
}

func (u *__HomeFanout_Updater) PostUserId_Increment(count int) *__HomeFanout_Updater {
	if count > 0 {
		u.updates[" PostUserId = PostUserId+? "] = count
	}

	if count < 0 {
		u.updates[" PostUserId = PostUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__HomeFanout_Selector) OrderBy_OrderId_Desc() *__HomeFanout_Selector {
	u.orderBy = " ORDER BY OrderId DESC "
	return u
}

func (u *__HomeFanout_Selector) OrderBy_OrderId_Asc() *__HomeFanout_Selector {
	u.orderBy = " ORDER BY OrderId ASC "
	return u
}

func (u *__HomeFanout_Selector) Select_OrderId() *__HomeFanout_Selector {
	u.selectCol = "OrderId"
	return u
}

func (u *__HomeFanout_Selector) OrderBy_ForUserId_Desc() *__HomeFanout_Selector {
	u.orderBy = " ORDER BY ForUserId DESC "
	return u
}

func (u *__HomeFanout_Selector) OrderBy_ForUserId_Asc() *__HomeFanout_Selector {
	u.orderBy = " ORDER BY ForUserId ASC "
	return u
}

func (u *__HomeFanout_Selector) Select_ForUserId() *__HomeFanout_Selector {
	u.selectCol = "ForUserId"
	return u
}

func (u *__HomeFanout_Selector) OrderBy_PostId_Desc() *__HomeFanout_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__HomeFanout_Selector) OrderBy_PostId_Asc() *__HomeFanout_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__HomeFanout_Selector) Select_PostId() *__HomeFanout_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__HomeFanout_Selector) OrderBy_PostUserId_Desc() *__HomeFanout_Selector {
	u.orderBy = " ORDER BY PostUserId DESC "
	return u
}

func (u *__HomeFanout_Selector) OrderBy_PostUserId_Asc() *__HomeFanout_Selector {
	u.orderBy = " ORDER BY PostUserId ASC "
	return u
}

func (u *__HomeFanout_Selector) Select_PostUserId() *__HomeFanout_Selector {
	u.selectCol = "PostUserId"
	return u
}

func (u *__HomeFanout_Selector) Limit(num int) *__HomeFanout_Selector {
	u.limit = num
	return u
}

func (u *__HomeFanout_Selector) Offset(num int) *__HomeFanout_Selector {
	u.offset = num
	return u
}

func (u *__HomeFanout_Selector) Order_Rand() *__HomeFanout_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__HomeFanout_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_meta.home_fanout"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__HomeFanout_Selector) GetRow(db *sqlx.DB) (*HomeFanout, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, whereArgs)
	}

	row := &HomeFanout{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnHomeFanout_LoadOne(row)

	return row, nil
}

func (u *__HomeFanout_Selector) GetRows(db *sqlx.DB) ([]*HomeFanout, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*HomeFanout
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnHomeFanout_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__HomeFanout_Selector) GetRows2(db *sqlx.DB) ([]HomeFanout, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*HomeFanout
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnHomeFanout_LoadMany(rows)

	rows2 := make([]HomeFanout, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__HomeFanout_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__HomeFanout_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__HomeFanout_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__HomeFanout_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__HomeFanout_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_meta.home_fanout SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__HomeFanout_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_meta.home_fanout WHERE " + wheresStr

	// run query
	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  HomeFanout ////////////////

func MassInsert_HomeFanout(rows []HomeFanout, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun_meta.home_fanout (" +
		"OrderId, ForUserId, PostId, PostUserId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.OrderId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.PostUserId)

	}

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_HomeFanout(rows []HomeFanout, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun_meta.home_fanout (" +
		"OrderId, ForUserId, PostId, PostUserId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.OrderId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.PostUserId)

	}

	if LogTableSqlReq.HomeFanout {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.HomeFanout {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//
