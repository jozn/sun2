// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb_rpc_general.proto

package x

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RPC_General_Types struct {
}

func (m *RPC_General_Types) Reset()                    { *m = RPC_General_Types{} }
func (m *RPC_General_Types) String() string            { return proto.CompactTextString(m) }
func (*RPC_General_Types) ProtoMessage()               {}
func (*RPC_General_Types) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type RPC_General_Types_Echo struct {
}

func (m *RPC_General_Types_Echo) Reset()                    { *m = RPC_General_Types_Echo{} }
func (m *RPC_General_Types_Echo) String() string            { return proto.CompactTextString(m) }
func (*RPC_General_Types_Echo) ProtoMessage()               {}
func (*RPC_General_Types_Echo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

type RPC_General_Types_Echo_Param struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *RPC_General_Types_Echo_Param) Reset()         { *m = RPC_General_Types_Echo_Param{} }
func (m *RPC_General_Types_Echo_Param) String() string { return proto.CompactTextString(m) }
func (*RPC_General_Types_Echo_Param) ProtoMessage()    {}
func (*RPC_General_Types_Echo_Param) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 0, 0}
}

func (m *RPC_General_Types_Echo_Param) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type RPC_General_Types_Echo_Response struct {
	Done bool   `protobuf:"varint,1,opt,name=Done" json:"Done,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=Text" json:"Text,omitempty"`
}

func (m *RPC_General_Types_Echo_Response) Reset()         { *m = RPC_General_Types_Echo_Response{} }
func (m *RPC_General_Types_Echo_Response) String() string { return proto.CompactTextString(m) }
func (*RPC_General_Types_Echo_Response) ProtoMessage()    {}
func (*RPC_General_Types_Echo_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 0, 1}
}

func (m *RPC_General_Types_Echo_Response) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *RPC_General_Types_Echo_Response) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type RPC_General_Types_CheckUserName struct {
}

func (m *RPC_General_Types_CheckUserName) Reset()         { *m = RPC_General_Types_CheckUserName{} }
func (m *RPC_General_Types_CheckUserName) String() string { return proto.CompactTextString(m) }
func (*RPC_General_Types_CheckUserName) ProtoMessage()    {}
func (*RPC_General_Types_CheckUserName) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 1}
}

type RPC_General_Types_CheckUserName_Param struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
}

func (m *RPC_General_Types_CheckUserName_Param) Reset()         { *m = RPC_General_Types_CheckUserName_Param{} }
func (m *RPC_General_Types_CheckUserName_Param) String() string { return proto.CompactTextString(m) }
func (*RPC_General_Types_CheckUserName_Param) ProtoMessage()    {}
func (*RPC_General_Types_CheckUserName_Param) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 1, 0}
}

func (m *RPC_General_Types_CheckUserName_Param) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type RPC_General_Types_CheckUserName_Response struct {
	IsAvailable bool   `protobuf:"varint,1,opt,name=IsAvailable" json:"IsAvailable,omitempty"`
	ShowMessage string `protobuf:"bytes,2,opt,name=ShowMessage" json:"ShowMessage,omitempty"`
}

func (m *RPC_General_Types_CheckUserName_Response) Reset() {
	*m = RPC_General_Types_CheckUserName_Response{}
}
func (m *RPC_General_Types_CheckUserName_Response) String() string { return proto.CompactTextString(m) }
func (*RPC_General_Types_CheckUserName_Response) ProtoMessage()    {}
func (*RPC_General_Types_CheckUserName_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 1, 1}
}

func (m *RPC_General_Types_CheckUserName_Response) GetIsAvailable() bool {
	if m != nil {
		return m.IsAvailable
	}
	return false
}

func (m *RPC_General_Types_CheckUserName_Response) GetShowMessage() string {
	if m != nil {
		return m.ShowMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*RPC_General_Types)(nil), "RPC_General_Types")
	proto.RegisterType((*RPC_General_Types_Echo)(nil), "RPC_General_Types.Echo")
	proto.RegisterType((*RPC_General_Types_Echo_Param)(nil), "RPC_General_Types.Echo.Param")
	proto.RegisterType((*RPC_General_Types_Echo_Response)(nil), "RPC_General_Types.Echo.Response")
	proto.RegisterType((*RPC_General_Types_CheckUserName)(nil), "RPC_General_Types.CheckUserName")
	proto.RegisterType((*RPC_General_Types_CheckUserName_Param)(nil), "RPC_General_Types.CheckUserName.Param")
	proto.RegisterType((*RPC_General_Types_CheckUserName_Response)(nil), "RPC_General_Types.CheckUserName.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPC_General service

type RPC_GeneralClient interface {
	Echo(ctx context.Context, in *RPC_General_Types_Echo_Param, opts ...grpc.CallOption) (*RPC_General_Types_Echo_Response, error)
	CheckUserName(ctx context.Context, in *RPC_General_Types_CheckUserName_Param, opts ...grpc.CallOption) (*RPC_General_Types_CheckUserName_Response, error)
}

type rPC_GeneralClient struct {
	cc *grpc.ClientConn
}

func NewRPC_GeneralClient(cc *grpc.ClientConn) RPC_GeneralClient {
	return &rPC_GeneralClient{cc}
}

func (c *rPC_GeneralClient) Echo(ctx context.Context, in *RPC_General_Types_Echo_Param, opts ...grpc.CallOption) (*RPC_General_Types_Echo_Response, error) {
	out := new(RPC_General_Types_Echo_Response)
	err := grpc.Invoke(ctx, "/RPC_General/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPC_GeneralClient) CheckUserName(ctx context.Context, in *RPC_General_Types_CheckUserName_Param, opts ...grpc.CallOption) (*RPC_General_Types_CheckUserName_Response, error) {
	out := new(RPC_General_Types_CheckUserName_Response)
	err := grpc.Invoke(ctx, "/RPC_General/CheckUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPC_General service

type RPC_GeneralServer interface {
	Echo(context.Context, *RPC_General_Types_Echo_Param) (*RPC_General_Types_Echo_Response, error)
	CheckUserName(context.Context, *RPC_General_Types_CheckUserName_Param) (*RPC_General_Types_CheckUserName_Response, error)
}

func RegisterRPC_GeneralServer(s *grpc.Server, srv RPC_GeneralServer) {
	s.RegisterService(&_RPC_General_serviceDesc, srv)
}

func _RPC_General_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPC_General_Types_Echo_Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_GeneralServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_General/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_GeneralServer).Echo(ctx, req.(*RPC_General_Types_Echo_Param))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_General_CheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPC_General_Types_CheckUserName_Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_GeneralServer).CheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_General/CheckUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_GeneralServer).CheckUserName(ctx, req.(*RPC_General_Types_CheckUserName_Param))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_General_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RPC_General",
	HandlerType: (*RPC_GeneralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _RPC_General_Echo_Handler,
		},
		{
			MethodName: "CheckUserName",
			Handler:    _RPC_General_CheckUserName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_rpc_general.proto",
}

func init() { proto.RegisterFile("pb_rpc_general.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x48, 0x8a, 0x2f,
	0x2a, 0x48, 0x8e, 0x4f, 0x4f, 0xcd, 0x4b, 0x2d, 0x4a, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x57, 0xfa, 0xcc, 0xc8, 0x25, 0x18, 0x14, 0xe0, 0x1c, 0xef, 0x0e, 0x11, 0x8d, 0x0f, 0xa9, 0x2c,
	0x48, 0x2d, 0x96, 0x0a, 0xe7, 0x62, 0x71, 0x4d, 0xce, 0xc8, 0x97, 0x92, 0xe6, 0x62, 0x0d, 0x48,
	0x2c, 0x4a, 0xcc, 0x15, 0x12, 0xe2, 0x62, 0x09, 0x49, 0xad, 0x28, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x02, 0xb3, 0xa5, 0x8c, 0xb8, 0x38, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0x41, 0xf2, 0x2e, 0xf9, 0x79, 0xa9, 0x60, 0x79, 0x8e, 0x20, 0x30, 0x1b, 0xae, 0x87, 0x09, 0x49,
	0x4f, 0x0b, 0x23, 0x17, 0xaf, 0x73, 0x46, 0x6a, 0x72, 0x76, 0x68, 0x71, 0x6a, 0x91, 0x5f, 0x62,
	0x6e, 0xaa, 0x94, 0x32, 0xcc, 0x0a, 0x29, 0x2e, 0x0e, 0x98, 0x20, 0xd4, 0x1a, 0x38, 0x5f, 0xca,
	0x0f, 0xc9, 0x2a, 0x05, 0x2e, 0x6e, 0xcf, 0x62, 0xc7, 0xb2, 0xc4, 0xcc, 0x9c, 0xc4, 0xa4, 0x1c,
	0x98, 0x8d, 0xc8, 0x42, 0x20, 0x15, 0xc1, 0x19, 0xf9, 0xe5, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9,
	0xa9, 0x50, 0xfb, 0x91, 0x85, 0x8c, 0x76, 0x31, 0x72, 0x71, 0x23, 0xf9, 0x5a, 0xc8, 0x1d, 0xe2,
	0x5f, 0x21, 0x59, 0x3d, 0x8c, 0xb0, 0xd0, 0x03, 0x49, 0xe8, 0x81, 0x9d, 0x28, 0xa5, 0x80, 0x4b,
	0x1a, 0xee, 0xb8, 0x24, 0x34, 0xef, 0x09, 0xa9, 0x61, 0xd1, 0x82, 0xa2, 0x02, 0x6a, 0xb4, 0x26,
	0x41, 0x75, 0x30, 0x3b, 0x9c, 0x04, 0xb9, 0x38, 0x32, 0x8b, 0xf4, 0x72, 0x8b, 0xf5, 0x0a, 0x92,
	0x3c, 0x98, 0x03, 0x18, 0xa3, 0x18, 0x2b, 0x92, 0xd8, 0xc0, 0x91, 0x69, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xf4, 0x62, 0x86, 0x0d, 0xe4, 0x01, 0x00, 0x00,
}
