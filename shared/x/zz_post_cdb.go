package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// PostCdb represents a row from 'suncdb.post_cdb'.

// Manualy copy this to project
type PostCdb__ struct {
	PostId           int    `json:"post_id"`            // post_id -
	UserId           int    `json:"user_id"`            // user_id -
	PostTypeEnum     int    `json:"post_type_enum"`     // post_type_enum -
	PostCategoryEnum int    `json:"post_category_enum"` // post_category_enum -
	MediaId          int    `json:"media_id"`           // media_id -
	PostKey          string `json:"post_key"`           // post_key -
	Text             string `json:"text"`               // text -
	RichText         string `json:"rich_text"`          // rich_text -
	MediaCount       int    `json:"media_count"`        // media_count -
	SharedTo         int    `json:"shared_to"`          // shared_to -
	DisableComment   int    `json:"disable_comment"`    // disable_comment -
	Source           int    `json:"source"`             // source -
	HasTag           int    `json:"has_tag"`            // has_tag -
	Seq              int    `json:"seq"`                // seq -
	CommentsCount    int    `json:"comments_count"`     // comments_count -
	LikesCount       int    `json:"likes_count"`        // likes_count -
	ViewsCount       int    `json:"views_count"`        // views_count -
	EditedTime       int    `json:"edited_time"`        // edited_time -
	CreatedTime      int    `json:"created_time"`       // created_time -
	ReSharedPostId   int    `json:"re_shared_post_id"`  // re_shared_post_id -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PostCdb exists in the database.
func (pc *PostCdb) Exists() bool {
	return pc._exists
}

// Deleted provides information if the PostCdb has been deleted from the database.
func (pc *PostCdb) Deleted() bool {
	return pc._deleted
}

// Insert inserts the PostCdb to the database.
func (pc *PostCdb) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO suncdb.post_cdb (` +
		`post_id, user_id, post_type_enum, post_category_enum, media_id, post_key, text, rich_text, media_count, shared_to, disable_comment, source, has_tag, seq, comments_count, likes_count, views_count, edited_time, created_time, re_shared_post_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20` +
		`)`

	// run query
	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, pc.PostId, pc.UserId, pc.PostTypeEnum, pc.PostCategoryEnum, pc.MediaId, pc.PostKey, pc.Text, pc.RichText, pc.MediaCount, pc.SharedTo, pc.DisableComment, pc.Source, pc.HasTag, pc.Seq, pc.CommentsCount, pc.LikesCount, pc.ViewsCount, pc.EditedTime, pc.CreatedTime, pc.ReSharedPostId)
	}
	_, err = db.Exec(sqlstr, pc.PostId, pc.UserId, pc.PostTypeEnum, pc.PostCategoryEnum, pc.MediaId, pc.PostKey, pc.Text, pc.RichText, pc.MediaCount, pc.SharedTo, pc.DisableComment, pc.Source, pc.HasTag, pc.Seq, pc.CommentsCount, pc.LikesCount, pc.ViewsCount, pc.EditedTime, pc.CreatedTime, pc.ReSharedPostId)
	if err != nil {
		return err
	}

	// set existence
	pc._exists = true

	OnPostCdb_AfterInsert(pc)

	return nil
}

// Insert inserts the PostCdb to the database.
func (pc *PostCdb) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `UPSERT INTO suncdb.post_cdb (` +
		`post_id, user_id, post_type_enum, post_category_enum, media_id, post_key, text, rich_text, media_count, shared_to, disable_comment, source, has_tag, seq, comments_count, likes_count, views_count, edited_time, created_time, re_shared_post_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, pc.PostId, pc.UserId, pc.PostTypeEnum, pc.PostCategoryEnum, pc.MediaId, pc.PostKey, pc.Text, pc.RichText, pc.MediaCount, pc.SharedTo, pc.DisableComment, pc.Source, pc.HasTag, pc.Seq, pc.CommentsCount, pc.LikesCount, pc.ViewsCount, pc.EditedTime, pc.CreatedTime, pc.ReSharedPostId)
	}
	_, err = db.Exec(sqlstr, pc.PostId, pc.UserId, pc.PostTypeEnum, pc.PostCategoryEnum, pc.MediaId, pc.PostKey, pc.Text, pc.RichText, pc.MediaCount, pc.SharedTo, pc.DisableComment, pc.Source, pc.HasTag, pc.Seq, pc.CommentsCount, pc.LikesCount, pc.ViewsCount, pc.EditedTime, pc.CreatedTime, pc.ReSharedPostId)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return err
	}

	pc._exists = true

	OnPostCdb_AfterInsert(pc)

	return nil
}

// Update updates the PostCdb in the database.
func (pc *PostCdb) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE suncdb.post_cdb SET ` +
		`user_id = $1, post_type_enum = $2, post_category_enum = $3, media_id = $4, post_key = $5, text = $6, rich_text = $7, media_count = $8, shared_to = $9, disable_comment = $10, source = $11, has_tag = $12, seq = $13, comments_count = $14, likes_count = $15, views_count = $16, edited_time = $17, created_time = $18, re_shared_post_id = $19` +
		` WHERE post_id = $20`

	// run query
	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, pc.UserId, pc.PostTypeEnum, pc.PostCategoryEnum, pc.MediaId, pc.PostKey, pc.Text, pc.RichText, pc.MediaCount, pc.SharedTo, pc.DisableComment, pc.Source, pc.HasTag, pc.Seq, pc.CommentsCount, pc.LikesCount, pc.ViewsCount, pc.EditedTime, pc.CreatedTime, pc.ReSharedPostId, pc.PostId)
	}
	_, err = db.Exec(sqlstr, pc.UserId, pc.PostTypeEnum, pc.PostCategoryEnum, pc.MediaId, pc.PostKey, pc.Text, pc.RichText, pc.MediaCount, pc.SharedTo, pc.DisableComment, pc.Source, pc.HasTag, pc.Seq, pc.CommentsCount, pc.LikesCount, pc.ViewsCount, pc.EditedTime, pc.CreatedTime, pc.ReSharedPostId, pc.PostId)

	if LogTableSqlReq.PostCdb {
		XOLogErr(err)
	}
	OnPostCdb_AfterUpdate(pc)

	return err
}

// Save saves the PostCdb to the database.
func (pc *PostCdb) Save(db XODB) error {
	if pc.Exists() {
		return pc.Update(db)
	}

	return pc.Replace(db)
}

// Delete deletes the PostCdb from the database.
func (pc *PostCdb) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return nil
	}

	// if deleted, bail
	if pc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM suncdb.post_cdb WHERE post_id = $1`

	// run query
	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, pc.PostId)
	}
	_, err = db.Exec(sqlstr, pc.PostId)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	pc._deleted = true

	OnPostCdb_AfterDelete(pc)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __PostCdb_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __PostCdb_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __PostCdb_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewPostCdb_Deleter() *__PostCdb_Deleter {
	d := __PostCdb_Deleter{whereSep: " AND "}
	return &d
}

func NewPostCdb_Updater() *__PostCdb_Updater {
	u := __PostCdb_Updater{whereSep: " AND "}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewPostCdb_Selector() *__PostCdb_Selector {
	u := __PostCdb_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__PostCdb_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__PostCdb_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__PostCdb_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PostCdb_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PostCdb_Deleter) Or() *__PostCdb_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PostCdb_Deleter) PostId_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) PostId_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) PostId_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) PostId_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostId_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostId_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostId_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostId_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostId_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) UserId_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " user_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) UserId_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " user_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) UserId_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " user_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) UserId_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) UserId_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) UserId_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) UserId_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) UserId_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) UserId_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) PostTypeEnum_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_type_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) PostTypeEnum_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_type_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) PostTypeEnum_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_type_enum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) PostTypeEnum_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostTypeEnum_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostTypeEnum_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostTypeEnum_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostTypeEnum_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostTypeEnum_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) PostCategoryEnum_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_category_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) PostCategoryEnum_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_category_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) PostCategoryEnum_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_category_enum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) PostCategoryEnum_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostCategoryEnum_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostCategoryEnum_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostCategoryEnum_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostCategoryEnum_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostCategoryEnum_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) MediaId_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) MediaId_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) MediaId_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) MediaId_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaId_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaId_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaId_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaId_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaId_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) MediaCount_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) MediaCount_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) MediaCount_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) MediaCount_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaCount_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaCount_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaCount_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaCount_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) MediaCount_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) SharedTo_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " shared_to IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) SharedTo_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " shared_to IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) SharedTo_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " shared_to NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) SharedTo_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) SharedTo_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) SharedTo_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) SharedTo_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) SharedTo_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) SharedTo_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) DisableComment_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " disable_comment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) DisableComment_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " disable_comment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) DisableComment_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " disable_comment NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) DisableComment_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) DisableComment_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) DisableComment_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) DisableComment_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) DisableComment_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) DisableComment_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) Source_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " source IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) Source_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " source IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) Source_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " source NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) Source_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Source_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Source_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Source_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Source_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Source_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) HasTag_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " has_tag IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) HasTag_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " has_tag IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) HasTag_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " has_tag NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) HasTag_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) HasTag_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) HasTag_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) HasTag_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) HasTag_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) HasTag_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) Seq_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) Seq_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) Seq_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) Seq_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Seq_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Seq_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Seq_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Seq_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Seq_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) CommentsCount_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " comments_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) CommentsCount_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " comments_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) CommentsCount_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " comments_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) CommentsCount_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CommentsCount_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CommentsCount_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CommentsCount_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CommentsCount_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CommentsCount_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) LikesCount_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " likes_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) LikesCount_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " likes_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) LikesCount_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " likes_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) LikesCount_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) LikesCount_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) LikesCount_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) LikesCount_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) LikesCount_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) LikesCount_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) ViewsCount_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " views_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) ViewsCount_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " views_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) ViewsCount_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " views_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) ViewsCount_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ViewsCount_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ViewsCount_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ViewsCount_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ViewsCount_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ViewsCount_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) EditedTime_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " edited_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) EditedTime_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " edited_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) EditedTime_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " edited_time NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) EditedTime_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) EditedTime_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) EditedTime_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) EditedTime_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) EditedTime_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) EditedTime_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) CreatedTime_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " created_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) CreatedTime_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " created_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) CreatedTime_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " created_time NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) CreatedTime_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CreatedTime_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CreatedTime_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CreatedTime_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CreatedTime_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) CreatedTime_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) ReSharedPostId_In(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " re_shared_post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) ReSharedPostId_Ins(ins ...int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " re_shared_post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) ReSharedPostId_NotIn(ins []int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " re_shared_post_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) ReSharedPostId_Eq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ReSharedPostId_NotEq(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ReSharedPostId_LT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ReSharedPostId_LE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ReSharedPostId_GT(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) ReSharedPostId_GE(val int) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__PostCdb_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PostCdb_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PostCdb_Updater) Or() *__PostCdb_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PostCdb_Updater) PostId_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) PostId_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) PostId_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) PostId_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostId_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostId_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostId_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostId_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostId_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) UserId_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " user_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) UserId_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " user_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) UserId_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " user_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) UserId_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) UserId_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) UserId_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) UserId_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) UserId_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) UserId_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) PostTypeEnum_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_type_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) PostTypeEnum_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_type_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) PostTypeEnum_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_type_enum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) PostTypeEnum_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostTypeEnum_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostTypeEnum_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostTypeEnum_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostTypeEnum_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostTypeEnum_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) PostCategoryEnum_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_category_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) PostCategoryEnum_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_category_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) PostCategoryEnum_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_category_enum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) PostCategoryEnum_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostCategoryEnum_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostCategoryEnum_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostCategoryEnum_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostCategoryEnum_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostCategoryEnum_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) MediaId_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) MediaId_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) MediaId_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) MediaId_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaId_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaId_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaId_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaId_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaId_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) MediaCount_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) MediaCount_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) MediaCount_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) MediaCount_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaCount_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaCount_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaCount_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaCount_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) MediaCount_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) SharedTo_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " shared_to IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) SharedTo_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " shared_to IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) SharedTo_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " shared_to NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) SharedTo_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) SharedTo_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) SharedTo_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) SharedTo_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) SharedTo_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) SharedTo_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) DisableComment_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " disable_comment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) DisableComment_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " disable_comment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) DisableComment_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " disable_comment NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) DisableComment_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) DisableComment_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) DisableComment_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) DisableComment_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) DisableComment_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) DisableComment_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) Source_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " source IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) Source_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " source IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) Source_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " source NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) Source_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Source_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Source_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Source_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Source_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Source_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) HasTag_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " has_tag IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) HasTag_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " has_tag IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) HasTag_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " has_tag NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) HasTag_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) HasTag_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) HasTag_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) HasTag_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) HasTag_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) HasTag_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) Seq_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) Seq_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) Seq_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) Seq_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Seq_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Seq_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Seq_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Seq_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Seq_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) CommentsCount_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " comments_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) CommentsCount_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " comments_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) CommentsCount_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " comments_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) CommentsCount_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CommentsCount_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CommentsCount_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CommentsCount_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CommentsCount_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CommentsCount_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) LikesCount_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " likes_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) LikesCount_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " likes_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) LikesCount_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " likes_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) LikesCount_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) LikesCount_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) LikesCount_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) LikesCount_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) LikesCount_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) LikesCount_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) ViewsCount_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " views_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) ViewsCount_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " views_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) ViewsCount_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " views_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) ViewsCount_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ViewsCount_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ViewsCount_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ViewsCount_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ViewsCount_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ViewsCount_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) EditedTime_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " edited_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) EditedTime_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " edited_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) EditedTime_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " edited_time NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) EditedTime_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) EditedTime_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) EditedTime_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) EditedTime_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) EditedTime_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) EditedTime_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) CreatedTime_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " created_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) CreatedTime_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " created_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) CreatedTime_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " created_time NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) CreatedTime_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CreatedTime_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CreatedTime_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CreatedTime_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CreatedTime_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) CreatedTime_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) ReSharedPostId_In(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " re_shared_post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) ReSharedPostId_Ins(ins ...int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " re_shared_post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) ReSharedPostId_NotIn(ins []int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " re_shared_post_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) ReSharedPostId_Eq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ReSharedPostId_NotEq(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ReSharedPostId_LT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ReSharedPostId_LE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ReSharedPostId_GT(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) ReSharedPostId_GE(val int) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__PostCdb_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PostCdb_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PostCdb_Selector) Or() *__PostCdb_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PostCdb_Selector) PostId_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) PostId_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) PostId_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) PostId_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostId_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostId_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostId_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostId_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostId_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) UserId_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " user_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) UserId_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " user_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) UserId_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " user_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) UserId_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) UserId_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) UserId_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) UserId_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) UserId_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) UserId_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " user_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) PostTypeEnum_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_type_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) PostTypeEnum_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_type_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) PostTypeEnum_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_type_enum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) PostTypeEnum_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostTypeEnum_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostTypeEnum_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostTypeEnum_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostTypeEnum_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostTypeEnum_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_type_enum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) PostCategoryEnum_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_category_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) PostCategoryEnum_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_category_enum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) PostCategoryEnum_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_category_enum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) PostCategoryEnum_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostCategoryEnum_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostCategoryEnum_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostCategoryEnum_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostCategoryEnum_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostCategoryEnum_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_category_enum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) MediaId_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) MediaId_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) MediaId_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) MediaId_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaId_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaId_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaId_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaId_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaId_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) MediaCount_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) MediaCount_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) MediaCount_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " media_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) MediaCount_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaCount_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaCount_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaCount_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaCount_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) MediaCount_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " media_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) SharedTo_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " shared_to IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) SharedTo_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " shared_to IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) SharedTo_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " shared_to NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) SharedTo_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) SharedTo_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) SharedTo_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) SharedTo_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) SharedTo_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) SharedTo_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " shared_to >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) DisableComment_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " disable_comment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) DisableComment_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " disable_comment IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) DisableComment_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " disable_comment NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) DisableComment_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) DisableComment_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) DisableComment_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) DisableComment_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) DisableComment_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) DisableComment_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " disable_comment >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) Source_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " source IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) Source_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " source IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) Source_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " source NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) Source_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Source_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Source_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Source_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Source_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Source_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " source >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) HasTag_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " has_tag IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) HasTag_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " has_tag IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) HasTag_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " has_tag NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) HasTag_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) HasTag_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) HasTag_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) HasTag_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) HasTag_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) HasTag_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " has_tag >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) Seq_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) Seq_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) Seq_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) Seq_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Seq_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Seq_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Seq_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Seq_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Seq_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) CommentsCount_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " comments_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) CommentsCount_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " comments_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) CommentsCount_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " comments_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) CommentsCount_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CommentsCount_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CommentsCount_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CommentsCount_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CommentsCount_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CommentsCount_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " comments_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) LikesCount_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " likes_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) LikesCount_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " likes_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) LikesCount_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " likes_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) LikesCount_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) LikesCount_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) LikesCount_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) LikesCount_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) LikesCount_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) LikesCount_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " likes_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) ViewsCount_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " views_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) ViewsCount_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " views_count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) ViewsCount_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " views_count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) ViewsCount_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ViewsCount_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ViewsCount_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ViewsCount_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ViewsCount_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ViewsCount_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " views_count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) EditedTime_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " edited_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) EditedTime_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " edited_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) EditedTime_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " edited_time NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) EditedTime_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) EditedTime_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) EditedTime_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) EditedTime_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) EditedTime_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) EditedTime_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " edited_time >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) CreatedTime_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " created_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) CreatedTime_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " created_time IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) CreatedTime_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " created_time NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) CreatedTime_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CreatedTime_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CreatedTime_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CreatedTime_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CreatedTime_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) CreatedTime_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " created_time >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) ReSharedPostId_In(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " re_shared_post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) ReSharedPostId_Ins(ins ...int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " re_shared_post_id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) ReSharedPostId_NotIn(ins []int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " re_shared_post_id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) ReSharedPostId_Eq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ReSharedPostId_NotEq(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ReSharedPostId_LT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ReSharedPostId_LE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ReSharedPostId_GT(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) ReSharedPostId_GE(val int) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " re_shared_post_id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__PostCdb_Deleter) PostKey_In(ins []string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_key IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) PostKey_NotIn(ins []string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_key NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostCdb_Deleter) PostKey_Like(val string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_key LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) PostKey_Eq(val string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_key = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) PostKey_NotEq(val string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_key != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) Text_In(ins []string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " text IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) Text_NotIn(ins []string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " text NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostCdb_Deleter) Text_Like(val string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " text LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) Text_Eq(val string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " text = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) Text_NotEq(val string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " text != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Deleter) RichText_In(ins []string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " rich_text IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Deleter) RichText_NotIn(ins []string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " rich_text NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostCdb_Deleter) RichText_Like(val string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " rich_text LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Deleter) RichText_Eq(val string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " rich_text = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Deleter) RichText_NotEq(val string) *__PostCdb_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " rich_text != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PostCdb_Updater) PostKey_In(ins []string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_key IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) PostKey_NotIn(ins []string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_key NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostCdb_Updater) PostKey_Like(val string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_key LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) PostKey_Eq(val string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_key = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) PostKey_NotEq(val string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_key != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) Text_In(ins []string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " text IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) Text_NotIn(ins []string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " text NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostCdb_Updater) Text_Like(val string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " text LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) Text_Eq(val string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " text = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) Text_NotEq(val string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " text != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Updater) RichText_In(ins []string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " rich_text IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Updater) RichText_NotIn(ins []string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " rich_text NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostCdb_Updater) RichText_Like(val string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " rich_text LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Updater) RichText_Eq(val string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " rich_text = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Updater) RichText_NotEq(val string) *__PostCdb_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " rich_text != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PostCdb_Selector) PostKey_In(ins []string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_key IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) PostKey_NotIn(ins []string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " post_key NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostCdb_Selector) PostKey_Like(val string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_key LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) PostKey_Eq(val string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_key = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) PostKey_NotEq(val string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " post_key != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) Text_In(ins []string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " text IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) Text_NotIn(ins []string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " text NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostCdb_Selector) Text_Like(val string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " text LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) Text_Eq(val string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " text = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) Text_NotEq(val string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " text != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PostCdb_Selector) RichText_In(ins []string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " rich_text IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostCdb_Selector) RichText_NotIn(ins []string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " rich_text NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostCdb_Selector) RichText_Like(val string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " rich_text LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostCdb_Selector) RichText_Eq(val string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " rich_text = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostCdb_Selector) RichText_NotEq(val string) *__PostCdb_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " rich_text != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PostCdb_Updater) PostId(newVal int) *__PostCdb_Updater {
	up := updateCol{" post_id = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" post_id = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) PostId_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" post_id = post_id+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" post_id = post_id+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" post_id = post_id- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" post_id = post_id- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) UserId(newVal int) *__PostCdb_Updater {
	up := updateCol{" user_id = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" user_id = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) UserId_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" user_id = user_id+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" user_id = user_id+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" user_id = user_id- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" user_id = user_id- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) PostTypeEnum(newVal int) *__PostCdb_Updater {
	up := updateCol{" post_type_enum = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" post_type_enum = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) PostTypeEnum_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" post_type_enum = post_type_enum+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" post_type_enum = post_type_enum+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" post_type_enum = post_type_enum- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" post_type_enum = post_type_enum- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) PostCategoryEnum(newVal int) *__PostCdb_Updater {
	up := updateCol{" post_category_enum = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" post_category_enum = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) PostCategoryEnum_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" post_category_enum = post_category_enum+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" post_category_enum = post_category_enum+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" post_category_enum = post_category_enum- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" post_category_enum = post_category_enum- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) MediaId(newVal int) *__PostCdb_Updater {
	up := updateCol{" media_id = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" media_id = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) MediaId_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" media_id = media_id+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" media_id = media_id+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" media_id = media_id- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" media_id = media_id- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__PostCdb_Updater) PostKey(newVal string) *__PostCdb_Updater {
	up := updateCol{"post_key = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" post_key = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__PostCdb_Updater) Text(newVal string) *__PostCdb_Updater {
	up := updateCol{"text = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" text = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__PostCdb_Updater) RichText(newVal string) *__PostCdb_Updater {
	up := updateCol{"rich_text = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" rich_text = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__PostCdb_Updater) MediaCount(newVal int) *__PostCdb_Updater {
	up := updateCol{" media_count = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" media_count = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) MediaCount_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" media_count = media_count+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" media_count = media_count+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" media_count = media_count- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" media_count = media_count- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) SharedTo(newVal int) *__PostCdb_Updater {
	up := updateCol{" shared_to = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" shared_to = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) SharedTo_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" shared_to = shared_to+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" shared_to = shared_to+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" shared_to = shared_to- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" shared_to = shared_to- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) DisableComment(newVal int) *__PostCdb_Updater {
	up := updateCol{" disable_comment = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" disable_comment = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) DisableComment_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" disable_comment = disable_comment+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" disable_comment = disable_comment+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" disable_comment = disable_comment- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" disable_comment = disable_comment- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) Source(newVal int) *__PostCdb_Updater {
	up := updateCol{" source = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" source = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) Source_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" source = source+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" source = source+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" source = source- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" source = source- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) HasTag(newVal int) *__PostCdb_Updater {
	up := updateCol{" has_tag = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" has_tag = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) HasTag_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" has_tag = has_tag+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" has_tag = has_tag+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" has_tag = has_tag- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" has_tag = has_tag- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) Seq(newVal int) *__PostCdb_Updater {
	up := updateCol{" seq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" seq = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) Seq_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" seq = seq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" seq = seq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" seq = seq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" seq = seq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) CommentsCount(newVal int) *__PostCdb_Updater {
	up := updateCol{" comments_count = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" comments_count = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) CommentsCount_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" comments_count = comments_count+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" comments_count = comments_count+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" comments_count = comments_count- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" comments_count = comments_count- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) LikesCount(newVal int) *__PostCdb_Updater {
	up := updateCol{" likes_count = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" likes_count = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) LikesCount_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" likes_count = likes_count+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" likes_count = likes_count+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" likes_count = likes_count- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" likes_count = likes_count- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) ViewsCount(newVal int) *__PostCdb_Updater {
	up := updateCol{" views_count = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" views_count = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) ViewsCount_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" views_count = views_count+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" views_count = views_count+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" views_count = views_count- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" views_count = views_count- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) EditedTime(newVal int) *__PostCdb_Updater {
	up := updateCol{" edited_time = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" edited_time = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) EditedTime_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" edited_time = edited_time+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" edited_time = edited_time+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" edited_time = edited_time- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" edited_time = edited_time- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) CreatedTime(newVal int) *__PostCdb_Updater {
	up := updateCol{" created_time = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" created_time = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) CreatedTime_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" created_time = created_time+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" created_time = created_time+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" created_time = created_time- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" created_time = created_time- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PostCdb_Updater) ReSharedPostId(newVal int) *__PostCdb_Updater {
	up := updateCol{" re_shared_post_id = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" re_shared_post_id = " + u.nextDollar()] = newVal
	return u
}

func (u *__PostCdb_Updater) ReSharedPostId_Increment(count int) *__PostCdb_Updater {
	if count > 0 {
		up := updateCol{" re_shared_post_id = re_shared_post_id+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" re_shared_post_id = re_shared_post_id+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" re_shared_post_id = re_shared_post_id- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" re_shared_post_id = re_shared_post_id- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PostCdb_Selector) OrderBy_PostId_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY post_id DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_PostId_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY post_id ASC "
	return u
}

func (u *__PostCdb_Selector) Select_PostId() *__PostCdb_Selector {
	u.selectCol = "post_id"
	return u
}

func (u *__PostCdb_Selector) OrderBy_UserId_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY user_id DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_UserId_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY user_id ASC "
	return u
}

func (u *__PostCdb_Selector) Select_UserId() *__PostCdb_Selector {
	u.selectCol = "user_id"
	return u
}

func (u *__PostCdb_Selector) OrderBy_PostTypeEnum_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY post_type_enum DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_PostTypeEnum_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY post_type_enum ASC "
	return u
}

func (u *__PostCdb_Selector) Select_PostTypeEnum() *__PostCdb_Selector {
	u.selectCol = "post_type_enum"
	return u
}

func (u *__PostCdb_Selector) OrderBy_PostCategoryEnum_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY post_category_enum DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_PostCategoryEnum_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY post_category_enum ASC "
	return u
}

func (u *__PostCdb_Selector) Select_PostCategoryEnum() *__PostCdb_Selector {
	u.selectCol = "post_category_enum"
	return u
}

func (u *__PostCdb_Selector) OrderBy_MediaId_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY media_id DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_MediaId_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY media_id ASC "
	return u
}

func (u *__PostCdb_Selector) Select_MediaId() *__PostCdb_Selector {
	u.selectCol = "media_id"
	return u
}

func (u *__PostCdb_Selector) OrderBy_PostKey_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY post_key DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_PostKey_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY post_key ASC "
	return u
}

func (u *__PostCdb_Selector) Select_PostKey() *__PostCdb_Selector {
	u.selectCol = "post_key"
	return u
}

func (u *__PostCdb_Selector) OrderBy_Text_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY text DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_Text_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY text ASC "
	return u
}

func (u *__PostCdb_Selector) Select_Text() *__PostCdb_Selector {
	u.selectCol = "text"
	return u
}

func (u *__PostCdb_Selector) OrderBy_RichText_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY rich_text DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_RichText_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY rich_text ASC "
	return u
}

func (u *__PostCdb_Selector) Select_RichText() *__PostCdb_Selector {
	u.selectCol = "rich_text"
	return u
}

func (u *__PostCdb_Selector) OrderBy_MediaCount_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY media_count DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_MediaCount_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY media_count ASC "
	return u
}

func (u *__PostCdb_Selector) Select_MediaCount() *__PostCdb_Selector {
	u.selectCol = "media_count"
	return u
}

func (u *__PostCdb_Selector) OrderBy_SharedTo_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY shared_to DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_SharedTo_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY shared_to ASC "
	return u
}

func (u *__PostCdb_Selector) Select_SharedTo() *__PostCdb_Selector {
	u.selectCol = "shared_to"
	return u
}

func (u *__PostCdb_Selector) OrderBy_DisableComment_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY disable_comment DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_DisableComment_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY disable_comment ASC "
	return u
}

func (u *__PostCdb_Selector) Select_DisableComment() *__PostCdb_Selector {
	u.selectCol = "disable_comment"
	return u
}

func (u *__PostCdb_Selector) OrderBy_Source_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY source DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_Source_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY source ASC "
	return u
}

func (u *__PostCdb_Selector) Select_Source() *__PostCdb_Selector {
	u.selectCol = "source"
	return u
}

func (u *__PostCdb_Selector) OrderBy_HasTag_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY has_tag DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_HasTag_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY has_tag ASC "
	return u
}

func (u *__PostCdb_Selector) Select_HasTag() *__PostCdb_Selector {
	u.selectCol = "has_tag"
	return u
}

func (u *__PostCdb_Selector) OrderBy_Seq_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY seq DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_Seq_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY seq ASC "
	return u
}

func (u *__PostCdb_Selector) Select_Seq() *__PostCdb_Selector {
	u.selectCol = "seq"
	return u
}

func (u *__PostCdb_Selector) OrderBy_CommentsCount_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY comments_count DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_CommentsCount_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY comments_count ASC "
	return u
}

func (u *__PostCdb_Selector) Select_CommentsCount() *__PostCdb_Selector {
	u.selectCol = "comments_count"
	return u
}

func (u *__PostCdb_Selector) OrderBy_LikesCount_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY likes_count DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_LikesCount_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY likes_count ASC "
	return u
}

func (u *__PostCdb_Selector) Select_LikesCount() *__PostCdb_Selector {
	u.selectCol = "likes_count"
	return u
}

func (u *__PostCdb_Selector) OrderBy_ViewsCount_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY views_count DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_ViewsCount_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY views_count ASC "
	return u
}

func (u *__PostCdb_Selector) Select_ViewsCount() *__PostCdb_Selector {
	u.selectCol = "views_count"
	return u
}

func (u *__PostCdb_Selector) OrderBy_EditedTime_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY edited_time DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_EditedTime_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY edited_time ASC "
	return u
}

func (u *__PostCdb_Selector) Select_EditedTime() *__PostCdb_Selector {
	u.selectCol = "edited_time"
	return u
}

func (u *__PostCdb_Selector) OrderBy_CreatedTime_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY created_time DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_CreatedTime_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY created_time ASC "
	return u
}

func (u *__PostCdb_Selector) Select_CreatedTime() *__PostCdb_Selector {
	u.selectCol = "created_time"
	return u
}

func (u *__PostCdb_Selector) OrderBy_ReSharedPostId_Desc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY re_shared_post_id DESC "
	return u
}

func (u *__PostCdb_Selector) OrderBy_ReSharedPostId_Asc() *__PostCdb_Selector {
	u.orderBy = " ORDER BY re_shared_post_id ASC "
	return u
}

func (u *__PostCdb_Selector) Select_ReSharedPostId() *__PostCdb_Selector {
	u.selectCol = "re_shared_post_id"
	return u
}

func (u *__PostCdb_Selector) Limit(num int) *__PostCdb_Selector {
	u.limit = num
	return u
}

func (u *__PostCdb_Selector) Offset(num int) *__PostCdb_Selector {
	u.offset = num
	return u
}

func (u *__PostCdb_Selector) Order_Rand() *__PostCdb_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PostCdb_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM suncdb.post_cdb"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PostCdb_Selector) GetRow(db *sqlx.DB) (*PostCdb, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, whereArgs)
	}

	row := &PostCdb{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnPostCdb_LoadOne(row)

	return row, nil
}

func (u *__PostCdb_Selector) GetRows(db *sqlx.DB) ([]*PostCdb, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*PostCdb
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPostCdb_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__PostCdb_Selector) GetRows2(db *sqlx.DB) ([]PostCdb, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*PostCdb
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPostCdb_LoadMany(rows)

	rows2 := make([]PostCdb, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__PostCdb_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__PostCdb_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PostCdb_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PostCdb_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PostCdb_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE suncdb.post_cdb SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__PostCdb_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM suncdb.post_cdb WHERE " + wheresStr

	// run query
	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PostCdb ////////////////

func MassInsert_PostCdb(rows []PostCdb, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(20, ln, false)
	// sql query
	sqlstr := "INSERT INTO suncdb.post_cdb (" +
		"post_id, user_id, post_type_enum, post_category_enum, media_id, post_key, text, rich_text, media_count, shared_to, disable_comment, source, has_tag, seq, comments_count, likes_count, views_count, edited_time, created_time, re_shared_post_id" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostTypeEnum)
		vals = append(vals, row.PostCategoryEnum)
		vals = append(vals, row.MediaId)
		vals = append(vals, row.PostKey)
		vals = append(vals, row.Text)
		vals = append(vals, row.RichText)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.SharedTo)
		vals = append(vals, row.DisableComment)
		vals = append(vals, row.Source)
		vals = append(vals, row.HasTag)
		vals = append(vals, row.Seq)
		vals = append(vals, row.CommentsCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ViewsCount)
		vals = append(vals, row.EditedTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.ReSharedPostId)

	}

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_PostCdb(rows []PostCdb, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(20, ln, false)
	// sql query
	sqlstr := "REPLACE INTO suncdb.post_cdb (" +
		"post_id, user_id, post_type_enum, post_category_enum, media_id, post_key, text, rich_text, media_count, shared_to, disable_comment, source, has_tag, seq, comments_count, likes_count, views_count, edited_time, created_time, re_shared_post_id" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostTypeEnum)
		vals = append(vals, row.PostCategoryEnum)
		vals = append(vals, row.MediaId)
		vals = append(vals, row.PostKey)
		vals = append(vals, row.Text)
		vals = append(vals, row.RichText)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.SharedTo)
		vals = append(vals, row.DisableComment)
		vals = append(vals, row.Source)
		vals = append(vals, row.HasTag)
		vals = append(vals, row.Seq)
		vals = append(vals, row.CommentsCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ViewsCount)
		vals = append(vals, row.EditedTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.ReSharedPostId)

	}

	if LogTableSqlReq.PostCdb {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PostCdb {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
