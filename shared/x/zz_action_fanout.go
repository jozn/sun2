package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// ActionFanout represents a row from 'sun_meta.action_fanout'.

// Manualy copy this to project
type ActionFanout__ struct {
	OrderId      int `json:"OrderId"`      // OrderId -
	ForUserId    int `json:"ForUserId"`    // ForUserId -
	ActionId     int `json:"ActionId"`     // ActionId -
	ActorUserId  int `json:"ActorUserId"`  // ActorUserId -
	Murmur64Hash int `json:"Murmur64Hash"` // Murmur64Hash -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ActionFanout exists in the database.
func (af *ActionFanout) Exists() bool {
	return af._exists
}

// Deleted provides information if the ActionFanout has been deleted from the database.
func (af *ActionFanout) Deleted() bool {
	return af._deleted
}

// Insert inserts the ActionFanout to the database.
func (af *ActionFanout) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if af._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_meta.action_fanout (` +
		`OrderId, ForUserId, ActionId, ActorUserId, Murmur64Hash` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, af.OrderId, af.ForUserId, af.ActionId, af.ActorUserId, af.Murmur64Hash)
	}
	_, err = db.Exec(sqlstr, af.OrderId, af.ForUserId, af.ActionId, af.ActorUserId, af.Murmur64Hash)
	if err != nil {
		return err
	}

	// set existence
	af._exists = true

	OnActionFanout_AfterInsert(af)

	return nil
}

// Insert inserts the ActionFanout to the database.
func (af *ActionFanout) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_meta.action_fanout (` +
		`OrderId, ForUserId, ActionId, ActorUserId, Murmur64Hash` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, af.OrderId, af.ForUserId, af.ActionId, af.ActorUserId, af.Murmur64Hash)
	}
	_, err = db.Exec(sqlstr, af.OrderId, af.ForUserId, af.ActionId, af.ActorUserId, af.Murmur64Hash)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return err
	}

	af._exists = true

	OnActionFanout_AfterInsert(af)

	return nil
}

// Update updates the ActionFanout in the database.
func (af *ActionFanout) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !af._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if af._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_meta.action_fanout SET ` +
		`ForUserId = ?, ActionId = ?, ActorUserId = ?, Murmur64Hash = ?` +
		` WHERE OrderId = ?`

	// run query
	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, af.ForUserId, af.ActionId, af.ActorUserId, af.Murmur64Hash, af.OrderId)
	}
	_, err = db.Exec(sqlstr, af.ForUserId, af.ActionId, af.ActorUserId, af.Murmur64Hash, af.OrderId)

	if LogTableSqlReq.ActionFanout {
		XOLogErr(err)
	}
	OnActionFanout_AfterUpdate(af)

	return err
}

// Save saves the ActionFanout to the database.
func (af *ActionFanout) Save(db XODB) error {
	if af.Exists() {
		return af.Update(db)
	}

	return af.Replace(db)
}

// Delete deletes the ActionFanout from the database.
func (af *ActionFanout) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !af._exists {
		return nil
	}

	// if deleted, bail
	if af._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_meta.action_fanout WHERE OrderId = ?`

	// run query
	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, af.OrderId)
	}
	_, err = db.Exec(sqlstr, af.OrderId)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	af._deleted = true

	OnActionFanout_AfterDelete(af)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __ActionFanout_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __ActionFanout_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __ActionFanout_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewActionFanout_Deleter() *__ActionFanout_Deleter {
	d := __ActionFanout_Deleter{whereSep: " AND "}
	return &d
}

func NewActionFanout_Updater() *__ActionFanout_Updater {
	u := __ActionFanout_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewActionFanout_Selector() *__ActionFanout_Selector {
	u := __ActionFanout_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__ActionFanout_Deleter) Or() *__ActionFanout_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__ActionFanout_Deleter) OrderId_In(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) OrderId_Ins(ins ...int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) OrderId_NotIn(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Deleter) OrderId_Eq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) OrderId_NotEq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) OrderId_LT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) OrderId_LE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) OrderId_GT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) OrderId_GE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Deleter) ForUserId_In(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) ForUserId_Ins(ins ...int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) ForUserId_NotIn(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Deleter) ForUserId_Eq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ForUserId_NotEq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ForUserId_LT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ForUserId_LE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ForUserId_GT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ForUserId_GE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Deleter) ActionId_In(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) ActionId_Ins(ins ...int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) ActionId_NotIn(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Deleter) ActionId_Eq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActionId_NotEq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActionId_LT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActionId_LE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActionId_GT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActionId_GE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Deleter) ActorUserId_In(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) ActorUserId_Ins(ins ...int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) ActorUserId_NotIn(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Deleter) ActorUserId_Eq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActorUserId_NotEq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActorUserId_LT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActorUserId_LE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActorUserId_GT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) ActorUserId_GE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Deleter) Murmur64Hash_In(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) Murmur64Hash_Ins(ins ...int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Deleter) Murmur64Hash_NotIn(ins []int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Deleter) Murmur64Hash_Eq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) Murmur64Hash_NotEq(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) Murmur64Hash_LT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) Murmur64Hash_LE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) Murmur64Hash_GT(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Deleter) Murmur64Hash_GE(val int) *__ActionFanout_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__ActionFanout_Updater) Or() *__ActionFanout_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__ActionFanout_Updater) OrderId_In(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) OrderId_Ins(ins ...int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) OrderId_NotIn(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Updater) OrderId_Eq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) OrderId_NotEq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) OrderId_LT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) OrderId_LE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) OrderId_GT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) OrderId_GE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Updater) ForUserId_In(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) ForUserId_Ins(ins ...int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) ForUserId_NotIn(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Updater) ForUserId_Eq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ForUserId_NotEq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ForUserId_LT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ForUserId_LE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ForUserId_GT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ForUserId_GE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Updater) ActionId_In(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) ActionId_Ins(ins ...int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) ActionId_NotIn(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Updater) ActionId_Eq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActionId_NotEq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActionId_LT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActionId_LE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActionId_GT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActionId_GE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Updater) ActorUserId_In(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) ActorUserId_Ins(ins ...int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) ActorUserId_NotIn(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Updater) ActorUserId_Eq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActorUserId_NotEq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActorUserId_LT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActorUserId_LE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActorUserId_GT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) ActorUserId_GE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Updater) Murmur64Hash_In(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) Murmur64Hash_Ins(ins ...int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Updater) Murmur64Hash_NotIn(ins []int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Updater) Murmur64Hash_Eq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) Murmur64Hash_NotEq(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) Murmur64Hash_LT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) Murmur64Hash_LE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) Murmur64Hash_GT(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Updater) Murmur64Hash_GE(val int) *__ActionFanout_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__ActionFanout_Selector) Or() *__ActionFanout_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__ActionFanout_Selector) OrderId_In(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) OrderId_Ins(ins ...int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) OrderId_NotIn(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Selector) OrderId_Eq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) OrderId_NotEq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) OrderId_LT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) OrderId_LE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) OrderId_GT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) OrderId_GE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Selector) ForUserId_In(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) ForUserId_Ins(ins ...int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) ForUserId_NotIn(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Selector) ForUserId_Eq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ForUserId_NotEq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ForUserId_LT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ForUserId_LE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ForUserId_GT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ForUserId_GE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Selector) ActionId_In(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) ActionId_Ins(ins ...int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) ActionId_NotIn(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Selector) ActionId_Eq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActionId_NotEq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActionId_LT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActionId_LE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActionId_GT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActionId_GE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Selector) ActorUserId_In(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) ActorUserId_Ins(ins ...int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) ActorUserId_NotIn(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Selector) ActorUserId_Eq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActorUserId_NotEq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActorUserId_LT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActorUserId_LE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActorUserId_GT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) ActorUserId_GE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__ActionFanout_Selector) Murmur64Hash_In(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) Murmur64Hash_Ins(ins ...int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__ActionFanout_Selector) Murmur64Hash_NotIn(ins []int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__ActionFanout_Selector) Murmur64Hash_Eq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) Murmur64Hash_NotEq(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) Murmur64Hash_LT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) Murmur64Hash_LE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) Murmur64Hash_GT(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__ActionFanout_Selector) Murmur64Hash_GE(val int) *__ActionFanout_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__ActionFanout_Updater) OrderId(newVal int) *__ActionFanout_Updater {
	u.updates[" OrderId = ? "] = newVal
	return u
}

func (u *__ActionFanout_Updater) OrderId_Increment(count int) *__ActionFanout_Updater {
	if count > 0 {
		u.updates[" OrderId = OrderId+? "] = count
	}

	if count < 0 {
		u.updates[" OrderId = OrderId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__ActionFanout_Updater) ForUserId(newVal int) *__ActionFanout_Updater {
	u.updates[" ForUserId = ? "] = newVal
	return u
}

func (u *__ActionFanout_Updater) ForUserId_Increment(count int) *__ActionFanout_Updater {
	if count > 0 {
		u.updates[" ForUserId = ForUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ForUserId = ForUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__ActionFanout_Updater) ActionId(newVal int) *__ActionFanout_Updater {
	u.updates[" ActionId = ? "] = newVal
	return u
}

func (u *__ActionFanout_Updater) ActionId_Increment(count int) *__ActionFanout_Updater {
	if count > 0 {
		u.updates[" ActionId = ActionId+? "] = count
	}

	if count < 0 {
		u.updates[" ActionId = ActionId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__ActionFanout_Updater) ActorUserId(newVal int) *__ActionFanout_Updater {
	u.updates[" ActorUserId = ? "] = newVal
	return u
}

func (u *__ActionFanout_Updater) ActorUserId_Increment(count int) *__ActionFanout_Updater {
	if count > 0 {
		u.updates[" ActorUserId = ActorUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ActorUserId = ActorUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__ActionFanout_Updater) Murmur64Hash(newVal int) *__ActionFanout_Updater {
	u.updates[" Murmur64Hash = ? "] = newVal
	return u
}

func (u *__ActionFanout_Updater) Murmur64Hash_Increment(count int) *__ActionFanout_Updater {
	if count > 0 {
		u.updates[" Murmur64Hash = Murmur64Hash+? "] = count
	}

	if count < 0 {
		u.updates[" Murmur64Hash = Murmur64Hash-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__ActionFanout_Selector) OrderBy_OrderId_Desc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY OrderId DESC "
	return u
}

func (u *__ActionFanout_Selector) OrderBy_OrderId_Asc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY OrderId ASC "
	return u
}

func (u *__ActionFanout_Selector) Select_OrderId() *__ActionFanout_Selector {
	u.selectCol = "OrderId"
	return u
}

func (u *__ActionFanout_Selector) OrderBy_ForUserId_Desc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY ForUserId DESC "
	return u
}

func (u *__ActionFanout_Selector) OrderBy_ForUserId_Asc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY ForUserId ASC "
	return u
}

func (u *__ActionFanout_Selector) Select_ForUserId() *__ActionFanout_Selector {
	u.selectCol = "ForUserId"
	return u
}

func (u *__ActionFanout_Selector) OrderBy_ActionId_Desc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY ActionId DESC "
	return u
}

func (u *__ActionFanout_Selector) OrderBy_ActionId_Asc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY ActionId ASC "
	return u
}

func (u *__ActionFanout_Selector) Select_ActionId() *__ActionFanout_Selector {
	u.selectCol = "ActionId"
	return u
}

func (u *__ActionFanout_Selector) OrderBy_ActorUserId_Desc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY ActorUserId DESC "
	return u
}

func (u *__ActionFanout_Selector) OrderBy_ActorUserId_Asc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY ActorUserId ASC "
	return u
}

func (u *__ActionFanout_Selector) Select_ActorUserId() *__ActionFanout_Selector {
	u.selectCol = "ActorUserId"
	return u
}

func (u *__ActionFanout_Selector) OrderBy_Murmur64Hash_Desc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY Murmur64Hash DESC "
	return u
}

func (u *__ActionFanout_Selector) OrderBy_Murmur64Hash_Asc() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY Murmur64Hash ASC "
	return u
}

func (u *__ActionFanout_Selector) Select_Murmur64Hash() *__ActionFanout_Selector {
	u.selectCol = "Murmur64Hash"
	return u
}

func (u *__ActionFanout_Selector) Limit(num int) *__ActionFanout_Selector {
	u.limit = num
	return u
}

func (u *__ActionFanout_Selector) Offset(num int) *__ActionFanout_Selector {
	u.offset = num
	return u
}

func (u *__ActionFanout_Selector) Order_Rand() *__ActionFanout_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__ActionFanout_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_meta.action_fanout"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__ActionFanout_Selector) GetRow(db *sqlx.DB) (*ActionFanout, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, whereArgs)
	}

	row := &ActionFanout{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnActionFanout_LoadOne(row)

	return row, nil
}

func (u *__ActionFanout_Selector) GetRows(db *sqlx.DB) ([]*ActionFanout, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*ActionFanout
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnActionFanout_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__ActionFanout_Selector) GetRows2(db *sqlx.DB) ([]ActionFanout, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*ActionFanout
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnActionFanout_LoadMany(rows)

	rows2 := make([]ActionFanout, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__ActionFanout_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__ActionFanout_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__ActionFanout_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__ActionFanout_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__ActionFanout_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_meta.action_fanout SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__ActionFanout_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_meta.action_fanout WHERE " + wheresStr

	// run query
	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  ActionFanout ////////////////

func MassInsert_ActionFanout(rows []ActionFanout, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun_meta.action_fanout (" +
		"OrderId, ForUserId, ActionId, ActorUserId, Murmur64Hash" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.OrderId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.ActionId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.Murmur64Hash)

	}

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_ActionFanout(rows []ActionFanout, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun_meta.action_fanout (" +
		"OrderId, ForUserId, ActionId, ActorUserId, Murmur64Hash" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.OrderId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.ActionId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.Murmur64Hash)

	}

	if LogTableSqlReq.ActionFanout {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.ActionFanout {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//
