package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// PushChat2 represents a row from 'sun_push.push_chat2'.

// Manualy copy this to project
type PushChat2__ struct {
	SyncId            int    `json:"SyncId"`            // SyncId -
	ToUserId          int    `json:"ToUserId"`          // ToUserId -
	ChatSyncTypeId    int    `json:"ChatSyncTypeId"`    // ChatSyncTypeId -
	RoomKey           string `json:"RoomKey"`           // RoomKey -
	ChatKey           string `json:"ChatKey"`           // ChatKey -
	FromHighMessageId int    `json:"FromHighMessageId"` // FromHighMessageId -
	ToLowMessageId    int    `json:"ToLowMessageId"`    // ToLowMessageId -
	MessageId         int    `json:"MessageId"`         // MessageId -
	MessagePb         []byte `json:"MessagePb"`         // MessagePb -
	MessageJson       string `json:"MessageJson"`       // MessageJson -
	CreatedTime       int    `json:"CreatedTime"`       // CreatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PushChat2 exists in the database.
func (pc *PushChat2) Exists() bool {
	return pc._exists
}

// Deleted provides information if the PushChat2 has been deleted from the database.
func (pc *PushChat2) Deleted() bool {
	return pc._deleted
}

// Insert inserts the PushChat2 to the database.
func (pc *PushChat2) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_push.push_chat2 (` +
		`SyncId, ToUserId, ChatSyncTypeId, RoomKey, ChatKey, FromHighMessageId, ToLowMessageId, MessageId, MessagePb, MessageJson, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, pc.SyncId, pc.ToUserId, pc.ChatSyncTypeId, pc.RoomKey, pc.ChatKey, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessagePb, pc.MessageJson, pc.CreatedTime)
	}
	_, err = db.Exec(sqlstr, pc.SyncId, pc.ToUserId, pc.ChatSyncTypeId, pc.RoomKey, pc.ChatKey, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessagePb, pc.MessageJson, pc.CreatedTime)
	if err != nil {
		return err
	}

	// set existence
	pc._exists = true

	OnPushChat2_AfterInsert(pc)

	return nil
}

// Insert inserts the PushChat2 to the database.
func (pc *PushChat2) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_push.push_chat2 (` +
		`SyncId, ToUserId, ChatSyncTypeId, RoomKey, ChatKey, FromHighMessageId, ToLowMessageId, MessageId, MessagePb, MessageJson, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, pc.SyncId, pc.ToUserId, pc.ChatSyncTypeId, pc.RoomKey, pc.ChatKey, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessagePb, pc.MessageJson, pc.CreatedTime)
	}
	_, err = db.Exec(sqlstr, pc.SyncId, pc.ToUserId, pc.ChatSyncTypeId, pc.RoomKey, pc.ChatKey, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessagePb, pc.MessageJson, pc.CreatedTime)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return err
	}

	pc._exists = true

	OnPushChat2_AfterInsert(pc)

	return nil
}

// Update updates the PushChat2 in the database.
func (pc *PushChat2) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_push.push_chat2 SET ` +
		`ToUserId = ?, ChatSyncTypeId = ?, RoomKey = ?, ChatKey = ?, FromHighMessageId = ?, ToLowMessageId = ?, MessageId = ?, MessagePb = ?, MessageJson = ?, CreatedTime = ?` +
		` WHERE SyncId = ?`

	// run query
	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, pc.ToUserId, pc.ChatSyncTypeId, pc.RoomKey, pc.ChatKey, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessagePb, pc.MessageJson, pc.CreatedTime, pc.SyncId)
	}
	_, err = db.Exec(sqlstr, pc.ToUserId, pc.ChatSyncTypeId, pc.RoomKey, pc.ChatKey, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessagePb, pc.MessageJson, pc.CreatedTime, pc.SyncId)

	if LogTableSqlReq.PushChat2 {
		XOLogErr(err)
	}
	OnPushChat2_AfterUpdate(pc)

	return err
}

// Save saves the PushChat2 to the database.
func (pc *PushChat2) Save(db XODB) error {
	if pc.Exists() {
		return pc.Update(db)
	}

	return pc.Replace(db)
}

// Delete deletes the PushChat2 from the database.
func (pc *PushChat2) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return nil
	}

	// if deleted, bail
	if pc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_push.push_chat2 WHERE SyncId = ?`

	// run query
	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, pc.SyncId)
	}
	_, err = db.Exec(sqlstr, pc.SyncId)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	pc._deleted = true

	OnPushChat2_AfterDelete(pc)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __PushChat2_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __PushChat2_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __PushChat2_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPushChat2_Deleter() *__PushChat2_Deleter {
	d := __PushChat2_Deleter{whereSep: " AND "}
	return &d
}

func NewPushChat2_Updater() *__PushChat2_Updater {
	u := __PushChat2_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPushChat2_Selector() *__PushChat2_Selector {
	u := __PushChat2_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__PushChat2_Deleter) Or() *__PushChat2_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PushChat2_Deleter) SyncId_In(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SyncId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) SyncId_Ins(ins ...int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SyncId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) SyncId_NotIn(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SyncId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) SyncId_Eq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) SyncId_NotEq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) SyncId_LT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) SyncId_LE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) SyncId_GT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) SyncId_GE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Deleter) ToUserId_In(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) ToUserId_Ins(ins ...int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) ToUserId_NotIn(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) ToUserId_Eq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToUserId_NotEq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToUserId_LT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToUserId_LE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToUserId_GT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToUserId_GE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Deleter) ChatSyncTypeId_In(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatSyncTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) ChatSyncTypeId_Ins(ins ...int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatSyncTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) ChatSyncTypeId_NotIn(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatSyncTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) ChatSyncTypeId_Eq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ChatSyncTypeId_NotEq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ChatSyncTypeId_LT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ChatSyncTypeId_LE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ChatSyncTypeId_GT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ChatSyncTypeId_GE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Deleter) FromHighMessageId_In(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) FromHighMessageId_Ins(ins ...int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) FromHighMessageId_NotIn(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) FromHighMessageId_Eq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) FromHighMessageId_NotEq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) FromHighMessageId_LT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) FromHighMessageId_LE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) FromHighMessageId_GT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) FromHighMessageId_GE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Deleter) ToLowMessageId_In(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) ToLowMessageId_Ins(ins ...int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) ToLowMessageId_NotIn(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) ToLowMessageId_Eq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToLowMessageId_NotEq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToLowMessageId_LT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToLowMessageId_LE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToLowMessageId_GT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ToLowMessageId_GE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Deleter) MessageId_In(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) MessageId_Ins(ins ...int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) MessageId_NotIn(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) MessageId_Eq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) MessageId_NotEq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) MessageId_LT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) MessageId_LE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) MessageId_GT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) MessageId_GE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Deleter) CreatedTime_In(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) CreatedTime_Ins(ins ...int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) CreatedTime_NotIn(ins []int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) CreatedTime_Eq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) CreatedTime_NotEq(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) CreatedTime_LT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) CreatedTime_LE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) CreatedTime_GT(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) CreatedTime_GE(val int) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PushChat2_Updater) Or() *__PushChat2_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PushChat2_Updater) SyncId_In(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SyncId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) SyncId_Ins(ins ...int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SyncId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) SyncId_NotIn(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SyncId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) SyncId_Eq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) SyncId_NotEq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) SyncId_LT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) SyncId_LE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) SyncId_GT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) SyncId_GE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Updater) ToUserId_In(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) ToUserId_Ins(ins ...int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) ToUserId_NotIn(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) ToUserId_Eq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToUserId_NotEq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToUserId_LT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToUserId_LE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToUserId_GT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToUserId_GE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Updater) ChatSyncTypeId_In(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatSyncTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) ChatSyncTypeId_Ins(ins ...int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatSyncTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) ChatSyncTypeId_NotIn(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatSyncTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) ChatSyncTypeId_Eq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ChatSyncTypeId_NotEq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ChatSyncTypeId_LT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ChatSyncTypeId_LE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ChatSyncTypeId_GT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ChatSyncTypeId_GE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Updater) FromHighMessageId_In(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) FromHighMessageId_Ins(ins ...int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) FromHighMessageId_NotIn(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) FromHighMessageId_Eq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) FromHighMessageId_NotEq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) FromHighMessageId_LT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) FromHighMessageId_LE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) FromHighMessageId_GT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) FromHighMessageId_GE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Updater) ToLowMessageId_In(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) ToLowMessageId_Ins(ins ...int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) ToLowMessageId_NotIn(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) ToLowMessageId_Eq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToLowMessageId_NotEq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToLowMessageId_LT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToLowMessageId_LE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToLowMessageId_GT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ToLowMessageId_GE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Updater) MessageId_In(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) MessageId_Ins(ins ...int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) MessageId_NotIn(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) MessageId_Eq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) MessageId_NotEq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) MessageId_LT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) MessageId_LE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) MessageId_GT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) MessageId_GE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Updater) CreatedTime_In(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) CreatedTime_Ins(ins ...int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) CreatedTime_NotIn(ins []int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) CreatedTime_Eq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) CreatedTime_NotEq(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) CreatedTime_LT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) CreatedTime_LE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) CreatedTime_GT(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) CreatedTime_GE(val int) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PushChat2_Selector) Or() *__PushChat2_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PushChat2_Selector) SyncId_In(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SyncId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) SyncId_Ins(ins ...int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SyncId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) SyncId_NotIn(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SyncId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) SyncId_Eq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) SyncId_NotEq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) SyncId_LT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) SyncId_LE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) SyncId_GT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) SyncId_GE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SyncId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Selector) ToUserId_In(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) ToUserId_Ins(ins ...int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) ToUserId_NotIn(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) ToUserId_Eq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToUserId_NotEq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToUserId_LT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToUserId_LE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToUserId_GT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToUserId_GE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Selector) ChatSyncTypeId_In(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatSyncTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) ChatSyncTypeId_Ins(ins ...int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatSyncTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) ChatSyncTypeId_NotIn(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatSyncTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) ChatSyncTypeId_Eq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ChatSyncTypeId_NotEq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ChatSyncTypeId_LT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ChatSyncTypeId_LE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ChatSyncTypeId_GT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ChatSyncTypeId_GE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatSyncTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Selector) FromHighMessageId_In(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) FromHighMessageId_Ins(ins ...int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) FromHighMessageId_NotIn(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) FromHighMessageId_Eq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) FromHighMessageId_NotEq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) FromHighMessageId_LT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) FromHighMessageId_LE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) FromHighMessageId_GT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) FromHighMessageId_GE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Selector) ToLowMessageId_In(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) ToLowMessageId_Ins(ins ...int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) ToLowMessageId_NotIn(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) ToLowMessageId_Eq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToLowMessageId_NotEq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToLowMessageId_LT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToLowMessageId_LE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToLowMessageId_GT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ToLowMessageId_GE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Selector) MessageId_In(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) MessageId_Ins(ins ...int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) MessageId_NotIn(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) MessageId_Eq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) MessageId_NotEq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) MessageId_LT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) MessageId_LE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) MessageId_GT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) MessageId_GE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Selector) CreatedTime_In(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) CreatedTime_Ins(ins ...int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) CreatedTime_NotIn(ins []int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) CreatedTime_Eq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) CreatedTime_NotEq(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) CreatedTime_LT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) CreatedTime_LE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) CreatedTime_GT(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) CreatedTime_GE(val int) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__PushChat2_Deleter) RoomKey_In(ins []string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) RoomKey_NotIn(ins []string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat2_Deleter) RoomKey_Like(val string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) RoomKey_Eq(val string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) RoomKey_NotEq(val string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Deleter) ChatKey_In(ins []string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) ChatKey_NotIn(ins []string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat2_Deleter) ChatKey_Like(val string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) ChatKey_Eq(val string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) ChatKey_NotEq(val string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Deleter) MessageJson_In(ins []string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Deleter) MessageJson_NotIn(ins []string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat2_Deleter) MessageJson_Like(val string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Deleter) MessageJson_Eq(val string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Deleter) MessageJson_NotEq(val string) *__PushChat2_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PushChat2_Updater) RoomKey_In(ins []string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) RoomKey_NotIn(ins []string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat2_Updater) RoomKey_Like(val string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) RoomKey_Eq(val string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) RoomKey_NotEq(val string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Updater) ChatKey_In(ins []string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) ChatKey_NotIn(ins []string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat2_Updater) ChatKey_Like(val string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) ChatKey_Eq(val string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) ChatKey_NotEq(val string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Updater) MessageJson_In(ins []string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Updater) MessageJson_NotIn(ins []string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat2_Updater) MessageJson_Like(val string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Updater) MessageJson_Eq(val string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Updater) MessageJson_NotEq(val string) *__PushChat2_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PushChat2_Selector) RoomKey_In(ins []string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) RoomKey_NotIn(ins []string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat2_Selector) RoomKey_Like(val string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) RoomKey_Eq(val string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) RoomKey_NotEq(val string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Selector) ChatKey_In(ins []string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) ChatKey_NotIn(ins []string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat2_Selector) ChatKey_Like(val string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) ChatKey_Eq(val string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) ChatKey_NotEq(val string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat2_Selector) MessageJson_In(ins []string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat2_Selector) MessageJson_NotIn(ins []string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat2_Selector) MessageJson_Like(val string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat2_Selector) MessageJson_Eq(val string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat2_Selector) MessageJson_NotEq(val string) *__PushChat2_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PushChat2_Updater) SyncId(newVal int) *__PushChat2_Updater {
	u.updates[" SyncId = ? "] = newVal
	return u
}

func (u *__PushChat2_Updater) SyncId_Increment(count int) *__PushChat2_Updater {
	if count > 0 {
		u.updates[" SyncId = SyncId+? "] = count
	}

	if count < 0 {
		u.updates[" SyncId = SyncId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat2_Updater) ToUserId(newVal int) *__PushChat2_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__PushChat2_Updater) ToUserId_Increment(count int) *__PushChat2_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat2_Updater) ChatSyncTypeId(newVal int) *__PushChat2_Updater {
	u.updates[" ChatSyncTypeId = ? "] = newVal
	return u
}

func (u *__PushChat2_Updater) ChatSyncTypeId_Increment(count int) *__PushChat2_Updater {
	if count > 0 {
		u.updates[" ChatSyncTypeId = ChatSyncTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" ChatSyncTypeId = ChatSyncTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__PushChat2_Updater) RoomKey(newVal string) *__PushChat2_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__PushChat2_Updater) ChatKey(newVal string) *__PushChat2_Updater {
	u.updates[" ChatKey = ? "] = newVal
	return u
}

//ints

func (u *__PushChat2_Updater) FromHighMessageId(newVal int) *__PushChat2_Updater {
	u.updates[" FromHighMessageId = ? "] = newVal
	return u
}

func (u *__PushChat2_Updater) FromHighMessageId_Increment(count int) *__PushChat2_Updater {
	if count > 0 {
		u.updates[" FromHighMessageId = FromHighMessageId+? "] = count
	}

	if count < 0 {
		u.updates[" FromHighMessageId = FromHighMessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat2_Updater) ToLowMessageId(newVal int) *__PushChat2_Updater {
	u.updates[" ToLowMessageId = ? "] = newVal
	return u
}

func (u *__PushChat2_Updater) ToLowMessageId_Increment(count int) *__PushChat2_Updater {
	if count > 0 {
		u.updates[" ToLowMessageId = ToLowMessageId+? "] = count
	}

	if count < 0 {
		u.updates[" ToLowMessageId = ToLowMessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat2_Updater) MessageId(newVal int) *__PushChat2_Updater {
	u.updates[" MessageId = ? "] = newVal
	return u
}

func (u *__PushChat2_Updater) MessageId_Increment(count int) *__PushChat2_Updater {
	if count > 0 {
		u.updates[" MessageId = MessageId+? "] = count
	}

	if count < 0 {
		u.updates[" MessageId = MessageId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

//ints

//string
func (u *__PushChat2_Updater) MessageJson(newVal string) *__PushChat2_Updater {
	u.updates[" MessageJson = ? "] = newVal
	return u
}

//ints

func (u *__PushChat2_Updater) CreatedTime(newVal int) *__PushChat2_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__PushChat2_Updater) CreatedTime_Increment(count int) *__PushChat2_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PushChat2_Selector) OrderBy_SyncId_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY SyncId DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_SyncId_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY SyncId ASC "
	return u
}

func (u *__PushChat2_Selector) Select_SyncId() *__PushChat2_Selector {
	u.selectCol = "SyncId"
	return u
}

func (u *__PushChat2_Selector) OrderBy_ToUserId_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_ToUserId_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__PushChat2_Selector) Select_ToUserId() *__PushChat2_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__PushChat2_Selector) OrderBy_ChatSyncTypeId_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY ChatSyncTypeId DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_ChatSyncTypeId_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY ChatSyncTypeId ASC "
	return u
}

func (u *__PushChat2_Selector) Select_ChatSyncTypeId() *__PushChat2_Selector {
	u.selectCol = "ChatSyncTypeId"
	return u
}

func (u *__PushChat2_Selector) OrderBy_RoomKey_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_RoomKey_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__PushChat2_Selector) Select_RoomKey() *__PushChat2_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__PushChat2_Selector) OrderBy_ChatKey_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY ChatKey DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_ChatKey_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY ChatKey ASC "
	return u
}

func (u *__PushChat2_Selector) Select_ChatKey() *__PushChat2_Selector {
	u.selectCol = "ChatKey"
	return u
}

func (u *__PushChat2_Selector) OrderBy_FromHighMessageId_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY FromHighMessageId DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_FromHighMessageId_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY FromHighMessageId ASC "
	return u
}

func (u *__PushChat2_Selector) Select_FromHighMessageId() *__PushChat2_Selector {
	u.selectCol = "FromHighMessageId"
	return u
}

func (u *__PushChat2_Selector) OrderBy_ToLowMessageId_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY ToLowMessageId DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_ToLowMessageId_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY ToLowMessageId ASC "
	return u
}

func (u *__PushChat2_Selector) Select_ToLowMessageId() *__PushChat2_Selector {
	u.selectCol = "ToLowMessageId"
	return u
}

func (u *__PushChat2_Selector) OrderBy_MessageId_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_MessageId_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__PushChat2_Selector) Select_MessageId() *__PushChat2_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__PushChat2_Selector) OrderBy_MessagePb_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY MessagePb DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_MessagePb_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY MessagePb ASC "
	return u
}

func (u *__PushChat2_Selector) Select_MessagePb() *__PushChat2_Selector {
	u.selectCol = "MessagePb"
	return u
}

func (u *__PushChat2_Selector) OrderBy_MessageJson_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY MessageJson DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_MessageJson_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY MessageJson ASC "
	return u
}

func (u *__PushChat2_Selector) Select_MessageJson() *__PushChat2_Selector {
	u.selectCol = "MessageJson"
	return u
}

func (u *__PushChat2_Selector) OrderBy_CreatedTime_Desc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__PushChat2_Selector) OrderBy_CreatedTime_Asc() *__PushChat2_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__PushChat2_Selector) Select_CreatedTime() *__PushChat2_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__PushChat2_Selector) Limit(num int) *__PushChat2_Selector {
	u.limit = num
	return u
}

func (u *__PushChat2_Selector) Offset(num int) *__PushChat2_Selector {
	u.offset = num
	return u
}

func (u *__PushChat2_Selector) Order_Rand() *__PushChat2_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PushChat2_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_push.push_chat2"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PushChat2_Selector) GetRow(db *sqlx.DB) (*PushChat2, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, whereArgs)
	}

	row := &PushChat2{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnPushChat2_LoadOne(row)

	return row, nil
}

func (u *__PushChat2_Selector) GetRows(db *sqlx.DB) ([]*PushChat2, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*PushChat2
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPushChat2_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__PushChat2_Selector) GetRows2(db *sqlx.DB) ([]PushChat2, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*PushChat2
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPushChat2_LoadMany(rows)

	rows2 := make([]PushChat2, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__PushChat2_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__PushChat2_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PushChat2_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PushChat2_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PushChat2_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_push.push_chat2 SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__PushChat2_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_push.push_chat2 WHERE " + wheresStr

	// run query
	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PushChat2 ////////////////

func MassInsert_PushChat2(rows []PushChat2, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun_push.push_chat2 (" +
		"SyncId, ToUserId, ChatSyncTypeId, RoomKey, ChatKey, FromHighMessageId, ToLowMessageId, MessageId, MessagePb, MessageJson, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.SyncId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.ChatSyncTypeId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.FromHighMessageId)
		vals = append(vals, row.ToLowMessageId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.MessagePb)
		vals = append(vals, row.MessageJson)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_PushChat2(rows []PushChat2, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun_push.push_chat2 (" +
		"SyncId, ToUserId, ChatSyncTypeId, RoomKey, ChatKey, FromHighMessageId, ToLowMessageId, MessageId, MessagePb, MessageJson, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.SyncId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.ChatSyncTypeId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.FromHighMessageId)
		vals = append(vals, row.ToLowMessageId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.MessagePb)
		vals = append(vals, row.MessageJson)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.PushChat2 {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PushChat2 {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//
