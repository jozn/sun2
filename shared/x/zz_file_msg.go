package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// FileMsg represents a row from 'sun_file.file_msg'.

// Manualy copy this to project
type FileMsg__ struct {
	Id         int    `json:"Id"`         // Id -
	AccessHash int    `json:"AccessHash"` // AccessHash -
	FileType   int    `json:"FileType"`   // FileType -
	Width      int    `json:"Width"`      // Width -
	Height     int    `json:"Height"`     // Height -
	Extension  string `json:"Extension"`  // Extension -
	UserId     int    `json:"UserId"`     // UserId -
	DataThumb  []byte `json:"DataThumb"`  // DataThumb -
	Data       []byte `json:"Data"`       // Data -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FileMsg exists in the database.
func (fm *FileMsg) Exists() bool {
	return fm._exists
}

// Deleted provides information if the FileMsg has been deleted from the database.
func (fm *FileMsg) Deleted() bool {
	return fm._deleted
}

// Insert inserts the FileMsg to the database.
func (fm *FileMsg) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_file.file_msg (` +
		`Id, AccessHash, FileType, Width, Height, Extension, UserId, DataThumb, Data` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, fm.Id, fm.AccessHash, fm.FileType, fm.Width, fm.Height, fm.Extension, fm.UserId, fm.DataThumb, fm.Data)
	}
	_, err = db.Exec(sqlstr, fm.Id, fm.AccessHash, fm.FileType, fm.Width, fm.Height, fm.Extension, fm.UserId, fm.DataThumb, fm.Data)
	if err != nil {
		return err
	}

	// set existence
	fm._exists = true

	OnFileMsg_AfterInsert(fm)

	return nil
}

// Insert inserts the FileMsg to the database.
func (fm *FileMsg) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_file.file_msg (` +
		`Id, AccessHash, FileType, Width, Height, Extension, UserId, DataThumb, Data` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, fm.Id, fm.AccessHash, fm.FileType, fm.Width, fm.Height, fm.Extension, fm.UserId, fm.DataThumb, fm.Data)
	}
	_, err = db.Exec(sqlstr, fm.Id, fm.AccessHash, fm.FileType, fm.Width, fm.Height, fm.Extension, fm.UserId, fm.DataThumb, fm.Data)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return err
	}

	fm._exists = true

	OnFileMsg_AfterInsert(fm)

	return nil
}

// Update updates the FileMsg in the database.
func (fm *FileMsg) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_file.file_msg SET ` +
		`AccessHash = ?, FileType = ?, Width = ?, Height = ?, Extension = ?, UserId = ?, DataThumb = ?, Data = ?` +
		` WHERE Id = ?`

	// run query
	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, fm.AccessHash, fm.FileType, fm.Width, fm.Height, fm.Extension, fm.UserId, fm.DataThumb, fm.Data, fm.Id)
	}
	_, err = db.Exec(sqlstr, fm.AccessHash, fm.FileType, fm.Width, fm.Height, fm.Extension, fm.UserId, fm.DataThumb, fm.Data, fm.Id)

	if LogTableSqlReq.FileMsg {
		XOLogErr(err)
	}
	OnFileMsg_AfterUpdate(fm)

	return err
}

// Save saves the FileMsg to the database.
func (fm *FileMsg) Save(db XODB) error {
	if fm.Exists() {
		return fm.Update(db)
	}

	return fm.Replace(db)
}

// Delete deletes the FileMsg from the database.
func (fm *FileMsg) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fm._exists {
		return nil
	}

	// if deleted, bail
	if fm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_file.file_msg WHERE Id = ?`

	// run query
	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, fm.Id)
	}
	_, err = db.Exec(sqlstr, fm.Id)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	fm._deleted = true

	OnFileMsg_AfterDelete(fm)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __FileMsg_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __FileMsg_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __FileMsg_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewFileMsg_Deleter() *__FileMsg_Deleter {
	d := __FileMsg_Deleter{whereSep: " AND ", isMysql: true}
	return &d
}

func NewFileMsg_Updater() *__FileMsg_Updater {
	u := __FileMsg_Updater{whereSep: " AND ", isMysql: true}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewFileMsg_Selector() *__FileMsg_Selector {
	u := __FileMsg_Selector{whereSep: " AND ", selectCol: "*", isMysql: true}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__FileMsg_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__FileMsg_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__FileMsg_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__FileMsg_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__FileMsg_Deleter) Or() *__FileMsg_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__FileMsg_Deleter) Id_In(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) Id_Ins(ins ...int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) Id_NotIn(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Deleter) Id_Eq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Id_NotEq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Id_LT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Id_LE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Id_GT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Id_GE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Deleter) AccessHash_In(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccessHash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) AccessHash_Ins(ins ...int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccessHash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) AccessHash_NotIn(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccessHash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Deleter) AccessHash_Eq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) AccessHash_NotEq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) AccessHash_LT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) AccessHash_LE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) AccessHash_GT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) AccessHash_GE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Deleter) FileType_In(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) FileType_Ins(ins ...int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) FileType_NotIn(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Deleter) FileType_Eq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) FileType_NotEq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) FileType_LT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) FileType_LE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) FileType_GT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) FileType_GE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Deleter) Width_In(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) Width_Ins(ins ...int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) Width_NotIn(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Deleter) Width_Eq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Width_NotEq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Width_LT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Width_LE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Width_GT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Width_GE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Deleter) Height_In(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) Height_Ins(ins ...int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) Height_NotIn(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Deleter) Height_Eq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Height_NotEq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Height_LT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Height_LE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Height_GT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Height_GE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Deleter) UserId_In(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) UserId_Ins(ins ...int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) UserId_NotIn(ins []int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Deleter) UserId_Eq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) UserId_NotEq(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) UserId_LT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) UserId_LE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) UserId_GT(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) UserId_GE(val int) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__FileMsg_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__FileMsg_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__FileMsg_Updater) Or() *__FileMsg_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__FileMsg_Updater) Id_In(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) Id_Ins(ins ...int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) Id_NotIn(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Updater) Id_Eq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Id_NotEq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Id_LT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Id_LE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Id_GT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Id_GE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Updater) AccessHash_In(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccessHash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) AccessHash_Ins(ins ...int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccessHash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) AccessHash_NotIn(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccessHash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Updater) AccessHash_Eq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) AccessHash_NotEq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) AccessHash_LT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) AccessHash_LE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) AccessHash_GT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) AccessHash_GE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Updater) FileType_In(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) FileType_Ins(ins ...int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) FileType_NotIn(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Updater) FileType_Eq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) FileType_NotEq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) FileType_LT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) FileType_LE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) FileType_GT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) FileType_GE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Updater) Width_In(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) Width_Ins(ins ...int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) Width_NotIn(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Updater) Width_Eq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Width_NotEq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Width_LT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Width_LE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Width_GT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Width_GE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Updater) Height_In(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) Height_Ins(ins ...int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) Height_NotIn(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Updater) Height_Eq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Height_NotEq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Height_LT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Height_LE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Height_GT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Height_GE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Updater) UserId_In(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) UserId_Ins(ins ...int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) UserId_NotIn(ins []int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Updater) UserId_Eq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) UserId_NotEq(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) UserId_LT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) UserId_LE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) UserId_GT(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) UserId_GE(val int) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__FileMsg_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__FileMsg_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__FileMsg_Selector) Or() *__FileMsg_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__FileMsg_Selector) Id_In(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) Id_Ins(ins ...int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) Id_NotIn(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Selector) Id_Eq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Id_NotEq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Id_LT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Id_LE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Id_GT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Id_GE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Selector) AccessHash_In(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccessHash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) AccessHash_Ins(ins ...int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccessHash IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) AccessHash_NotIn(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AccessHash NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Selector) AccessHash_Eq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) AccessHash_NotEq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) AccessHash_LT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) AccessHash_LE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) AccessHash_GT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) AccessHash_GE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AccessHash >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Selector) FileType_In(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) FileType_Ins(ins ...int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) FileType_NotIn(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FileType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Selector) FileType_Eq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) FileType_NotEq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) FileType_LT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) FileType_LE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) FileType_GT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) FileType_GE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FileType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Selector) Width_In(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) Width_Ins(ins ...int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) Width_NotIn(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Width NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Selector) Width_Eq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Width_NotEq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Width_LT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Width_LE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Width_GT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Width_GE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Width >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Selector) Height_In(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) Height_Ins(ins ...int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) Height_NotIn(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Height NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Selector) Height_Eq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Height_NotEq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Height_LT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Height_LE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Height_GT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Height_GE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Height >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FileMsg_Selector) UserId_In(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) UserId_Ins(ins ...int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) UserId_NotIn(ins []int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Selector) UserId_Eq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) UserId_NotEq(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) UserId_LT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) UserId_LE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) UserId_GT(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) UserId_GE(val int) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__FileMsg_Deleter) Extension_In(ins []string) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Deleter) Extension_NotIn(ins []string) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__FileMsg_Deleter) Extension_Like(val string) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Deleter) Extension_Eq(val string) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Deleter) Extension_NotEq(val string) *__FileMsg_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__FileMsg_Updater) Extension_In(ins []string) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Updater) Extension_NotIn(ins []string) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__FileMsg_Updater) Extension_Like(val string) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Updater) Extension_Eq(val string) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Updater) Extension_NotEq(val string) *__FileMsg_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__FileMsg_Selector) Extension_In(ins []string) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FileMsg_Selector) Extension_NotIn(ins []string) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Extension NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__FileMsg_Selector) Extension_Like(val string) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FileMsg_Selector) Extension_Eq(val string) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FileMsg_Selector) Extension_NotEq(val string) *__FileMsg_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Extension != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__FileMsg_Updater) Id(newVal int) *__FileMsg_Updater {
	up := updateCol{" Id = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Id = " + u.nextDollar()] = newVal
	return u
}

func (u *__FileMsg_Updater) Id_Increment(count int) *__FileMsg_Updater {
	if count > 0 {
		up := updateCol{" Id = Id+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Id = Id+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Id = Id- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Id = Id- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FileMsg_Updater) AccessHash(newVal int) *__FileMsg_Updater {
	up := updateCol{" AccessHash = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" AccessHash = " + u.nextDollar()] = newVal
	return u
}

func (u *__FileMsg_Updater) AccessHash_Increment(count int) *__FileMsg_Updater {
	if count > 0 {
		up := updateCol{" AccessHash = AccessHash+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" AccessHash = AccessHash+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" AccessHash = AccessHash- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" AccessHash = AccessHash- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FileMsg_Updater) FileType(newVal int) *__FileMsg_Updater {
	up := updateCol{" FileType = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" FileType = " + u.nextDollar()] = newVal
	return u
}

func (u *__FileMsg_Updater) FileType_Increment(count int) *__FileMsg_Updater {
	if count > 0 {
		up := updateCol{" FileType = FileType+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" FileType = FileType+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" FileType = FileType- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" FileType = FileType- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FileMsg_Updater) Width(newVal int) *__FileMsg_Updater {
	up := updateCol{" Width = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Width = " + u.nextDollar()] = newVal
	return u
}

func (u *__FileMsg_Updater) Width_Increment(count int) *__FileMsg_Updater {
	if count > 0 {
		up := updateCol{" Width = Width+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Width = Width+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Width = Width- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Width = Width- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FileMsg_Updater) Height(newVal int) *__FileMsg_Updater {
	up := updateCol{" Height = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Height = " + u.nextDollar()] = newVal
	return u
}

func (u *__FileMsg_Updater) Height_Increment(count int) *__FileMsg_Updater {
	if count > 0 {
		up := updateCol{" Height = Height+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Height = Height+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Height = Height- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Height = Height- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__FileMsg_Updater) Extension(newVal string) *__FileMsg_Updater {
	up := updateCol{"Extension = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Extension = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__FileMsg_Updater) UserId(newVal int) *__FileMsg_Updater {
	up := updateCol{" UserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__FileMsg_Updater) UserId_Increment(count int) *__FileMsg_Updater {
	if count > 0 {
		up := updateCol{" UserId = UserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UserId = UserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UserId = UserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UserId = UserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

//ints

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__FileMsg_Selector) OrderBy_Id_Desc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__FileMsg_Selector) OrderBy_Id_Asc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__FileMsg_Selector) Select_Id() *__FileMsg_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__FileMsg_Selector) OrderBy_AccessHash_Desc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY AccessHash DESC "
	return u
}

func (u *__FileMsg_Selector) OrderBy_AccessHash_Asc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY AccessHash ASC "
	return u
}

func (u *__FileMsg_Selector) Select_AccessHash() *__FileMsg_Selector {
	u.selectCol = "AccessHash"
	return u
}

func (u *__FileMsg_Selector) OrderBy_FileType_Desc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY FileType DESC "
	return u
}

func (u *__FileMsg_Selector) OrderBy_FileType_Asc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY FileType ASC "
	return u
}

func (u *__FileMsg_Selector) Select_FileType() *__FileMsg_Selector {
	u.selectCol = "FileType"
	return u
}

func (u *__FileMsg_Selector) OrderBy_Width_Desc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Width DESC "
	return u
}

func (u *__FileMsg_Selector) OrderBy_Width_Asc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Width ASC "
	return u
}

func (u *__FileMsg_Selector) Select_Width() *__FileMsg_Selector {
	u.selectCol = "Width"
	return u
}

func (u *__FileMsg_Selector) OrderBy_Height_Desc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Height DESC "
	return u
}

func (u *__FileMsg_Selector) OrderBy_Height_Asc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Height ASC "
	return u
}

func (u *__FileMsg_Selector) Select_Height() *__FileMsg_Selector {
	u.selectCol = "Height"
	return u
}

func (u *__FileMsg_Selector) OrderBy_Extension_Desc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Extension DESC "
	return u
}

func (u *__FileMsg_Selector) OrderBy_Extension_Asc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Extension ASC "
	return u
}

func (u *__FileMsg_Selector) Select_Extension() *__FileMsg_Selector {
	u.selectCol = "Extension"
	return u
}

func (u *__FileMsg_Selector) OrderBy_UserId_Desc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__FileMsg_Selector) OrderBy_UserId_Asc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__FileMsg_Selector) Select_UserId() *__FileMsg_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__FileMsg_Selector) OrderBy_DataThumb_Desc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY DataThumb DESC "
	return u
}

func (u *__FileMsg_Selector) OrderBy_DataThumb_Asc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY DataThumb ASC "
	return u
}

func (u *__FileMsg_Selector) Select_DataThumb() *__FileMsg_Selector {
	u.selectCol = "DataThumb"
	return u
}

func (u *__FileMsg_Selector) OrderBy_Data_Desc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Data DESC "
	return u
}

func (u *__FileMsg_Selector) OrderBy_Data_Asc() *__FileMsg_Selector {
	u.orderBy = " ORDER BY Data ASC "
	return u
}

func (u *__FileMsg_Selector) Select_Data() *__FileMsg_Selector {
	u.selectCol = "Data"
	return u
}

func (u *__FileMsg_Selector) Limit(num int) *__FileMsg_Selector {
	u.limit = num
	return u
}

func (u *__FileMsg_Selector) Offset(num int) *__FileMsg_Selector {
	u.offset = num
	return u
}

func (u *__FileMsg_Selector) Order_Rand() *__FileMsg_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__FileMsg_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_file.file_msg"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__FileMsg_Selector) GetRow(db *sqlx.DB) (*FileMsg, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, whereArgs)
	}

	row := &FileMsg{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnFileMsg_LoadOne(row)

	return row, nil
}

func (u *__FileMsg_Selector) GetRows(db *sqlx.DB) ([]*FileMsg, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*FileMsg
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnFileMsg_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__FileMsg_Selector) GetRows2(db *sqlx.DB) ([]FileMsg, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*FileMsg
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnFileMsg_LoadMany(rows)

	rows2 := make([]FileMsg, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__FileMsg_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__FileMsg_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__FileMsg_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__FileMsg_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__FileMsg_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_file.file_msg SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__FileMsg_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_file.file_msg WHERE " + wheresStr

	// run query
	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  FileMsg ////////////////

func MassInsert_FileMsg(rows []FileMsg, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(9, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun_file.file_msg (" +
		"Id, AccessHash, FileType, Width, Height, Extension, UserId, DataThumb, Data" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.AccessHash)
		vals = append(vals, row.FileType)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Extension)
		vals = append(vals, row.UserId)
		vals = append(vals, row.DataThumb)
		vals = append(vals, row.Data)

	}

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_FileMsg(rows []FileMsg, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(9, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun_file.file_msg (" +
		"Id, AccessHash, FileType, Width, Height, Extension, UserId, DataThumb, Data" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Id)
		vals = append(vals, row.AccessHash)
		vals = append(vals, row.FileType)
		vals = append(vals, row.Width)
		vals = append(vals, row.Height)
		vals = append(vals, row.Extension)
		vals = append(vals, row.UserId)
		vals = append(vals, row.DataThumb)
		vals = append(vals, row.Data)

	}

	if LogTableSqlReq.FileMsg {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.FileMsg {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//
