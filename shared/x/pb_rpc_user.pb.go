// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb_rpc_user.proto

package x

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// BlockUser
type PB_UserParam_BlockUser struct {
	UserId   int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
}

func (m *PB_UserParam_BlockUser) Reset()                    { *m = PB_UserParam_BlockUser{} }
func (m *PB_UserParam_BlockUser) String() string            { return proto.CompactTextString(m) }
func (*PB_UserParam_BlockUser) ProtoMessage()               {}
func (*PB_UserParam_BlockUser) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *PB_UserParam_BlockUser) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PB_UserParam_BlockUser) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type PB_UserResponse_BlockUser struct {
	ByUserId       int32  `protobuf:"varint,1,opt,name=ByUserId" json:"ByUserId,omitempty"`
	TargetUserId   int32  `protobuf:"varint,2,opt,name=TargetUserId" json:"TargetUserId,omitempty"`
	TargetUserName string `protobuf:"bytes,3,opt,name=TargetUserName" json:"TargetUserName,omitempty"`
}

func (m *PB_UserResponse_BlockUser) Reset()                    { *m = PB_UserResponse_BlockUser{} }
func (m *PB_UserResponse_BlockUser) String() string            { return proto.CompactTextString(m) }
func (*PB_UserResponse_BlockUser) ProtoMessage()               {}
func (*PB_UserResponse_BlockUser) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *PB_UserResponse_BlockUser) GetByUserId() int32 {
	if m != nil {
		return m.ByUserId
	}
	return 0
}

func (m *PB_UserResponse_BlockUser) GetTargetUserId() int32 {
	if m != nil {
		return m.TargetUserId
	}
	return 0
}

func (m *PB_UserResponse_BlockUser) GetTargetUserName() string {
	if m != nil {
		return m.TargetUserName
	}
	return ""
}

// UnBlockUser
type PB_UserParam_UnBlockUser struct {
	Offset int32 `protobuf:"varint,1,opt,name=Offset" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=Limit" json:"Limit,omitempty"`
}

func (m *PB_UserParam_UnBlockUser) Reset()                    { *m = PB_UserParam_UnBlockUser{} }
func (m *PB_UserParam_UnBlockUser) String() string            { return proto.CompactTextString(m) }
func (*PB_UserParam_UnBlockUser) ProtoMessage()               {}
func (*PB_UserParam_UnBlockUser) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *PB_UserParam_UnBlockUser) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PB_UserParam_UnBlockUser) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type PB_UserResponse_UnBlockUser struct {
	Users []*UserView `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (m *PB_UserResponse_UnBlockUser) Reset()                    { *m = PB_UserResponse_UnBlockUser{} }
func (m *PB_UserResponse_UnBlockUser) String() string            { return proto.CompactTextString(m) }
func (*PB_UserResponse_UnBlockUser) ProtoMessage()               {}
func (*PB_UserResponse_UnBlockUser) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *PB_UserResponse_UnBlockUser) GetUsers() []*UserView {
	if m != nil {
		return m.Users
	}
	return nil
}

//
type PB_UserParam_BlockedList struct {
	UserId   int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
}

func (m *PB_UserParam_BlockedList) Reset()                    { *m = PB_UserParam_BlockedList{} }
func (m *PB_UserParam_BlockedList) String() string            { return proto.CompactTextString(m) }
func (*PB_UserParam_BlockedList) ProtoMessage()               {}
func (*PB_UserParam_BlockedList) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *PB_UserParam_BlockedList) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PB_UserParam_BlockedList) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type PB_UserResponse_BlockedList struct {
	ByUserId       int32  `protobuf:"varint,1,opt,name=ByUserId" json:"ByUserId,omitempty"`
	TargetUserId   int32  `protobuf:"varint,2,opt,name=TargetUserId" json:"TargetUserId,omitempty"`
	TargetUserName string `protobuf:"bytes,3,opt,name=TargetUserName" json:"TargetUserName,omitempty"`
}

func (m *PB_UserResponse_BlockedList) Reset()                    { *m = PB_UserResponse_BlockedList{} }
func (m *PB_UserResponse_BlockedList) String() string            { return proto.CompactTextString(m) }
func (*PB_UserResponse_BlockedList) ProtoMessage()               {}
func (*PB_UserResponse_BlockedList) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *PB_UserResponse_BlockedList) GetByUserId() int32 {
	if m != nil {
		return m.ByUserId
	}
	return 0
}

func (m *PB_UserResponse_BlockedList) GetTargetUserId() int32 {
	if m != nil {
		return m.TargetUserId
	}
	return 0
}

func (m *PB_UserResponse_BlockedList) GetTargetUserName() string {
	if m != nil {
		return m.TargetUserName
	}
	return ""
}

// UpdateAbout
type PB_UserParam_UpdateAbout struct {
	NewAbout string `protobuf:"bytes,1,opt,name=NewAbout" json:"NewAbout,omitempty"`
}

func (m *PB_UserParam_UpdateAbout) Reset()                    { *m = PB_UserParam_UpdateAbout{} }
func (m *PB_UserParam_UpdateAbout) String() string            { return proto.CompactTextString(m) }
func (*PB_UserParam_UpdateAbout) ProtoMessage()               {}
func (*PB_UserParam_UpdateAbout) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *PB_UserParam_UpdateAbout) GetNewAbout() string {
	if m != nil {
		return m.NewAbout
	}
	return ""
}

type PB_UserResponse_UpdateAbout struct {
	UserId   int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	NewAbout string `protobuf:"bytes,2,opt,name=NewAbout" json:"NewAbout,omitempty"`
}

func (m *PB_UserResponse_UpdateAbout) Reset()                    { *m = PB_UserResponse_UpdateAbout{} }
func (m *PB_UserResponse_UpdateAbout) String() string            { return proto.CompactTextString(m) }
func (*PB_UserResponse_UpdateAbout) ProtoMessage()               {}
func (*PB_UserResponse_UpdateAbout) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *PB_UserResponse_UpdateAbout) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PB_UserResponse_UpdateAbout) GetNewAbout() string {
	if m != nil {
		return m.NewAbout
	}
	return ""
}

//
type PB_UserParam_UpdateUserName struct {
	NewUserName string `protobuf:"bytes,1,opt,name=NewUserName" json:"NewUserName,omitempty"`
}

func (m *PB_UserParam_UpdateUserName) Reset()                    { *m = PB_UserParam_UpdateUserName{} }
func (m *PB_UserParam_UpdateUserName) String() string            { return proto.CompactTextString(m) }
func (*PB_UserParam_UpdateUserName) ProtoMessage()               {}
func (*PB_UserParam_UpdateUserName) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *PB_UserParam_UpdateUserName) GetNewUserName() string {
	if m != nil {
		return m.NewUserName
	}
	return ""
}

type PB_UserResponse_UpdateUserName struct {
	UserId      int32  `protobuf:"varint,1,opt,name=UserId" json:"UserId,omitempty"`
	NewUserName string `protobuf:"bytes,2,opt,name=NewUserName" json:"NewUserName,omitempty"`
}

func (m *PB_UserResponse_UpdateUserName) Reset()                    { *m = PB_UserResponse_UpdateUserName{} }
func (m *PB_UserResponse_UpdateUserName) String() string            { return proto.CompactTextString(m) }
func (*PB_UserResponse_UpdateUserName) ProtoMessage()               {}
func (*PB_UserResponse_UpdateUserName) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{9} }

func (m *PB_UserResponse_UpdateUserName) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PB_UserResponse_UpdateUserName) GetNewUserName() string {
	if m != nil {
		return m.NewUserName
	}
	return ""
}

type PB_UserParam_ChangeAvatar struct {
	None       bool   `protobuf:"varint,1,opt,name=None" json:"None,omitempty"`
	ImageData2 []byte `protobuf:"bytes,2,opt,name=ImageData2,proto3" json:"ImageData2,omitempty"`
}

func (m *PB_UserParam_ChangeAvatar) Reset()                    { *m = PB_UserParam_ChangeAvatar{} }
func (m *PB_UserParam_ChangeAvatar) String() string            { return proto.CompactTextString(m) }
func (*PB_UserParam_ChangeAvatar) ProtoMessage()               {}
func (*PB_UserParam_ChangeAvatar) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

func (m *PB_UserParam_ChangeAvatar) GetNone() bool {
	if m != nil {
		return m.None
	}
	return false
}

func (m *PB_UserParam_ChangeAvatar) GetImageData2() []byte {
	if m != nil {
		return m.ImageData2
	}
	return nil
}

type PB_UserResponse_ChangeAvatar struct {
}

func (m *PB_UserResponse_ChangeAvatar) Reset()                    { *m = PB_UserResponse_ChangeAvatar{} }
func (m *PB_UserResponse_ChangeAvatar) String() string            { return proto.CompactTextString(m) }
func (*PB_UserResponse_ChangeAvatar) ProtoMessage()               {}
func (*PB_UserResponse_ChangeAvatar) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{11} }

//
type PB_UserParam_ChangePrivacy struct {
	Level ProfilePrivacyLevelEnum `protobuf:"varint,1,opt,name=Level,enum=ProfilePrivacyLevelEnum" json:"Level,omitempty"`
}

func (m *PB_UserParam_ChangePrivacy) Reset()                    { *m = PB_UserParam_ChangePrivacy{} }
func (m *PB_UserParam_ChangePrivacy) String() string            { return proto.CompactTextString(m) }
func (*PB_UserParam_ChangePrivacy) ProtoMessage()               {}
func (*PB_UserParam_ChangePrivacy) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{12} }

func (m *PB_UserParam_ChangePrivacy) GetLevel() ProfilePrivacyLevelEnum {
	if m != nil {
		return m.Level
	}
	return ProfilePrivacyLevelEnum_NONE
}

type PB_UserResponseOffline_ChangePrivacy struct {
}

func (m *PB_UserResponseOffline_ChangePrivacy) Reset()         { *m = PB_UserResponseOffline_ChangePrivacy{} }
func (m *PB_UserResponseOffline_ChangePrivacy) String() string { return proto.CompactTextString(m) }
func (*PB_UserResponseOffline_ChangePrivacy) ProtoMessage()    {}
func (*PB_UserResponseOffline_ChangePrivacy) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{13}
}

//
type PB_UserParam_CheckUserName struct {
	Level ProfilePrivacyLevelEnum `protobuf:"varint,1,opt,name=Level,enum=ProfilePrivacyLevelEnum" json:"Level,omitempty"`
}

func (m *PB_UserParam_CheckUserName) Reset()                    { *m = PB_UserParam_CheckUserName{} }
func (m *PB_UserParam_CheckUserName) String() string            { return proto.CompactTextString(m) }
func (*PB_UserParam_CheckUserName) ProtoMessage()               {}
func (*PB_UserParam_CheckUserName) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{14} }

func (m *PB_UserParam_CheckUserName) GetLevel() ProfilePrivacyLevelEnum {
	if m != nil {
		return m.Level
	}
	return ProfilePrivacyLevelEnum_NONE
}

type PB_UserResponse_CheckUserName struct {
}

func (m *PB_UserResponse_CheckUserName) Reset()                    { *m = PB_UserResponse_CheckUserName{} }
func (m *PB_UserResponse_CheckUserName) String() string            { return proto.CompactTextString(m) }
func (*PB_UserResponse_CheckUserName) ProtoMessage()               {}
func (*PB_UserResponse_CheckUserName) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{15} }

// ///////////////////////////// Extract from herer /////////////////////////////
type UserView struct {
}

func (m *UserView) Reset()                    { *m = UserView{} }
func (m *UserView) String() string            { return proto.CompactTextString(m) }
func (*UserView) ProtoMessage()               {}
func (*UserView) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{16} }

func init() {
	proto.RegisterType((*PB_UserParam_BlockUser)(nil), "PB_UserParam_BlockUser")
	proto.RegisterType((*PB_UserResponse_BlockUser)(nil), "PB_UserResponse_BlockUser")
	proto.RegisterType((*PB_UserParam_UnBlockUser)(nil), "PB_UserParam_UnBlockUser")
	proto.RegisterType((*PB_UserResponse_UnBlockUser)(nil), "PB_UserResponse_UnBlockUser")
	proto.RegisterType((*PB_UserParam_BlockedList)(nil), "PB_UserParam_BlockedList")
	proto.RegisterType((*PB_UserResponse_BlockedList)(nil), "PB_UserResponse_BlockedList")
	proto.RegisterType((*PB_UserParam_UpdateAbout)(nil), "PB_UserParam_UpdateAbout")
	proto.RegisterType((*PB_UserResponse_UpdateAbout)(nil), "PB_UserResponse_UpdateAbout")
	proto.RegisterType((*PB_UserParam_UpdateUserName)(nil), "PB_UserParam_UpdateUserName")
	proto.RegisterType((*PB_UserResponse_UpdateUserName)(nil), "PB_UserResponse_UpdateUserName")
	proto.RegisterType((*PB_UserParam_ChangeAvatar)(nil), "PB_UserParam_ChangeAvatar")
	proto.RegisterType((*PB_UserResponse_ChangeAvatar)(nil), "PB_UserResponse_ChangeAvatar")
	proto.RegisterType((*PB_UserParam_ChangePrivacy)(nil), "PB_UserParam_ChangePrivacy")
	proto.RegisterType((*PB_UserResponseOffline_ChangePrivacy)(nil), "PB_UserResponseOffline_ChangePrivacy")
	proto.RegisterType((*PB_UserParam_CheckUserName)(nil), "PB_UserParam_CheckUserName")
	proto.RegisterType((*PB_UserResponse_CheckUserName)(nil), "PB_UserResponse_CheckUserName")
	proto.RegisterType((*UserView)(nil), "UserView")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPC_User service

type RPC_UserClient interface {
	BlockUser(ctx context.Context, in *PB_UserParam_BlockUser, opts ...grpc.CallOption) (*PB_UserResponse_BlockUser, error)
	UnBlockUser(ctx context.Context, in *PB_UserParam_UnBlockUser, opts ...grpc.CallOption) (*PB_UserResponse_UnBlockUser, error)
	GetBlockedList(ctx context.Context, in *PB_UserParam_BlockedList, opts ...grpc.CallOption) (*PB_UserResponse_BlockedList, error)
	UpdateAbout(ctx context.Context, in *PB_UserParam_UpdateAbout, opts ...grpc.CallOption) (*PB_UserResponse_UpdateAbout, error)
	UpdateUserName(ctx context.Context, in *PB_UserParam_UpdateUserName, opts ...grpc.CallOption) (*PB_UserResponse_UpdateUserName, error)
	ChangePrivacy(ctx context.Context, in *PB_UserParam_ChangePrivacy, opts ...grpc.CallOption) (*PB_UserResponseOffline_ChangePrivacy, error)
	ChangeAvatar(ctx context.Context, in *PB_UserParam_ChangeAvatar, opts ...grpc.CallOption) (*PB_UserResponse_ChangeAvatar, error)
	CheckUserName(ctx context.Context, in *PB_UserParam_CheckUserName, opts ...grpc.CallOption) (*PB_UserResponse_CheckUserName, error)
}

type rPC_UserClient struct {
	cc *grpc.ClientConn
}

func NewRPC_UserClient(cc *grpc.ClientConn) RPC_UserClient {
	return &rPC_UserClient{cc}
}

func (c *rPC_UserClient) BlockUser(ctx context.Context, in *PB_UserParam_BlockUser, opts ...grpc.CallOption) (*PB_UserResponse_BlockUser, error) {
	out := new(PB_UserResponse_BlockUser)
	err := grpc.Invoke(ctx, "/RPC_User/BlockUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPC_UserClient) UnBlockUser(ctx context.Context, in *PB_UserParam_UnBlockUser, opts ...grpc.CallOption) (*PB_UserResponse_UnBlockUser, error) {
	out := new(PB_UserResponse_UnBlockUser)
	err := grpc.Invoke(ctx, "/RPC_User/UnBlockUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPC_UserClient) GetBlockedList(ctx context.Context, in *PB_UserParam_BlockedList, opts ...grpc.CallOption) (*PB_UserResponse_BlockedList, error) {
	out := new(PB_UserResponse_BlockedList)
	err := grpc.Invoke(ctx, "/RPC_User/GetBlockedList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPC_UserClient) UpdateAbout(ctx context.Context, in *PB_UserParam_UpdateAbout, opts ...grpc.CallOption) (*PB_UserResponse_UpdateAbout, error) {
	out := new(PB_UserResponse_UpdateAbout)
	err := grpc.Invoke(ctx, "/RPC_User/UpdateAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPC_UserClient) UpdateUserName(ctx context.Context, in *PB_UserParam_UpdateUserName, opts ...grpc.CallOption) (*PB_UserResponse_UpdateUserName, error) {
	out := new(PB_UserResponse_UpdateUserName)
	err := grpc.Invoke(ctx, "/RPC_User/UpdateUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPC_UserClient) ChangePrivacy(ctx context.Context, in *PB_UserParam_ChangePrivacy, opts ...grpc.CallOption) (*PB_UserResponseOffline_ChangePrivacy, error) {
	out := new(PB_UserResponseOffline_ChangePrivacy)
	err := grpc.Invoke(ctx, "/RPC_User/ChangePrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPC_UserClient) ChangeAvatar(ctx context.Context, in *PB_UserParam_ChangeAvatar, opts ...grpc.CallOption) (*PB_UserResponse_ChangeAvatar, error) {
	out := new(PB_UserResponse_ChangeAvatar)
	err := grpc.Invoke(ctx, "/RPC_User/ChangeAvatar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPC_UserClient) CheckUserName(ctx context.Context, in *PB_UserParam_CheckUserName, opts ...grpc.CallOption) (*PB_UserResponse_CheckUserName, error) {
	out := new(PB_UserResponse_CheckUserName)
	err := grpc.Invoke(ctx, "/RPC_User/CheckUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPC_User service

type RPC_UserServer interface {
	BlockUser(context.Context, *PB_UserParam_BlockUser) (*PB_UserResponse_BlockUser, error)
	UnBlockUser(context.Context, *PB_UserParam_UnBlockUser) (*PB_UserResponse_UnBlockUser, error)
	GetBlockedList(context.Context, *PB_UserParam_BlockedList) (*PB_UserResponse_BlockedList, error)
	UpdateAbout(context.Context, *PB_UserParam_UpdateAbout) (*PB_UserResponse_UpdateAbout, error)
	UpdateUserName(context.Context, *PB_UserParam_UpdateUserName) (*PB_UserResponse_UpdateUserName, error)
	ChangePrivacy(context.Context, *PB_UserParam_ChangePrivacy) (*PB_UserResponseOffline_ChangePrivacy, error)
	ChangeAvatar(context.Context, *PB_UserParam_ChangeAvatar) (*PB_UserResponse_ChangeAvatar, error)
	CheckUserName(context.Context, *PB_UserParam_CheckUserName) (*PB_UserResponse_CheckUserName, error)
}

func RegisterRPC_UserServer(s *grpc.Server, srv RPC_UserServer) {
	s.RegisterService(&_RPC_User_serviceDesc, srv)
}

func _RPC_User_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PB_UserParam_BlockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_UserServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_User/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_UserServer).BlockUser(ctx, req.(*PB_UserParam_BlockUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_User_UnBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PB_UserParam_UnBlockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_UserServer).UnBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_User/UnBlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_UserServer).UnBlockUser(ctx, req.(*PB_UserParam_UnBlockUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_User_GetBlockedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PB_UserParam_BlockedList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_UserServer).GetBlockedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_User/GetBlockedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_UserServer).GetBlockedList(ctx, req.(*PB_UserParam_BlockedList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_User_UpdateAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PB_UserParam_UpdateAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_UserServer).UpdateAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_User/UpdateAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_UserServer).UpdateAbout(ctx, req.(*PB_UserParam_UpdateAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_User_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PB_UserParam_UpdateUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_UserServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_User/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_UserServer).UpdateUserName(ctx, req.(*PB_UserParam_UpdateUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_User_ChangePrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PB_UserParam_ChangePrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_UserServer).ChangePrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_User/ChangePrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_UserServer).ChangePrivacy(ctx, req.(*PB_UserParam_ChangePrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_User_ChangeAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PB_UserParam_ChangeAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_UserServer).ChangeAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_User/ChangeAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_UserServer).ChangeAvatar(ctx, req.(*PB_UserParam_ChangeAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_User_CheckUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PB_UserParam_CheckUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPC_UserServer).CheckUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC_User/CheckUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPC_UserServer).CheckUserName(ctx, req.(*PB_UserParam_CheckUserName))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RPC_User",
	HandlerType: (*RPC_UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockUser",
			Handler:    _RPC_User_BlockUser_Handler,
		},
		{
			MethodName: "UnBlockUser",
			Handler:    _RPC_User_UnBlockUser_Handler,
		},
		{
			MethodName: "GetBlockedList",
			Handler:    _RPC_User_GetBlockedList_Handler,
		},
		{
			MethodName: "UpdateAbout",
			Handler:    _RPC_User_UpdateAbout_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _RPC_User_UpdateUserName_Handler,
		},
		{
			MethodName: "ChangePrivacy",
			Handler:    _RPC_User_ChangePrivacy_Handler,
		},
		{
			MethodName: "ChangeAvatar",
			Handler:    _RPC_User_ChangeAvatar_Handler,
		},
		{
			MethodName: "CheckUserName",
			Handler:    _RPC_User_CheckUserName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_rpc_user.proto",
}

func init() { proto.RegisterFile("pb_rpc_user.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0x95, 0x21, 0x44, 0x30, 0x50, 0xa4, 0xac, 0xaa, 0x14, 0x36, 0x04, 0xd0, 0xaa, 0x8d, 0x38,
	0xed, 0x81, 0x4a, 0x3d, 0xb6, 0x0d, 0xe9, 0x47, 0x90, 0x2c, 0x70, 0xdd, 0xa6, 0x87, 0x5c, 0xd0,
	0x02, 0x0b, 0xb5, 0x8a, 0x3f, 0x64, 0x1b, 0x68, 0xce, 0x55, 0xff, 0x6a, 0x7f, 0x47, 0xe5, 0x35,
	0x98, 0xb5, 0xb1, 0xdd, 0x8f, 0x43, 0x4f, 0xf6, 0xdb, 0xf1, 0xbe, 0x79, 0x33, 0x9a, 0x37, 0x86,
	0x33, 0x67, 0x3a, 0x71, 0x9d, 0xd9, 0x64, 0xed, 0x71, 0x97, 0x3a, 0xae, 0xed, 0xdb, 0xb8, 0xee,
	0x4c, 0x27, 0xdc, 0x5a, 0x9b, 0x5e, 0x88, 0x89, 0x0a, 0xe7, 0xda, 0x60, 0x72, 0xe7, 0x71, 0x57,
	0x63, 0x2e, 0x33, 0x27, 0x83, 0x95, 0x3d, 0xfb, 0x1a, 0x40, 0x74, 0x0e, 0xa7, 0xc1, 0x73, 0x38,
	0x6f, 0x28, 0x5d, 0xa5, 0x57, 0xd2, 0x77, 0x08, 0x61, 0x28, 0x07, 0x6f, 0x23, 0x66, 0xf2, 0x46,
	0xa1, 0xab, 0xf4, 0x2a, 0x7a, 0x84, 0xc9, 0x77, 0x05, 0x9a, 0x3b, 0x3a, 0x9d, 0x7b, 0x8e, 0x6d,
	0x79, 0x5c, 0x62, 0xc4, 0x50, 0x1e, 0x3c, 0xc4, 0x38, 0x23, 0x8c, 0x08, 0xd4, 0x3e, 0x31, 0x77,
	0xc9, 0xfd, 0x5d, 0xbc, 0x20, 0xe2, 0xb1, 0x33, 0x74, 0x05, 0xf5, 0x03, 0x16, 0xf9, 0x8b, 0x22,
	0x7f, 0xe2, 0x94, 0xdc, 0x42, 0x23, 0x56, 0xd3, 0x9d, 0x15, 0xab, 0x6a, 0xbc, 0x58, 0x78, 0xdc,
	0xdf, 0x57, 0x15, 0x22, 0xf4, 0x18, 0x4a, 0xaa, 0x61, 0x1a, 0xfe, 0x2e, 0x71, 0x08, 0xc8, 0x4b,
	0xb8, 0x48, 0x96, 0x23, 0x93, 0x75, 0xa0, 0x14, 0x3c, 0xbd, 0x86, 0xd2, 0x2d, 0xf6, 0xaa, 0xfd,
	0x0a, 0x0d, 0xd0, 0x67, 0x83, 0x6f, 0xf5, 0xf0, 0x9c, 0x8c, 0x12, 0x4a, 0xc4, 0x55, 0x3e, 0x57,
	0x0d, 0xcf, 0xff, 0xa7, 0xfe, 0xfe, 0x50, 0x8e, 0x05, 0xc9, 0x9c, 0xff, 0xab, 0xc3, 0x2f, 0x92,
	0x1d, 0x76, 0xe6, 0xcc, 0xe7, 0xd7, 0x53, 0x7b, 0x2d, 0x34, 0x8c, 0xf8, 0x56, 0xbc, 0x0b, 0x0d,
	0x15, 0x3d, 0xc2, 0xe4, 0x43, 0x4a, 0x3f, 0xa5, 0xab, 0x39, 0x2d, 0x89, 0x28, 0x0b, 0x09, 0xca,
	0x57, 0x11, 0xa5, 0x2c, 0x65, 0xaf, 0x14, 0x75, 0xa1, 0x3a, 0xe2, 0xdb, 0xa8, 0x9c, 0x50, 0x90,
	0x7c, 0x44, 0xee, 0xa1, 0x9d, 0xae, 0x29, 0xe2, 0xc8, 0x92, 0x95, 0xe0, 0x2e, 0x1c, 0x73, 0x8f,
	0x23, 0x3b, 0x84, 0xe2, 0x6e, 0xbe, 0x30, 0x6b, 0xc9, 0xaf, 0x37, 0xcc, 0x67, 0x2e, 0x42, 0x70,
	0x32, 0xb2, 0xad, 0x50, 0x53, 0x59, 0x17, 0xef, 0xa8, 0x0d, 0x30, 0x34, 0xd9, 0x92, 0xbf, 0x61,
	0x3e, 0xeb, 0x0b, 0xc6, 0x9a, 0x2e, 0x9d, 0x90, 0x36, 0xb4, 0x92, 0x62, 0x65, 0x4e, 0xa2, 0x02,
	0x4e, 0x49, 0xa8, 0xb9, 0xc6, 0x86, 0xcd, 0x1e, 0x10, 0x85, 0x92, 0xca, 0x37, 0x7c, 0x25, 0x52,
	0xd6, 0xfb, 0x0d, 0xaa, 0xb9, 0xf6, 0xc2, 0x58, 0xed, 0xe3, 0x22, 0xf6, 0xd6, 0x5a, 0x9b, 0x7a,
	0xf8, 0x19, 0xb9, 0x82, 0xa7, 0x89, 0x6c, 0xe3, 0xc5, 0x62, 0x65, 0x58, 0x3c, 0xce, 0x9b, 0x92,
	0x95, 0x87, 0x0e, 0x11, 0xed, 0xfb, 0xdb, 0xac, 0x1d, 0xb8, 0x3c, 0xae, 0x51, 0x22, 0x24, 0x10,
	0x3a, 0x24, 0x30, 0x5a, 0xff, 0xe7, 0x09, 0x94, 0x75, 0xed, 0x46, 0x7c, 0x8e, 0x5e, 0x43, 0xe5,
	0x60, 0xce, 0x27, 0x34, 0x7d, 0xb1, 0x61, 0x4c, 0xb3, 0x57, 0xd4, 0x3b, 0xa8, 0xca, 0x06, 0x6f,
	0xd2, 0xac, 0x45, 0x82, 0x5b, 0x34, 0x6f, 0x33, 0x0c, 0xa1, 0xfe, 0x9e, 0xfb, 0xb2, 0x35, 0x9b,
	0x34, 0x6b, 0x13, 0xa4, 0x50, 0xc9, 0x17, 0x03, 0x49, 0x92, 0x47, 0x92, 0x92, 0x0e, 0xa1, 0x34,
	0x49, 0xd2, 0xc5, 0x31, 0xd4, 0x13, 0x73, 0xdd, 0xa2, 0x39, 0xce, 0xc1, 0x1d, 0xfa, 0x1b, 0x5b,
	0x7c, 0x84, 0x47, 0xf1, 0xf1, 0xba, 0xa0, 0xd9, 0xb3, 0x87, 0x9f, 0xd1, 0x3f, 0x19, 0x25, 0x34,
	0x84, 0x5a, 0xcc, 0x24, 0x98, 0x66, 0x1a, 0x08, 0x5f, 0xd2, 0x3c, 0x2f, 0x20, 0x35, 0xd0, 0x27,
	0x0f, 0xe2, 0x91, 0x3e, 0x29, 0x88, 0xdb, 0x34, 0x77, 0xe8, 0x06, 0x67, 0x50, 0x36, 0x5c, 0x1a,
	0xfc, 0x37, 0xa7, 0xb7, 0x45, 0x4d, 0xb9, 0x57, 0xbe, 0x4d, 0x4f, 0xc5, 0x2f, 0xf4, 0xf9, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x79, 0x65, 0x80, 0x67, 0x07, 0x00, 0x00,
}
