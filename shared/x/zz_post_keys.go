package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// PostKey represents a row from 'sun.post_keys'.

// Manualy copy this to project
type PostKey__ struct {
	Id  int    `json:"Id"`  // Id -
	Key string `json:"Key"` // Key -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PostKey exists in the database.
func (pk *PostKey) Exists() bool {
	return pk._exists
}

// Deleted provides information if the PostKey has been deleted from the database.
func (pk *PostKey) Deleted() bool {
	return pk._deleted
}

// Insert inserts the PostKey to the database.
func (pk *PostKey) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pk._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO sun.post_keys (` +
		`Key` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, pk.Key)
	}
	res, err := db.Exec(sqlstr, pk.Key)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	pk.Id = int(id)
	pk._exists = true

	OnPostKey_AfterInsert(pk)

	return nil
}

// Insert inserts the PostKey to the database.
func (pk *PostKey) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.post_keys (` +
		`Key` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, pk.Key)
	}
	res, err := db.Exec(sqlstr, pk.Key)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	pk.Id = int(id)
	pk._exists = true

	OnPostKey_AfterInsert(pk)

	return nil
}

// Update updates the PostKey in the database.
func (pk *PostKey) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pk._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pk._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.post_keys SET ` +
		`Key = ?` +
		` WHERE Id = ?`

	// run query
	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, pk.Key, pk.Id)
	}
	_, err = db.Exec(sqlstr, pk.Key, pk.Id)

	if LogTableSqlReq.PostKey {
		XOLogErr(err)
	}
	OnPostKey_AfterUpdate(pk)

	return err
}

// Save saves the PostKey to the database.
func (pk *PostKey) Save(db XODB) error {
	if pk.Exists() {
		return pk.Update(db)
	}

	return pk.Replace(db)
}

// Delete deletes the PostKey from the database.
func (pk *PostKey) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pk._exists {
		return nil
	}

	// if deleted, bail
	if pk._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.post_keys WHERE Id = ?`

	// run query
	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, pk.Id)
	}
	_, err = db.Exec(sqlstr, pk.Id)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	pk._deleted = true

	OnPostKey_AfterDelete(pk)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __PostKey_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __PostKey_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __PostKey_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPostKey_Deleter() *__PostKey_Deleter {
	d := __PostKey_Deleter{whereSep: " AND "}
	return &d
}

func NewPostKey_Updater() *__PostKey_Updater {
	u := __PostKey_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPostKey_Selector() *__PostKey_Selector {
	u := __PostKey_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__PostKey_Deleter) Or() *__PostKey_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PostKey_Deleter) Id_In(ins []int) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostKey_Deleter) Id_Ins(ins ...int) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostKey_Deleter) Id_NotIn(ins []int) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostKey_Deleter) Id_Eq(val int) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Deleter) Id_NotEq(val int) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Deleter) Id_LT(val int) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Deleter) Id_LE(val int) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Deleter) Id_GT(val int) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Deleter) Id_GE(val int) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PostKey_Updater) Or() *__PostKey_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PostKey_Updater) Id_In(ins []int) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostKey_Updater) Id_Ins(ins ...int) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostKey_Updater) Id_NotIn(ins []int) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostKey_Updater) Id_Eq(val int) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Updater) Id_NotEq(val int) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Updater) Id_LT(val int) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Updater) Id_LE(val int) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Updater) Id_GT(val int) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Updater) Id_GE(val int) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PostKey_Selector) Or() *__PostKey_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PostKey_Selector) Id_In(ins []int) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostKey_Selector) Id_Ins(ins ...int) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostKey_Selector) Id_NotIn(ins []int) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostKey_Selector) Id_Eq(val int) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Selector) Id_NotEq(val int) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Selector) Id_LT(val int) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Selector) Id_LE(val int) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Selector) Id_GT(val int) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Selector) Id_GE(val int) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__PostKey_Deleter) Key_In(ins []string) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostKey_Deleter) Key_NotIn(ins []string) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostKey_Deleter) Key_Like(val string) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostKey_Deleter) Key_Eq(val string) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Deleter) Key_NotEq(val string) *__PostKey_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PostKey_Updater) Key_In(ins []string) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostKey_Updater) Key_NotIn(ins []string) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostKey_Updater) Key_Like(val string) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostKey_Updater) Key_Eq(val string) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Updater) Key_NotEq(val string) *__PostKey_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PostKey_Selector) Key_In(ins []string) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PostKey_Selector) Key_NotIn(ins []string) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Key NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PostKey_Selector) Key_Like(val string) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PostKey_Selector) Key_Eq(val string) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PostKey_Selector) Key_NotEq(val string) *__PostKey_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Key != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PostKey_Updater) Id(newVal int) *__PostKey_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__PostKey_Updater) Id_Increment(count int) *__PostKey_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__PostKey_Updater) Key(newVal string) *__PostKey_Updater {
	u.updates[" Key = ? "] = newVal
	return u
}

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PostKey_Selector) OrderBy_Id_Desc() *__PostKey_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__PostKey_Selector) OrderBy_Id_Asc() *__PostKey_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__PostKey_Selector) Select_Id() *__PostKey_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__PostKey_Selector) OrderBy_Key_Desc() *__PostKey_Selector {
	u.orderBy = " ORDER BY Key DESC "
	return u
}

func (u *__PostKey_Selector) OrderBy_Key_Asc() *__PostKey_Selector {
	u.orderBy = " ORDER BY Key ASC "
	return u
}

func (u *__PostKey_Selector) Select_Key() *__PostKey_Selector {
	u.selectCol = "Key"
	return u
}

func (u *__PostKey_Selector) Limit(num int) *__PostKey_Selector {
	u.limit = num
	return u
}

func (u *__PostKey_Selector) Offset(num int) *__PostKey_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PostKey_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.post_keys"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PostKey_Selector) GetRow(db *sqlx.DB) (*PostKey, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, whereArgs)
	}

	row := &PostKey{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnPostKey_LoadOne(row)

	return row, nil
}

func (u *__PostKey_Selector) GetRows(db *sqlx.DB) ([]*PostKey, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*PostKey
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPostKey_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__PostKey_Selector) GetRows2(db *sqlx.DB) ([]PostKey, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*PostKey
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPostKey_LoadMany(rows)

	rows2 := make([]PostKey, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__PostKey_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__PostKey_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PostKey_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PostKey_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PostKey_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.post_keys SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__PostKey_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.post_keys WHERE " + wheresStr

	// run query
	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PostKey ////////////////

func MassInsert_PostKey(rows []PostKey, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "( ms_question_mark .Columns .PrimaryKey.ColumnName }})," //`(?, ?, ?, ?),`
	s := "(?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun.post_keys (" +
		"Key" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Key)

	}

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_PostKey(rows []PostKey, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun.post_keys (" +
		"Key" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Key)

	}

	if LogTableSqlReq.PostKey {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PostKey {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//
