package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// PushChat represents a row from 'sun_push.push_chat'.

// Manualy copy this to project
type PushChat__ struct {
	PushId            int    `json:"PushId"`            // PushId -
	ToUserId          int    `json:"ToUserId"`          // ToUserId -
	PushTypeId        int    `json:"PushTypeId"`        // PushTypeId -
	RoomKey           string `json:"RoomKey"`           // RoomKey -
	ChatKey           string `json:"ChatKey"`           // ChatKey -
	Seq               int    `json:"Seq"`               // Seq -
	UnseenCount       int    `json:"UnseenCount"`       // UnseenCount -
	FromHighMessageId int    `json:"FromHighMessageId"` // FromHighMessageId -
	ToLowMessageId    int    `json:"ToLowMessageId"`    // ToLowMessageId -
	MessageId         int    `json:"MessageId"`         // MessageId -
	MessageFileId     int    `json:"MessageFileId"`     // MessageFileId -
	MessagePb         []byte `json:"MessagePb"`         // MessagePb -
	MessageJson       string `json:"MessageJson"`       // MessageJson -
	CreatedTime       int    `json:"CreatedTime"`       // CreatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PushChat exists in the database.
func (pc *PushChat) Exists() bool {
	return pc._exists
}

// Deleted provides information if the PushChat has been deleted from the database.
func (pc *PushChat) Deleted() bool {
	return pc._deleted
}

// Insert inserts the PushChat to the database.
func (pc *PushChat) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_push.push_chat (` +
		`PushId, ToUserId, PushTypeId, RoomKey, ChatKey, Seq, UnseenCount, FromHighMessageId, ToLowMessageId, MessageId, MessageFileId, MessagePb, MessageJson, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, pc.PushId, pc.ToUserId, pc.PushTypeId, pc.RoomKey, pc.ChatKey, pc.Seq, pc.UnseenCount, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessageFileId, pc.MessagePb, pc.MessageJson, pc.CreatedTime)
	}
	_, err = db.Exec(sqlstr, pc.PushId, pc.ToUserId, pc.PushTypeId, pc.RoomKey, pc.ChatKey, pc.Seq, pc.UnseenCount, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessageFileId, pc.MessagePb, pc.MessageJson, pc.CreatedTime)
	if err != nil {
		return err
	}

	// set existence
	pc._exists = true

	OnPushChat_AfterInsert(pc)

	return nil
}

// Insert inserts the PushChat to the database.
func (pc *PushChat) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_push.push_chat (` +
		`PushId, ToUserId, PushTypeId, RoomKey, ChatKey, Seq, UnseenCount, FromHighMessageId, ToLowMessageId, MessageId, MessageFileId, MessagePb, MessageJson, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, pc.PushId, pc.ToUserId, pc.PushTypeId, pc.RoomKey, pc.ChatKey, pc.Seq, pc.UnseenCount, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessageFileId, pc.MessagePb, pc.MessageJson, pc.CreatedTime)
	}
	_, err = db.Exec(sqlstr, pc.PushId, pc.ToUserId, pc.PushTypeId, pc.RoomKey, pc.ChatKey, pc.Seq, pc.UnseenCount, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessageFileId, pc.MessagePb, pc.MessageJson, pc.CreatedTime)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return err
	}

	pc._exists = true

	OnPushChat_AfterInsert(pc)

	return nil
}

// Update updates the PushChat in the database.
func (pc *PushChat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_push.push_chat SET ` +
		`ToUserId = ?, PushTypeId = ?, RoomKey = ?, ChatKey = ?, Seq = ?, UnseenCount = ?, FromHighMessageId = ?, ToLowMessageId = ?, MessageId = ?, MessageFileId = ?, MessagePb = ?, MessageJson = ?, CreatedTime = ?` +
		` WHERE PushId = ?`

	// run query
	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, pc.ToUserId, pc.PushTypeId, pc.RoomKey, pc.ChatKey, pc.Seq, pc.UnseenCount, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessageFileId, pc.MessagePb, pc.MessageJson, pc.CreatedTime, pc.PushId)
	}
	_, err = db.Exec(sqlstr, pc.ToUserId, pc.PushTypeId, pc.RoomKey, pc.ChatKey, pc.Seq, pc.UnseenCount, pc.FromHighMessageId, pc.ToLowMessageId, pc.MessageId, pc.MessageFileId, pc.MessagePb, pc.MessageJson, pc.CreatedTime, pc.PushId)

	if LogTableSqlReq.PushChat {
		XOLogErr(err)
	}
	OnPushChat_AfterUpdate(pc)

	return err
}

// Save saves the PushChat to the database.
func (pc *PushChat) Save(db XODB) error {
	if pc.Exists() {
		return pc.Update(db)
	}

	return pc.Replace(db)
}

// Delete deletes the PushChat from the database.
func (pc *PushChat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return nil
	}

	// if deleted, bail
	if pc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_push.push_chat WHERE PushId = ?`

	// run query
	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, pc.PushId)
	}
	_, err = db.Exec(sqlstr, pc.PushId)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	pc._deleted = true

	OnPushChat_AfterDelete(pc)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __PushChat_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __PushChat_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __PushChat_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewPushChat_Deleter() *__PushChat_Deleter {
	d := __PushChat_Deleter{whereSep: " AND ", isMysql: true}
	return &d
}

func NewPushChat_Updater() *__PushChat_Updater {
	u := __PushChat_Updater{whereSep: " AND ", isMysql: true}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewPushChat_Selector() *__PushChat_Selector {
	u := __PushChat_Selector{whereSep: " AND ", selectCol: "*", isMysql: true}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__PushChat_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__PushChat_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__PushChat_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PushChat_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PushChat_Deleter) Or() *__PushChat_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PushChat_Deleter) PushId_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) PushId_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) PushId_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) PushId_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushId_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushId_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushId_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushId_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushId_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) ToUserId_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) ToUserId_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) ToUserId_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) ToUserId_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToUserId_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToUserId_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToUserId_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToUserId_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToUserId_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) PushTypeId_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushTypeId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) PushTypeId_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushTypeId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) PushTypeId_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushTypeId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) PushTypeId_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushTypeId_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushTypeId_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushTypeId_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushTypeId_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) PushTypeId_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) Seq_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) Seq_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) Seq_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) Seq_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) Seq_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) Seq_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) Seq_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) Seq_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) Seq_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) UnseenCount_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) UnseenCount_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) UnseenCount_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) UnseenCount_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) UnseenCount_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) UnseenCount_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) UnseenCount_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) UnseenCount_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) UnseenCount_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) FromHighMessageId_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) FromHighMessageId_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) FromHighMessageId_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) FromHighMessageId_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) FromHighMessageId_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) FromHighMessageId_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) FromHighMessageId_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) FromHighMessageId_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) FromHighMessageId_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) ToLowMessageId_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) ToLowMessageId_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) ToLowMessageId_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) ToLowMessageId_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToLowMessageId_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToLowMessageId_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToLowMessageId_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToLowMessageId_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ToLowMessageId_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) MessageId_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) MessageId_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) MessageId_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) MessageId_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageId_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageId_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageId_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageId_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageId_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) MessageFileId_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) MessageFileId_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) MessageFileId_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) MessageFileId_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageFileId_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageFileId_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageFileId_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageFileId_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageFileId_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) CreatedTime_In(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) CreatedTime_Ins(ins ...int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) CreatedTime_NotIn(ins []int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) CreatedTime_Eq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) CreatedTime_NotEq(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) CreatedTime_LT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) CreatedTime_LE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) CreatedTime_GT(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) CreatedTime_GE(val int) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__PushChat_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PushChat_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PushChat_Updater) Or() *__PushChat_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PushChat_Updater) PushId_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) PushId_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) PushId_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) PushId_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushId_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushId_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushId_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushId_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushId_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) ToUserId_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) ToUserId_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) ToUserId_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) ToUserId_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToUserId_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToUserId_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToUserId_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToUserId_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToUserId_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) PushTypeId_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushTypeId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) PushTypeId_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushTypeId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) PushTypeId_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushTypeId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) PushTypeId_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushTypeId_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushTypeId_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushTypeId_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushTypeId_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) PushTypeId_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) Seq_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) Seq_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) Seq_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) Seq_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) Seq_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) Seq_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) Seq_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) Seq_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) Seq_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) UnseenCount_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) UnseenCount_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) UnseenCount_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) UnseenCount_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) UnseenCount_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) UnseenCount_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) UnseenCount_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) UnseenCount_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) UnseenCount_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) FromHighMessageId_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) FromHighMessageId_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) FromHighMessageId_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) FromHighMessageId_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) FromHighMessageId_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) FromHighMessageId_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) FromHighMessageId_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) FromHighMessageId_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) FromHighMessageId_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) ToLowMessageId_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) ToLowMessageId_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) ToLowMessageId_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) ToLowMessageId_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToLowMessageId_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToLowMessageId_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToLowMessageId_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToLowMessageId_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ToLowMessageId_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) MessageId_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) MessageId_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) MessageId_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) MessageId_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageId_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageId_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageId_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageId_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageId_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) MessageFileId_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) MessageFileId_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) MessageFileId_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) MessageFileId_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageFileId_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageFileId_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageFileId_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageFileId_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageFileId_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) CreatedTime_In(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) CreatedTime_Ins(ins ...int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) CreatedTime_NotIn(ins []int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) CreatedTime_Eq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) CreatedTime_NotEq(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) CreatedTime_LT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) CreatedTime_LE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) CreatedTime_GT(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) CreatedTime_GE(val int) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__PushChat_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__PushChat_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__PushChat_Selector) Or() *__PushChat_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PushChat_Selector) PushId_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) PushId_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) PushId_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) PushId_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushId_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushId_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushId_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushId_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushId_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) ToUserId_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) ToUserId_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) ToUserId_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) ToUserId_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToUserId_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToUserId_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToUserId_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToUserId_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToUserId_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) PushTypeId_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushTypeId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) PushTypeId_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushTypeId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) PushTypeId_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PushTypeId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) PushTypeId_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushTypeId_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushTypeId_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushTypeId_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushTypeId_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) PushTypeId_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PushTypeId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) Seq_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) Seq_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) Seq_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) Seq_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) Seq_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) Seq_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) Seq_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) Seq_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) Seq_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) UnseenCount_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) UnseenCount_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) UnseenCount_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) UnseenCount_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) UnseenCount_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) UnseenCount_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) UnseenCount_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) UnseenCount_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) UnseenCount_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) FromHighMessageId_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) FromHighMessageId_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) FromHighMessageId_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromHighMessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) FromHighMessageId_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) FromHighMessageId_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) FromHighMessageId_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) FromHighMessageId_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) FromHighMessageId_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) FromHighMessageId_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromHighMessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) ToLowMessageId_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) ToLowMessageId_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) ToLowMessageId_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToLowMessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) ToLowMessageId_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToLowMessageId_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToLowMessageId_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToLowMessageId_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToLowMessageId_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ToLowMessageId_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToLowMessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) MessageId_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) MessageId_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) MessageId_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) MessageId_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageId_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageId_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageId_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageId_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageId_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) MessageFileId_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) MessageFileId_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) MessageFileId_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageFileId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) MessageFileId_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageFileId_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageFileId_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageFileId_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageFileId_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageFileId_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageFileId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) CreatedTime_In(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) CreatedTime_Ins(ins ...int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) CreatedTime_NotIn(ins []int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) CreatedTime_Eq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) CreatedTime_NotEq(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) CreatedTime_LT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) CreatedTime_LE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) CreatedTime_GT(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) CreatedTime_GE(val int) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__PushChat_Deleter) RoomKey_In(ins []string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) RoomKey_NotIn(ins []string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat_Deleter) RoomKey_Like(val string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) RoomKey_Eq(val string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) RoomKey_NotEq(val string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) ChatKey_In(ins []string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) ChatKey_NotIn(ins []string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat_Deleter) ChatKey_Like(val string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) ChatKey_Eq(val string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) ChatKey_NotEq(val string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Deleter) MessageJson_In(ins []string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Deleter) MessageJson_NotIn(ins []string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat_Deleter) MessageJson_Like(val string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Deleter) MessageJson_Eq(val string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Deleter) MessageJson_NotEq(val string) *__PushChat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PushChat_Updater) RoomKey_In(ins []string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) RoomKey_NotIn(ins []string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat_Updater) RoomKey_Like(val string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) RoomKey_Eq(val string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) RoomKey_NotEq(val string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) ChatKey_In(ins []string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) ChatKey_NotIn(ins []string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat_Updater) ChatKey_Like(val string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) ChatKey_Eq(val string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) ChatKey_NotEq(val string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Updater) MessageJson_In(ins []string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Updater) MessageJson_NotIn(ins []string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat_Updater) MessageJson_Like(val string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Updater) MessageJson_Eq(val string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Updater) MessageJson_NotEq(val string) *__PushChat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PushChat_Selector) RoomKey_In(ins []string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) RoomKey_NotIn(ins []string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat_Selector) RoomKey_Like(val string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) RoomKey_Eq(val string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) RoomKey_NotEq(val string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) ChatKey_In(ins []string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) ChatKey_NotIn(ins []string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat_Selector) ChatKey_Like(val string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) ChatKey_Eq(val string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) ChatKey_NotEq(val string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PushChat_Selector) MessageJson_In(ins []string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PushChat_Selector) MessageJson_NotIn(ins []string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageJson NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PushChat_Selector) MessageJson_Like(val string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PushChat_Selector) MessageJson_Eq(val string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PushChat_Selector) MessageJson_NotEq(val string) *__PushChat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageJson != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PushChat_Updater) PushId(newVal int) *__PushChat_Updater {
	up := updateCol{" PushId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PushId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) PushId_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" PushId = PushId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PushId = PushId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PushId = PushId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PushId = PushId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat_Updater) ToUserId(newVal int) *__PushChat_Updater {
	up := updateCol{" ToUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ToUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) ToUserId_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" ToUserId = ToUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ToUserId = ToUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ToUserId = ToUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ToUserId = ToUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat_Updater) PushTypeId(newVal int) *__PushChat_Updater {
	up := updateCol{" PushTypeId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PushTypeId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) PushTypeId_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" PushTypeId = PushTypeId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PushTypeId = PushTypeId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PushTypeId = PushTypeId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PushTypeId = PushTypeId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__PushChat_Updater) RoomKey(newVal string) *__PushChat_Updater {
	up := updateCol{"RoomKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" RoomKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__PushChat_Updater) ChatKey(newVal string) *__PushChat_Updater {
	up := updateCol{"ChatKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ChatKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__PushChat_Updater) Seq(newVal int) *__PushChat_Updater {
	up := updateCol{" Seq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Seq = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) Seq_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" Seq = Seq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Seq = Seq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Seq = Seq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Seq = Seq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat_Updater) UnseenCount(newVal int) *__PushChat_Updater {
	up := updateCol{" UnseenCount = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UnseenCount = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) UnseenCount_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" UnseenCount = UnseenCount+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UnseenCount = UnseenCount+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UnseenCount = UnseenCount- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UnseenCount = UnseenCount- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat_Updater) FromHighMessageId(newVal int) *__PushChat_Updater {
	up := updateCol{" FromHighMessageId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" FromHighMessageId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) FromHighMessageId_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" FromHighMessageId = FromHighMessageId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" FromHighMessageId = FromHighMessageId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" FromHighMessageId = FromHighMessageId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" FromHighMessageId = FromHighMessageId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat_Updater) ToLowMessageId(newVal int) *__PushChat_Updater {
	up := updateCol{" ToLowMessageId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ToLowMessageId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) ToLowMessageId_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" ToLowMessageId = ToLowMessageId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ToLowMessageId = ToLowMessageId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ToLowMessageId = ToLowMessageId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ToLowMessageId = ToLowMessageId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat_Updater) MessageId(newVal int) *__PushChat_Updater {
	up := updateCol{" MessageId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MessageId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) MessageId_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" MessageId = MessageId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MessageId = MessageId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MessageId = MessageId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MessageId = MessageId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PushChat_Updater) MessageFileId(newVal int) *__PushChat_Updater {
	up := updateCol{" MessageFileId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MessageFileId = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) MessageFileId_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" MessageFileId = MessageFileId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MessageFileId = MessageFileId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MessageFileId = MessageFileId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MessageFileId = MessageFileId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

//ints

//string
func (u *__PushChat_Updater) MessageJson(newVal string) *__PushChat_Updater {
	up := updateCol{"MessageJson = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MessageJson = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__PushChat_Updater) CreatedTime(newVal int) *__PushChat_Updater {
	up := updateCol{" CreatedTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatedTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__PushChat_Updater) CreatedTime_Increment(count int) *__PushChat_Updater {
	if count > 0 {
		up := updateCol{" CreatedTime = CreatedTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatedTime = CreatedTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatedTime = CreatedTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatedTime = CreatedTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PushChat_Selector) OrderBy_PushId_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY PushId DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_PushId_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY PushId ASC "
	return u
}

func (u *__PushChat_Selector) Select_PushId() *__PushChat_Selector {
	u.selectCol = "PushId"
	return u
}

func (u *__PushChat_Selector) OrderBy_ToUserId_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_ToUserId_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__PushChat_Selector) Select_ToUserId() *__PushChat_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__PushChat_Selector) OrderBy_PushTypeId_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY PushTypeId DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_PushTypeId_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY PushTypeId ASC "
	return u
}

func (u *__PushChat_Selector) Select_PushTypeId() *__PushChat_Selector {
	u.selectCol = "PushTypeId"
	return u
}

func (u *__PushChat_Selector) OrderBy_RoomKey_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_RoomKey_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__PushChat_Selector) Select_RoomKey() *__PushChat_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__PushChat_Selector) OrderBy_ChatKey_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY ChatKey DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_ChatKey_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY ChatKey ASC "
	return u
}

func (u *__PushChat_Selector) Select_ChatKey() *__PushChat_Selector {
	u.selectCol = "ChatKey"
	return u
}

func (u *__PushChat_Selector) OrderBy_Seq_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY Seq DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_Seq_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY Seq ASC "
	return u
}

func (u *__PushChat_Selector) Select_Seq() *__PushChat_Selector {
	u.selectCol = "Seq"
	return u
}

func (u *__PushChat_Selector) OrderBy_UnseenCount_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY UnseenCount DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_UnseenCount_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY UnseenCount ASC "
	return u
}

func (u *__PushChat_Selector) Select_UnseenCount() *__PushChat_Selector {
	u.selectCol = "UnseenCount"
	return u
}

func (u *__PushChat_Selector) OrderBy_FromHighMessageId_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY FromHighMessageId DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_FromHighMessageId_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY FromHighMessageId ASC "
	return u
}

func (u *__PushChat_Selector) Select_FromHighMessageId() *__PushChat_Selector {
	u.selectCol = "FromHighMessageId"
	return u
}

func (u *__PushChat_Selector) OrderBy_ToLowMessageId_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY ToLowMessageId DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_ToLowMessageId_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY ToLowMessageId ASC "
	return u
}

func (u *__PushChat_Selector) Select_ToLowMessageId() *__PushChat_Selector {
	u.selectCol = "ToLowMessageId"
	return u
}

func (u *__PushChat_Selector) OrderBy_MessageId_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY MessageId DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_MessageId_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY MessageId ASC "
	return u
}

func (u *__PushChat_Selector) Select_MessageId() *__PushChat_Selector {
	u.selectCol = "MessageId"
	return u
}

func (u *__PushChat_Selector) OrderBy_MessageFileId_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY MessageFileId DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_MessageFileId_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY MessageFileId ASC "
	return u
}

func (u *__PushChat_Selector) Select_MessageFileId() *__PushChat_Selector {
	u.selectCol = "MessageFileId"
	return u
}

func (u *__PushChat_Selector) OrderBy_MessagePb_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY MessagePb DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_MessagePb_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY MessagePb ASC "
	return u
}

func (u *__PushChat_Selector) Select_MessagePb() *__PushChat_Selector {
	u.selectCol = "MessagePb"
	return u
}

func (u *__PushChat_Selector) OrderBy_MessageJson_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY MessageJson DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_MessageJson_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY MessageJson ASC "
	return u
}

func (u *__PushChat_Selector) Select_MessageJson() *__PushChat_Selector {
	u.selectCol = "MessageJson"
	return u
}

func (u *__PushChat_Selector) OrderBy_CreatedTime_Desc() *__PushChat_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__PushChat_Selector) OrderBy_CreatedTime_Asc() *__PushChat_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__PushChat_Selector) Select_CreatedTime() *__PushChat_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__PushChat_Selector) Limit(num int) *__PushChat_Selector {
	u.limit = num
	return u
}

func (u *__PushChat_Selector) Offset(num int) *__PushChat_Selector {
	u.offset = num
	return u
}

func (u *__PushChat_Selector) Order_Rand() *__PushChat_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PushChat_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_push.push_chat"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PushChat_Selector) GetRow(db *sqlx.DB) (*PushChat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, whereArgs)
	}

	row := &PushChat{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnPushChat_LoadOne(row)

	return row, nil
}

func (u *__PushChat_Selector) GetRows(db *sqlx.DB) ([]*PushChat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*PushChat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPushChat_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__PushChat_Selector) GetRows2(db *sqlx.DB) ([]PushChat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*PushChat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPushChat_LoadMany(rows)

	rows2 := make([]PushChat, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__PushChat_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__PushChat_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PushChat_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__PushChat_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PushChat_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_push.push_chat SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__PushChat_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_push.push_chat WHERE " + wheresStr

	// run query
	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PushChat ////////////////

func MassInsert_PushChat(rows []PushChat, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(14, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun_push.push_chat (" +
		"PushId, ToUserId, PushTypeId, RoomKey, ChatKey, Seq, UnseenCount, FromHighMessageId, ToLowMessageId, MessageId, MessageFileId, MessagePb, MessageJson, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PushId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.PushTypeId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.Seq)
		vals = append(vals, row.UnseenCount)
		vals = append(vals, row.FromHighMessageId)
		vals = append(vals, row.ToLowMessageId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.MessagePb)
		vals = append(vals, row.MessageJson)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_PushChat(rows []PushChat, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(14, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun_push.push_chat (" +
		"PushId, ToUserId, PushTypeId, RoomKey, ChatKey, Seq, UnseenCount, FromHighMessageId, ToLowMessageId, MessageId, MessageFileId, MessagePb, MessageJson, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PushId)
		vals = append(vals, row.ToUserId)
		vals = append(vals, row.PushTypeId)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.Seq)
		vals = append(vals, row.UnseenCount)
		vals = append(vals, row.FromHighMessageId)
		vals = append(vals, row.ToLowMessageId)
		vals = append(vals, row.MessageId)
		vals = append(vals, row.MessageFileId)
		vals = append(vals, row.MessagePb)
		vals = append(vals, row.MessageJson)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.PushChat {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.PushChat {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//
