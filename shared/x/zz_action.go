package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Action represents a row from 'sun.action'.

// Manualy copy this to project
type Action__ struct {
	ActionId       int `json:"ActionId"`       // ActionId -
	ActorUserId    int `json:"ActorUserId"`    // ActorUserId -
	ActionTypeEnum int `json:"ActionTypeEnum"` // ActionTypeEnum -
	PeerUserId     int `json:"PeerUserId"`     // PeerUserId -
	PostId         int `json:"PostId"`         // PostId -
	CommentId      int `json:"CommentId"`      // CommentId -
	Murmur64Hash   int `json:"Murmur64Hash"`   // Murmur64Hash -
	CreatedTime    int `json:"CreatedTime"`    // CreatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Action exists in the database.
func (a *Action) Exists() bool {
	return a._exists
}

// Deleted provides information if the Action has been deleted from the database.
func (a *Action) Deleted() bool {
	return a._deleted
}

// Insert inserts the Action to the database.
func (a *Action) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.action (` +
		`ActionId, ActorUserId, ActionTypeEnum, PeerUserId, PostId, CommentId, Murmur64Hash, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.ActionId, a.ActorUserId, a.ActionTypeEnum, a.PeerUserId, a.PostId, a.CommentId, a.Murmur64Hash, a.CreatedTime)
	_, err = db.Exec(sqlstr, a.ActionId, a.ActorUserId, a.ActionTypeEnum, a.PeerUserId, a.PostId, a.CommentId, a.Murmur64Hash, a.CreatedTime)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	OnAction_AfterInsert(a)

	return nil
}

// Insert inserts the Action to the database.
func (a *Action) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.action (` +
		`ActionId, ActorUserId, ActionTypeEnum, PeerUserId, PostId, CommentId, Murmur64Hash, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.ActionId, a.ActorUserId, a.ActionTypeEnum, a.PeerUserId, a.PostId, a.CommentId, a.Murmur64Hash, a.CreatedTime)
	_, err = db.Exec(sqlstr, a.ActionId, a.ActorUserId, a.ActionTypeEnum, a.PeerUserId, a.PostId, a.CommentId, a.Murmur64Hash, a.CreatedTime)
	if err != nil {
		XOLogErr(err)
		return err
	}

	a._exists = true

	OnAction_AfterInsert(a)

	return nil
}

// Update updates the Action in the database.
func (a *Action) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.action SET ` +
		`ActorUserId = ?, ActionTypeEnum = ?, PeerUserId = ?, PostId = ?, CommentId = ?, Murmur64Hash = ?, CreatedTime = ?` +
		` WHERE ActionId = ?`

	// run query
	XOLog(sqlstr, a.ActorUserId, a.ActionTypeEnum, a.PeerUserId, a.PostId, a.CommentId, a.Murmur64Hash, a.CreatedTime, a.ActionId)
	_, err = db.Exec(sqlstr, a.ActorUserId, a.ActionTypeEnum, a.PeerUserId, a.PostId, a.CommentId, a.Murmur64Hash, a.CreatedTime, a.ActionId)

	XOLogErr(err)
	OnAction_AfterUpdate(a)

	return err
}

// Save saves the Action to the database.
func (a *Action) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Replace(db)
}

// Delete deletes the Action from the database.
func (a *Action) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.action WHERE ActionId = ?`

	// run query
	XOLog(sqlstr, a.ActionId)
	_, err = db.Exec(sqlstr, a.ActionId)
	if err != nil {
		XOLogErr(err)
		return err
	}

	// set deleted
	a._deleted = true

	OnAction_AfterDelete(a)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Action_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Action_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Action_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewAction_Deleter() *__Action_Deleter {
	d := __Action_Deleter{whereSep: " AND "}
	return &d
}

func NewAction_Updater() *__Action_Updater {
	u := __Action_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewAction_Selector() *__Action_Selector {
	u := __Action_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Action_Deleter) Or() *__Action_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Action_Deleter) ActionId_In(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) ActionId_Ins(ins ...int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) ActionId_NotIn(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Deleter) ActionId_Eq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionId_NotEq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionId_LT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionId_LE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionId_GT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionId_GE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Deleter) ActorUserId_In(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) ActorUserId_Ins(ins ...int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) ActorUserId_NotIn(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Deleter) ActorUserId_Eq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActorUserId_NotEq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActorUserId_LT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActorUserId_LE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActorUserId_GT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActorUserId_GE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Deleter) ActionTypeEnum_In(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) ActionTypeEnum_Ins(ins ...int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) ActionTypeEnum_NotIn(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Deleter) ActionTypeEnum_Eq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionTypeEnum_NotEq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionTypeEnum_LT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionTypeEnum_LE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionTypeEnum_GT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) ActionTypeEnum_GE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Deleter) PeerUserId_In(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) PeerUserId_Ins(ins ...int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) PeerUserId_NotIn(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Deleter) PeerUserId_Eq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PeerUserId_NotEq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PeerUserId_LT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PeerUserId_LE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PeerUserId_GT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PeerUserId_GE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Deleter) PostId_In(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) PostId_Ins(ins ...int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) PostId_NotIn(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Deleter) PostId_Eq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PostId_NotEq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PostId_LT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PostId_LE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PostId_GT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) PostId_GE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Deleter) CommentId_In(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) CommentId_Ins(ins ...int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) CommentId_NotIn(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Deleter) CommentId_Eq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CommentId_NotEq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CommentId_LT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CommentId_LE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CommentId_GT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CommentId_GE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Deleter) Murmur64Hash_In(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) Murmur64Hash_Ins(ins ...int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) Murmur64Hash_NotIn(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Deleter) Murmur64Hash_Eq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) Murmur64Hash_NotEq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) Murmur64Hash_LT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) Murmur64Hash_LE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) Murmur64Hash_GT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) Murmur64Hash_GE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Deleter) CreatedTime_In(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) CreatedTime_Ins(ins ...int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Deleter) CreatedTime_NotIn(ins []int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Deleter) CreatedTime_Eq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CreatedTime_NotEq(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CreatedTime_LT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CreatedTime_LE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CreatedTime_GT(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Deleter) CreatedTime_GE(val int) *__Action_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Action_Updater) Or() *__Action_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Action_Updater) ActionId_In(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) ActionId_Ins(ins ...int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) ActionId_NotIn(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Updater) ActionId_Eq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionId_NotEq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionId_LT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionId_LE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionId_GT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionId_GE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Updater) ActorUserId_In(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) ActorUserId_Ins(ins ...int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) ActorUserId_NotIn(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Updater) ActorUserId_Eq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActorUserId_NotEq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActorUserId_LT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActorUserId_LE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActorUserId_GT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActorUserId_GE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Updater) ActionTypeEnum_In(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) ActionTypeEnum_Ins(ins ...int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) ActionTypeEnum_NotIn(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Updater) ActionTypeEnum_Eq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionTypeEnum_NotEq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionTypeEnum_LT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionTypeEnum_LE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionTypeEnum_GT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) ActionTypeEnum_GE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Updater) PeerUserId_In(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) PeerUserId_Ins(ins ...int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) PeerUserId_NotIn(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Updater) PeerUserId_Eq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PeerUserId_NotEq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PeerUserId_LT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PeerUserId_LE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PeerUserId_GT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PeerUserId_GE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Updater) PostId_In(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) PostId_Ins(ins ...int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) PostId_NotIn(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Updater) PostId_Eq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PostId_NotEq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PostId_LT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PostId_LE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PostId_GT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) PostId_GE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Updater) CommentId_In(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) CommentId_Ins(ins ...int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) CommentId_NotIn(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Updater) CommentId_Eq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CommentId_NotEq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CommentId_LT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CommentId_LE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CommentId_GT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CommentId_GE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Updater) Murmur64Hash_In(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) Murmur64Hash_Ins(ins ...int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) Murmur64Hash_NotIn(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Updater) Murmur64Hash_Eq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) Murmur64Hash_NotEq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) Murmur64Hash_LT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) Murmur64Hash_LE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) Murmur64Hash_GT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) Murmur64Hash_GE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Updater) CreatedTime_In(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) CreatedTime_Ins(ins ...int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Updater) CreatedTime_NotIn(ins []int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Updater) CreatedTime_Eq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CreatedTime_NotEq(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CreatedTime_LT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CreatedTime_LE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CreatedTime_GT(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Updater) CreatedTime_GE(val int) *__Action_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Action_Selector) Or() *__Action_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Action_Selector) ActionId_In(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) ActionId_Ins(ins ...int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) ActionId_NotIn(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Selector) ActionId_Eq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionId_NotEq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionId_LT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionId_LE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionId_GT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionId_GE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Selector) ActorUserId_In(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) ActorUserId_Ins(ins ...int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) ActorUserId_NotIn(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Selector) ActorUserId_Eq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActorUserId_NotEq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActorUserId_LT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActorUserId_LE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActorUserId_GT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActorUserId_GE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Selector) ActionTypeEnum_In(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) ActionTypeEnum_Ins(ins ...int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) ActionTypeEnum_NotIn(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Selector) ActionTypeEnum_Eq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionTypeEnum_NotEq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionTypeEnum_LT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionTypeEnum_LE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionTypeEnum_GT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) ActionTypeEnum_GE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Selector) PeerUserId_In(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) PeerUserId_Ins(ins ...int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) PeerUserId_NotIn(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Selector) PeerUserId_Eq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PeerUserId_NotEq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PeerUserId_LT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PeerUserId_LE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PeerUserId_GT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PeerUserId_GE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Selector) PostId_In(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) PostId_Ins(ins ...int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) PostId_NotIn(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Selector) PostId_Eq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PostId_NotEq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PostId_LT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PostId_LE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PostId_GT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) PostId_GE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Selector) CommentId_In(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) CommentId_Ins(ins ...int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) CommentId_NotIn(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Selector) CommentId_Eq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CommentId_NotEq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CommentId_LT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CommentId_LE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CommentId_GT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CommentId_GE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Selector) Murmur64Hash_In(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) Murmur64Hash_Ins(ins ...int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) Murmur64Hash_NotIn(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Selector) Murmur64Hash_Eq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) Murmur64Hash_NotEq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) Murmur64Hash_LT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) Murmur64Hash_LE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) Murmur64Hash_GT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) Murmur64Hash_GE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Action_Selector) CreatedTime_In(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) CreatedTime_Ins(ins ...int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Action_Selector) CreatedTime_NotIn(ins []int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Action_Selector) CreatedTime_Eq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CreatedTime_NotEq(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CreatedTime_LT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CreatedTime_LE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CreatedTime_GT(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Action_Selector) CreatedTime_GE(val int) *__Action_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Action_Updater) ActionId(newVal int) *__Action_Updater {
	u.updates[" ActionId = ? "] = newVal
	return u
}

func (u *__Action_Updater) ActionId_Increment(count int) *__Action_Updater {
	if count > 0 {
		u.updates[" ActionId = ActionId+? "] = count
	}

	if count < 0 {
		u.updates[" ActionId = ActionId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Action_Updater) ActorUserId(newVal int) *__Action_Updater {
	u.updates[" ActorUserId = ? "] = newVal
	return u
}

func (u *__Action_Updater) ActorUserId_Increment(count int) *__Action_Updater {
	if count > 0 {
		u.updates[" ActorUserId = ActorUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ActorUserId = ActorUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Action_Updater) ActionTypeEnum(newVal int) *__Action_Updater {
	u.updates[" ActionTypeEnum = ? "] = newVal
	return u
}

func (u *__Action_Updater) ActionTypeEnum_Increment(count int) *__Action_Updater {
	if count > 0 {
		u.updates[" ActionTypeEnum = ActionTypeEnum+? "] = count
	}

	if count < 0 {
		u.updates[" ActionTypeEnum = ActionTypeEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Action_Updater) PeerUserId(newVal int) *__Action_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

func (u *__Action_Updater) PeerUserId_Increment(count int) *__Action_Updater {
	if count > 0 {
		u.updates[" PeerUserId = PeerUserId+? "] = count
	}

	if count < 0 {
		u.updates[" PeerUserId = PeerUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Action_Updater) PostId(newVal int) *__Action_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__Action_Updater) PostId_Increment(count int) *__Action_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Action_Updater) CommentId(newVal int) *__Action_Updater {
	u.updates[" CommentId = ? "] = newVal
	return u
}

func (u *__Action_Updater) CommentId_Increment(count int) *__Action_Updater {
	if count > 0 {
		u.updates[" CommentId = CommentId+? "] = count
	}

	if count < 0 {
		u.updates[" CommentId = CommentId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Action_Updater) Murmur64Hash(newVal int) *__Action_Updater {
	u.updates[" Murmur64Hash = ? "] = newVal
	return u
}

func (u *__Action_Updater) Murmur64Hash_Increment(count int) *__Action_Updater {
	if count > 0 {
		u.updates[" Murmur64Hash = Murmur64Hash+? "] = count
	}

	if count < 0 {
		u.updates[" Murmur64Hash = Murmur64Hash-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Action_Updater) CreatedTime(newVal int) *__Action_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Action_Updater) CreatedTime_Increment(count int) *__Action_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Action_Selector) OrderBy_ActionId_Desc() *__Action_Selector {
	u.orderBy = " ORDER BY ActionId DESC "
	return u
}

func (u *__Action_Selector) OrderBy_ActionId_Asc() *__Action_Selector {
	u.orderBy = " ORDER BY ActionId ASC "
	return u
}

func (u *__Action_Selector) Select_ActionId() *__Action_Selector {
	u.selectCol = "ActionId"
	return u
}

func (u *__Action_Selector) OrderBy_ActorUserId_Desc() *__Action_Selector {
	u.orderBy = " ORDER BY ActorUserId DESC "
	return u
}

func (u *__Action_Selector) OrderBy_ActorUserId_Asc() *__Action_Selector {
	u.orderBy = " ORDER BY ActorUserId ASC "
	return u
}

func (u *__Action_Selector) Select_ActorUserId() *__Action_Selector {
	u.selectCol = "ActorUserId"
	return u
}

func (u *__Action_Selector) OrderBy_ActionTypeEnum_Desc() *__Action_Selector {
	u.orderBy = " ORDER BY ActionTypeEnum DESC "
	return u
}

func (u *__Action_Selector) OrderBy_ActionTypeEnum_Asc() *__Action_Selector {
	u.orderBy = " ORDER BY ActionTypeEnum ASC "
	return u
}

func (u *__Action_Selector) Select_ActionTypeEnum() *__Action_Selector {
	u.selectCol = "ActionTypeEnum"
	return u
}

func (u *__Action_Selector) OrderBy_PeerUserId_Desc() *__Action_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__Action_Selector) OrderBy_PeerUserId_Asc() *__Action_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__Action_Selector) Select_PeerUserId() *__Action_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__Action_Selector) OrderBy_PostId_Desc() *__Action_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Action_Selector) OrderBy_PostId_Asc() *__Action_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Action_Selector) Select_PostId() *__Action_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Action_Selector) OrderBy_CommentId_Desc() *__Action_Selector {
	u.orderBy = " ORDER BY CommentId DESC "
	return u
}

func (u *__Action_Selector) OrderBy_CommentId_Asc() *__Action_Selector {
	u.orderBy = " ORDER BY CommentId ASC "
	return u
}

func (u *__Action_Selector) Select_CommentId() *__Action_Selector {
	u.selectCol = "CommentId"
	return u
}

func (u *__Action_Selector) OrderBy_Murmur64Hash_Desc() *__Action_Selector {
	u.orderBy = " ORDER BY Murmur64Hash DESC "
	return u
}

func (u *__Action_Selector) OrderBy_Murmur64Hash_Asc() *__Action_Selector {
	u.orderBy = " ORDER BY Murmur64Hash ASC "
	return u
}

func (u *__Action_Selector) Select_Murmur64Hash() *__Action_Selector {
	u.selectCol = "Murmur64Hash"
	return u
}

func (u *__Action_Selector) OrderBy_CreatedTime_Desc() *__Action_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Action_Selector) OrderBy_CreatedTime_Asc() *__Action_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Action_Selector) Select_CreatedTime() *__Action_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Action_Selector) Limit(num int) *__Action_Selector {
	u.limit = num
	return u
}

func (u *__Action_Selector) Offset(num int) *__Action_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Action_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.action"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Action_Selector) GetRow(db *sqlx.DB) (*Action, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Action{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	row._exists = true

	OnAction_LoadOne(row)

	return row, nil
}

func (u *__Action_Selector) GetRows(db *sqlx.DB) ([]*Action, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Action
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnAction_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Action_Selector) GetRows2(db *sqlx.DB) ([]Action, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []*Action
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnAction_LoadMany(rows)

	rows2 := make([]Action, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Action_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return "", err
	}

	return res, nil
}

func (u *__Action_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Action_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return nil, err
	}

	return rows, nil
}

func (u *__Action_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Action_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.action SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

func (d *__Action_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.action WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		XOLogErr(err)
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Action ////////////////

func MassInsert_Action(rows []Action, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun.action (" +
		"ActionId, ActorUserId, ActionTypeEnum, PeerUserId, PostId, CommentId, Murmur64Hash, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ActionId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.ActionTypeEnum)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.CommentId)
		vals = append(vals, row.Murmur64Hash)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

func MassReplace_Action(rows []Action, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun.action (" +
		"ActionId, ActorUserId, ActionTypeEnum, PeerUserId, PostId, CommentId, Murmur64Hash, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ActionId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.ActionTypeEnum)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.CommentId)
		vals = append(vals, row.Murmur64Hash)
		vals = append(vals, row.CreatedTime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		XOLogErr(err)
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//
