package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Post represents a row from 'sun.post'.

// Manualy copy this to project
type Post__ struct {
	PostId         int    `json:"PostId"`         // PostId -
	UserId         int    `json:"UserId"`         // UserId -
	PostTypeEnum   int    `json:"PostTypeEnum"`   // PostTypeEnum -
	MediaId        int    `json:"MediaId"`        // MediaId -
	PostKey        string `json:"PostKey"`        // PostKey -
	Text           string `json:"Text"`           // Text -
	RichText       string `json:"RichText"`       // RichText -
	MediaCount     int    `json:"MediaCount"`     // MediaCount -
	SharedTo       int    `json:"SharedTo"`       // SharedTo -
	DisableComment int    `json:"DisableComment"` // DisableComment -
	HasTag         int    `json:"HasTag"`         // HasTag -
	Seq            int    `json:"Seq"`            // Seq -
	CommentsCount  int    `json:"CommentsCount"`  // CommentsCount -
	LikesCount     int    `json:"LikesCount"`     // LikesCount -
	ViewsCount     int    `json:"ViewsCount"`     // ViewsCount -
	EditedTime     int    `json:"EditedTime"`     // EditedTime -
	CreatedTime    int    `json:"CreatedTime"`    // CreatedTime -
	ReSharedPostId int    `json:"ReSharedPostId"` // ReSharedPostId -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Post exists in the database.
func (p *Post) Exists() bool {
	return p._exists
}

// Deleted provides information if the Post has been deleted from the database.
func (p *Post) Deleted() bool {
	return p._deleted
}

// Insert inserts the Post to the database.
func (p *Post) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.post (` +
		`PostId, UserId, PostTypeEnum, MediaId, PostKey, Text, RichText, MediaCount, SharedTo, DisableComment, HasTag, Seq, CommentsCount, LikesCount, ViewsCount, EditedTime, CreatedTime, ReSharedPostId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Post {
		XOLog(sqlstr, p.PostId, p.UserId, p.PostTypeEnum, p.MediaId, p.PostKey, p.Text, p.RichText, p.MediaCount, p.SharedTo, p.DisableComment, p.HasTag, p.Seq, p.CommentsCount, p.LikesCount, p.ViewsCount, p.EditedTime, p.CreatedTime, p.ReSharedPostId)
	}
	_, err = db.Exec(sqlstr, p.PostId, p.UserId, p.PostTypeEnum, p.MediaId, p.PostKey, p.Text, p.RichText, p.MediaCount, p.SharedTo, p.DisableComment, p.HasTag, p.Seq, p.CommentsCount, p.LikesCount, p.ViewsCount, p.EditedTime, p.CreatedTime, p.ReSharedPostId)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	OnPost_AfterInsert(p)

	return nil
}

// Insert inserts the Post to the database.
func (p *Post) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.post (` +
		`PostId, UserId, PostTypeEnum, MediaId, PostKey, Text, RichText, MediaCount, SharedTo, DisableComment, HasTag, Seq, CommentsCount, LikesCount, ViewsCount, EditedTime, CreatedTime, ReSharedPostId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Post {
		XOLog(sqlstr, p.PostId, p.UserId, p.PostTypeEnum, p.MediaId, p.PostKey, p.Text, p.RichText, p.MediaCount, p.SharedTo, p.DisableComment, p.HasTag, p.Seq, p.CommentsCount, p.LikesCount, p.ViewsCount, p.EditedTime, p.CreatedTime, p.ReSharedPostId)
	}
	_, err = db.Exec(sqlstr, p.PostId, p.UserId, p.PostTypeEnum, p.MediaId, p.PostKey, p.Text, p.RichText, p.MediaCount, p.SharedTo, p.DisableComment, p.HasTag, p.Seq, p.CommentsCount, p.LikesCount, p.ViewsCount, p.EditedTime, p.CreatedTime, p.ReSharedPostId)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return err
	}

	p._exists = true

	OnPost_AfterInsert(p)

	return nil
}

// Update updates the Post in the database.
func (p *Post) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.post SET ` +
		`UserId = ?, PostTypeEnum = ?, MediaId = ?, PostKey = ?, Text = ?, RichText = ?, MediaCount = ?, SharedTo = ?, DisableComment = ?, HasTag = ?, Seq = ?, CommentsCount = ?, LikesCount = ?, ViewsCount = ?, EditedTime = ?, CreatedTime = ?, ReSharedPostId = ?` +
		` WHERE PostId = ?`

	// run query
	if LogTableSqlReq.Post {
		XOLog(sqlstr, p.UserId, p.PostTypeEnum, p.MediaId, p.PostKey, p.Text, p.RichText, p.MediaCount, p.SharedTo, p.DisableComment, p.HasTag, p.Seq, p.CommentsCount, p.LikesCount, p.ViewsCount, p.EditedTime, p.CreatedTime, p.ReSharedPostId, p.PostId)
	}
	_, err = db.Exec(sqlstr, p.UserId, p.PostTypeEnum, p.MediaId, p.PostKey, p.Text, p.RichText, p.MediaCount, p.SharedTo, p.DisableComment, p.HasTag, p.Seq, p.CommentsCount, p.LikesCount, p.ViewsCount, p.EditedTime, p.CreatedTime, p.ReSharedPostId, p.PostId)

	if LogTableSqlReq.Post {
		XOLogErr(err)
	}
	OnPost_AfterUpdate(p)

	return err
}

// Save saves the Post to the database.
func (p *Post) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Replace(db)
}

// Delete deletes the Post from the database.
func (p *Post) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.post WHERE PostId = ?`

	// run query
	if LogTableSqlReq.Post {
		XOLog(sqlstr, p.PostId)
	}
	_, err = db.Exec(sqlstr, p.PostId)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	p._deleted = true

	OnPost_AfterDelete(p)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Post_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Post_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Post_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPost_Deleter() *__Post_Deleter {
	d := __Post_Deleter{whereSep: " AND "}
	return &d
}

func NewPost_Updater() *__Post_Updater {
	u := __Post_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPost_Selector() *__Post_Selector {
	u := __Post_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Post_Deleter) Or() *__Post_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Deleter) PostId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) PostId_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) PostId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) PostId_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostId_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) UserId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) UserId_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) UserId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) UserId_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) PostTypeEnum_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) PostTypeEnum_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) PostTypeEnum_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) PostTypeEnum_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostTypeEnum_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostTypeEnum_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostTypeEnum_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostTypeEnum_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostTypeEnum_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) MediaId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) MediaId_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) MediaId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) MediaId_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaId_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) MediaCount_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) MediaCount_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) MediaCount_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) MediaCount_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaCount_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaCount_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaCount_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaCount_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) MediaCount_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) SharedTo_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) SharedTo_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) SharedTo_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) SharedTo_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) SharedTo_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) DisableComment_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DisableComment IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) DisableComment_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DisableComment IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) DisableComment_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DisableComment NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) DisableComment_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) DisableComment_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) DisableComment_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) DisableComment_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) DisableComment_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) DisableComment_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) HasTag_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) HasTag_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) HasTag_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) HasTag_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) HasTag_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) Seq_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Seq_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Seq_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Seq_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Seq_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Seq_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Seq_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Seq_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Seq_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) CommentsCount_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) CommentsCount_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) CommentsCount_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) CommentsCount_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CommentsCount_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) LikesCount_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) LikesCount_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) LikesCount_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) LikesCount_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) LikesCount_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) ViewsCount_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) ViewsCount_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) ViewsCount_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) ViewsCount_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ViewsCount_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ViewsCount_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ViewsCount_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ViewsCount_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ViewsCount_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) EditedTime_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EditedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) EditedTime_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EditedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) EditedTime_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EditedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) EditedTime_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) EditedTime_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) EditedTime_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) EditedTime_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) EditedTime_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) EditedTime_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) CreatedTime_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) CreatedTime_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) CreatedTime_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) CreatedTime_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) CreatedTime_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) ReSharedPostId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedPostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) ReSharedPostId_Ins(ins ...int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedPostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) ReSharedPostId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedPostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) ReSharedPostId_Eq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ReSharedPostId_NotEq(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ReSharedPostId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ReSharedPostId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ReSharedPostId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) ReSharedPostId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Post_Updater) Or() *__Post_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Updater) PostId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) PostId_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) PostId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) PostId_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostId_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) UserId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) UserId_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) UserId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) UserId_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) PostTypeEnum_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) PostTypeEnum_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) PostTypeEnum_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) PostTypeEnum_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostTypeEnum_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostTypeEnum_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostTypeEnum_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostTypeEnum_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostTypeEnum_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) MediaId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) MediaId_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) MediaId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) MediaId_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaId_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) MediaCount_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) MediaCount_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) MediaCount_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) MediaCount_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaCount_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaCount_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaCount_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaCount_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) MediaCount_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) SharedTo_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) SharedTo_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) SharedTo_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) SharedTo_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) SharedTo_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) DisableComment_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DisableComment IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) DisableComment_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DisableComment IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) DisableComment_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DisableComment NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) DisableComment_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) DisableComment_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) DisableComment_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) DisableComment_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) DisableComment_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) DisableComment_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) HasTag_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) HasTag_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) HasTag_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) HasTag_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) HasTag_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) Seq_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Seq_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Seq_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Seq_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Seq_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Seq_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Seq_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Seq_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Seq_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) CommentsCount_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) CommentsCount_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) CommentsCount_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) CommentsCount_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CommentsCount_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) LikesCount_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) LikesCount_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) LikesCount_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) LikesCount_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) LikesCount_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) ViewsCount_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) ViewsCount_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) ViewsCount_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) ViewsCount_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ViewsCount_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ViewsCount_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ViewsCount_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ViewsCount_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ViewsCount_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) EditedTime_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EditedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) EditedTime_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EditedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) EditedTime_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EditedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) EditedTime_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) EditedTime_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) EditedTime_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) EditedTime_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) EditedTime_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) EditedTime_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) CreatedTime_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) CreatedTime_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) CreatedTime_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) CreatedTime_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) CreatedTime_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) ReSharedPostId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedPostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) ReSharedPostId_Ins(ins ...int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedPostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) ReSharedPostId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedPostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) ReSharedPostId_Eq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ReSharedPostId_NotEq(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ReSharedPostId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ReSharedPostId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ReSharedPostId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) ReSharedPostId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Post_Selector) Or() *__Post_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Selector) PostId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) PostId_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) PostId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) PostId_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostId_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) UserId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) UserId_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) UserId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) UserId_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) PostTypeEnum_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) PostTypeEnum_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) PostTypeEnum_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) PostTypeEnum_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostTypeEnum_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostTypeEnum_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostTypeEnum_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostTypeEnum_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostTypeEnum_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) MediaId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) MediaId_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) MediaId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) MediaId_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaId_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) MediaCount_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) MediaCount_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) MediaCount_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) MediaCount_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaCount_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaCount_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaCount_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaCount_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) MediaCount_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) SharedTo_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) SharedTo_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) SharedTo_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SharedTo NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) SharedTo_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) SharedTo_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SharedTo >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) DisableComment_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DisableComment IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) DisableComment_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DisableComment IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) DisableComment_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DisableComment NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) DisableComment_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) DisableComment_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) DisableComment_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) DisableComment_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) DisableComment_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) DisableComment_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DisableComment >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) HasTag_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) HasTag_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) HasTag_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HasTag NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) HasTag_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) HasTag_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HasTag >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) Seq_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Seq_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Seq_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Seq_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Seq_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Seq_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Seq_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Seq_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Seq_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) CommentsCount_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) CommentsCount_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) CommentsCount_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) CommentsCount_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CommentsCount_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) LikesCount_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) LikesCount_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) LikesCount_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) LikesCount_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) LikesCount_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) ViewsCount_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) ViewsCount_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) ViewsCount_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ViewsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) ViewsCount_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ViewsCount_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ViewsCount_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ViewsCount_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ViewsCount_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ViewsCount_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ViewsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) EditedTime_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EditedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) EditedTime_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EditedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) EditedTime_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " EditedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) EditedTime_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) EditedTime_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) EditedTime_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) EditedTime_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) EditedTime_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) EditedTime_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " EditedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) CreatedTime_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) CreatedTime_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) CreatedTime_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) CreatedTime_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) CreatedTime_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) ReSharedPostId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedPostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) ReSharedPostId_Ins(ins ...int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedPostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) ReSharedPostId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ReSharedPostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) ReSharedPostId_Eq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ReSharedPostId_NotEq(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ReSharedPostId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ReSharedPostId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ReSharedPostId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) ReSharedPostId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ReSharedPostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Post_Deleter) PostKey_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) PostKey_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) PostKey_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) PostKey_Eq(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) PostKey_NotEq(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) Text_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Text_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) Text_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Text_Eq(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Text_NotEq(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) RichText_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RichText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) RichText_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RichText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) RichText_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RichText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) RichText_Eq(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RichText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) RichText_NotEq(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RichText != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Post_Updater) PostKey_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) PostKey_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) PostKey_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) PostKey_Eq(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) PostKey_NotEq(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) Text_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Text_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) Text_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Text_Eq(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Text_NotEq(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) RichText_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RichText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) RichText_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RichText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) RichText_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RichText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) RichText_Eq(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RichText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) RichText_NotEq(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RichText != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Post_Selector) PostKey_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) PostKey_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) PostKey_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) PostKey_Eq(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) PostKey_NotEq(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostKey != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) Text_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Text_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) Text_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Text_Eq(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Text_NotEq(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) RichText_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RichText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) RichText_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RichText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) RichText_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RichText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) RichText_Eq(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RichText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) RichText_NotEq(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RichText != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Post_Updater) PostId(newVal int) *__Post_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__Post_Updater) PostId_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) UserId(newVal int) *__Post_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Post_Updater) UserId_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) PostTypeEnum(newVal int) *__Post_Updater {
	u.updates[" PostTypeEnum = ? "] = newVal
	return u
}

func (u *__Post_Updater) PostTypeEnum_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" PostTypeEnum = PostTypeEnum+? "] = count
	}

	if count < 0 {
		u.updates[" PostTypeEnum = PostTypeEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) MediaId(newVal int) *__Post_Updater {
	u.updates[" MediaId = ? "] = newVal
	return u
}

func (u *__Post_Updater) MediaId_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" MediaId = MediaId+? "] = count
	}

	if count < 0 {
		u.updates[" MediaId = MediaId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Post_Updater) PostKey(newVal string) *__Post_Updater {
	u.updates[" PostKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__Post_Updater) Text(newVal string) *__Post_Updater {
	u.updates[" Text = ? "] = newVal
	return u
}

//ints

//string
func (u *__Post_Updater) RichText(newVal string) *__Post_Updater {
	u.updates[" RichText = ? "] = newVal
	return u
}

//ints

func (u *__Post_Updater) MediaCount(newVal int) *__Post_Updater {
	u.updates[" MediaCount = ? "] = newVal
	return u
}

func (u *__Post_Updater) MediaCount_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" MediaCount = MediaCount+? "] = count
	}

	if count < 0 {
		u.updates[" MediaCount = MediaCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) SharedTo(newVal int) *__Post_Updater {
	u.updates[" SharedTo = ? "] = newVal
	return u
}

func (u *__Post_Updater) SharedTo_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" SharedTo = SharedTo+? "] = count
	}

	if count < 0 {
		u.updates[" SharedTo = SharedTo-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) DisableComment(newVal int) *__Post_Updater {
	u.updates[" DisableComment = ? "] = newVal
	return u
}

func (u *__Post_Updater) DisableComment_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" DisableComment = DisableComment+? "] = count
	}

	if count < 0 {
		u.updates[" DisableComment = DisableComment-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) HasTag(newVal int) *__Post_Updater {
	u.updates[" HasTag = ? "] = newVal
	return u
}

func (u *__Post_Updater) HasTag_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" HasTag = HasTag+? "] = count
	}

	if count < 0 {
		u.updates[" HasTag = HasTag-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) Seq(newVal int) *__Post_Updater {
	u.updates[" Seq = ? "] = newVal
	return u
}

func (u *__Post_Updater) Seq_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" Seq = Seq+? "] = count
	}

	if count < 0 {
		u.updates[" Seq = Seq-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) CommentsCount(newVal int) *__Post_Updater {
	u.updates[" CommentsCount = ? "] = newVal
	return u
}

func (u *__Post_Updater) CommentsCount_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" CommentsCount = CommentsCount+? "] = count
	}

	if count < 0 {
		u.updates[" CommentsCount = CommentsCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) LikesCount(newVal int) *__Post_Updater {
	u.updates[" LikesCount = ? "] = newVal
	return u
}

func (u *__Post_Updater) LikesCount_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" LikesCount = LikesCount+? "] = count
	}

	if count < 0 {
		u.updates[" LikesCount = LikesCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) ViewsCount(newVal int) *__Post_Updater {
	u.updates[" ViewsCount = ? "] = newVal
	return u
}

func (u *__Post_Updater) ViewsCount_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" ViewsCount = ViewsCount+? "] = count
	}

	if count < 0 {
		u.updates[" ViewsCount = ViewsCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) EditedTime(newVal int) *__Post_Updater {
	u.updates[" EditedTime = ? "] = newVal
	return u
}

func (u *__Post_Updater) EditedTime_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" EditedTime = EditedTime+? "] = count
	}

	if count < 0 {
		u.updates[" EditedTime = EditedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) CreatedTime(newVal int) *__Post_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Post_Updater) CreatedTime_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) ReSharedPostId(newVal int) *__Post_Updater {
	u.updates[" ReSharedPostId = ? "] = newVal
	return u
}

func (u *__Post_Updater) ReSharedPostId_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" ReSharedPostId = ReSharedPostId+? "] = count
	}

	if count < 0 {
		u.updates[" ReSharedPostId = ReSharedPostId-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Post_Selector) OrderBy_PostId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_PostId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Post_Selector) Select_PostId() *__Post_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Post_Selector) OrderBy_UserId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_UserId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Post_Selector) Select_UserId() *__Post_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Post_Selector) OrderBy_PostTypeEnum_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY PostTypeEnum DESC "
	return u
}

func (u *__Post_Selector) OrderBy_PostTypeEnum_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY PostTypeEnum ASC "
	return u
}

func (u *__Post_Selector) Select_PostTypeEnum() *__Post_Selector {
	u.selectCol = "PostTypeEnum"
	return u
}

func (u *__Post_Selector) OrderBy_MediaId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_MediaId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaId ASC "
	return u
}

func (u *__Post_Selector) Select_MediaId() *__Post_Selector {
	u.selectCol = "MediaId"
	return u
}

func (u *__Post_Selector) OrderBy_PostKey_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY PostKey DESC "
	return u
}

func (u *__Post_Selector) OrderBy_PostKey_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY PostKey ASC "
	return u
}

func (u *__Post_Selector) Select_PostKey() *__Post_Selector {
	u.selectCol = "PostKey"
	return u
}

func (u *__Post_Selector) OrderBy_Text_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Text_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__Post_Selector) Select_Text() *__Post_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__Post_Selector) OrderBy_RichText_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY RichText DESC "
	return u
}

func (u *__Post_Selector) OrderBy_RichText_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY RichText ASC "
	return u
}

func (u *__Post_Selector) Select_RichText() *__Post_Selector {
	u.selectCol = "RichText"
	return u
}

func (u *__Post_Selector) OrderBy_MediaCount_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaCount DESC "
	return u
}

func (u *__Post_Selector) OrderBy_MediaCount_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY MediaCount ASC "
	return u
}

func (u *__Post_Selector) Select_MediaCount() *__Post_Selector {
	u.selectCol = "MediaCount"
	return u
}

func (u *__Post_Selector) OrderBy_SharedTo_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY SharedTo DESC "
	return u
}

func (u *__Post_Selector) OrderBy_SharedTo_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY SharedTo ASC "
	return u
}

func (u *__Post_Selector) Select_SharedTo() *__Post_Selector {
	u.selectCol = "SharedTo"
	return u
}

func (u *__Post_Selector) OrderBy_DisableComment_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY DisableComment DESC "
	return u
}

func (u *__Post_Selector) OrderBy_DisableComment_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY DisableComment ASC "
	return u
}

func (u *__Post_Selector) Select_DisableComment() *__Post_Selector {
	u.selectCol = "DisableComment"
	return u
}

func (u *__Post_Selector) OrderBy_HasTag_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY HasTag DESC "
	return u
}

func (u *__Post_Selector) OrderBy_HasTag_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY HasTag ASC "
	return u
}

func (u *__Post_Selector) Select_HasTag() *__Post_Selector {
	u.selectCol = "HasTag"
	return u
}

func (u *__Post_Selector) OrderBy_Seq_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Seq DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Seq_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Seq ASC "
	return u
}

func (u *__Post_Selector) Select_Seq() *__Post_Selector {
	u.selectCol = "Seq"
	return u
}

func (u *__Post_Selector) OrderBy_CommentsCount_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY CommentsCount DESC "
	return u
}

func (u *__Post_Selector) OrderBy_CommentsCount_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY CommentsCount ASC "
	return u
}

func (u *__Post_Selector) Select_CommentsCount() *__Post_Selector {
	u.selectCol = "CommentsCount"
	return u
}

func (u *__Post_Selector) OrderBy_LikesCount_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY LikesCount DESC "
	return u
}

func (u *__Post_Selector) OrderBy_LikesCount_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY LikesCount ASC "
	return u
}

func (u *__Post_Selector) Select_LikesCount() *__Post_Selector {
	u.selectCol = "LikesCount"
	return u
}

func (u *__Post_Selector) OrderBy_ViewsCount_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY ViewsCount DESC "
	return u
}

func (u *__Post_Selector) OrderBy_ViewsCount_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY ViewsCount ASC "
	return u
}

func (u *__Post_Selector) Select_ViewsCount() *__Post_Selector {
	u.selectCol = "ViewsCount"
	return u
}

func (u *__Post_Selector) OrderBy_EditedTime_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY EditedTime DESC "
	return u
}

func (u *__Post_Selector) OrderBy_EditedTime_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY EditedTime ASC "
	return u
}

func (u *__Post_Selector) Select_EditedTime() *__Post_Selector {
	u.selectCol = "EditedTime"
	return u
}

func (u *__Post_Selector) OrderBy_CreatedTime_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Post_Selector) OrderBy_CreatedTime_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Post_Selector) Select_CreatedTime() *__Post_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Post_Selector) OrderBy_ReSharedPostId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY ReSharedPostId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_ReSharedPostId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY ReSharedPostId ASC "
	return u
}

func (u *__Post_Selector) Select_ReSharedPostId() *__Post_Selector {
	u.selectCol = "ReSharedPostId"
	return u
}

func (u *__Post_Selector) Limit(num int) *__Post_Selector {
	u.limit = num
	return u
}

func (u *__Post_Selector) Offset(num int) *__Post_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Post_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.post"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Post_Selector) GetRow(db *sqlx.DB) (*Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Post {
		XOLog(sqlstr, whereArgs)
	}

	row := &Post{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnPost_LoadOne(row)

	return row, nil
}

func (u *__Post_Selector) GetRows(db *sqlx.DB) ([]*Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Post {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*Post
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPost_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Post_Selector) GetRows2(db *sqlx.DB) ([]Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Post {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*Post
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnPost_LoadMany(rows)

	rows2 := make([]Post, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Post_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Post {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__Post_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Post {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Post_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Post {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Post_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Post {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Post_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.post SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.Post {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__Post_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.post WHERE " + wheresStr

	// run query
	if LogTableSqlReq.Post {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Post ////////////////

func MassInsert_Post(rows []Post, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun.post (" +
		"PostId, UserId, PostTypeEnum, MediaId, PostKey, Text, RichText, MediaCount, SharedTo, DisableComment, HasTag, Seq, CommentsCount, LikesCount, ViewsCount, EditedTime, CreatedTime, ReSharedPostId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostTypeEnum)
		vals = append(vals, row.MediaId)
		vals = append(vals, row.PostKey)
		vals = append(vals, row.Text)
		vals = append(vals, row.RichText)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.SharedTo)
		vals = append(vals, row.DisableComment)
		vals = append(vals, row.HasTag)
		vals = append(vals, row.Seq)
		vals = append(vals, row.CommentsCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ViewsCount)
		vals = append(vals, row.EditedTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.ReSharedPostId)

	}

	if LogTableSqlReq.Post {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_Post(rows []Post, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun.post (" +
		"PostId, UserId, PostTypeEnum, MediaId, PostKey, Text, RichText, MediaCount, SharedTo, DisableComment, HasTag, Seq, CommentsCount, LikesCount, ViewsCount, EditedTime, CreatedTime, ReSharedPostId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.PostId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PostTypeEnum)
		vals = append(vals, row.MediaId)
		vals = append(vals, row.PostKey)
		vals = append(vals, row.Text)
		vals = append(vals, row.RichText)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.SharedTo)
		vals = append(vals, row.DisableComment)
		vals = append(vals, row.HasTag)
		vals = append(vals, row.Seq)
		vals = append(vals, row.CommentsCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ViewsCount)
		vals = append(vals, row.EditedTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.ReSharedPostId)

	}

	if LogTableSqlReq.Post {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Post {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
