package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Tag represents a row from 'sun.tag'.

// Manualy copy this to project
type Tag__ struct {
	TagId         int    `json:"TagId"`         // TagId -
	Name          string `json:"Name"`          // Name -
	Count         int    `json:"Count"`         // Count -
	TagStatusEnum int    `json:"TagStatusEnum"` // TagStatusEnum -
	IsBlocked     int    `json:"IsBlocked"`     // IsBlocked -
	GroupId       int    `json:"GroupId"`       // GroupId -
	CreatedTime   int    `json:"CreatedTime"`   // CreatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Tag exists in the database.
func (t *Tag) Exists() bool {
	return t._exists
}

// Deleted provides information if the Tag has been deleted from the database.
func (t *Tag) Deleted() bool {
	return t._deleted
}

// Insert inserts the Tag to the database.
func (t *Tag) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.tag (` +
		`TagId, Name, Count, TagStatusEnum, IsBlocked, GroupId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Tag {
		XOLog(sqlstr, t.TagId, t.Name, t.Count, t.TagStatusEnum, t.IsBlocked, t.GroupId, t.CreatedTime)
	}
	_, err = db.Exec(sqlstr, t.TagId, t.Name, t.Count, t.TagStatusEnum, t.IsBlocked, t.GroupId, t.CreatedTime)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	OnTag_AfterInsert(t)

	return nil
}

// Insert inserts the Tag to the database.
func (t *Tag) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.tag (` +
		`TagId, Name, Count, TagStatusEnum, IsBlocked, GroupId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Tag {
		XOLog(sqlstr, t.TagId, t.Name, t.Count, t.TagStatusEnum, t.IsBlocked, t.GroupId, t.CreatedTime)
	}
	_, err = db.Exec(sqlstr, t.TagId, t.Name, t.Count, t.TagStatusEnum, t.IsBlocked, t.GroupId, t.CreatedTime)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return err
	}

	t._exists = true

	OnTag_AfterInsert(t)

	return nil
}

// Update updates the Tag in the database.
func (t *Tag) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.tag SET ` +
		`Name = ?, Count = ?, TagStatusEnum = ?, IsBlocked = ?, GroupId = ?, CreatedTime = ?` +
		` WHERE TagId = ?`

	// run query
	if LogTableSqlReq.Tag {
		XOLog(sqlstr, t.Name, t.Count, t.TagStatusEnum, t.IsBlocked, t.GroupId, t.CreatedTime, t.TagId)
	}
	_, err = db.Exec(sqlstr, t.Name, t.Count, t.TagStatusEnum, t.IsBlocked, t.GroupId, t.CreatedTime, t.TagId)

	if LogTableSqlReq.Tag {
		XOLogErr(err)
	}
	OnTag_AfterUpdate(t)

	return err
}

// Save saves the Tag to the database.
func (t *Tag) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Replace(db)
}

// Delete deletes the Tag from the database.
func (t *Tag) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.tag WHERE TagId = ?`

	// run query
	if LogTableSqlReq.Tag {
		XOLog(sqlstr, t.TagId)
	}
	_, err = db.Exec(sqlstr, t.TagId)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	t._deleted = true

	OnTag_AfterDelete(t)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Tag_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Tag_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Tag_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewTag_Deleter() *__Tag_Deleter {
	d := __Tag_Deleter{whereSep: " AND ", isMysql: true}
	return &d
}

func NewTag_Updater() *__Tag_Updater {
	u := __Tag_Updater{whereSep: " AND ", isMysql: true}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewTag_Selector() *__Tag_Selector {
	u := __Tag_Selector{whereSep: " AND ", selectCol: "*", isMysql: true}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__Tag_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__Tag_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__Tag_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Tag_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Tag_Deleter) Or() *__Tag_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Deleter) TagId_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) TagId_Ins(ins ...int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) TagId_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) TagId_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagId_NotEq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagId_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagId_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagId_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagId_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) Count_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Count_Ins(ins ...int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Count_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Count_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_NotEq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) TagStatusEnum_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) TagStatusEnum_Ins(ins ...int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) TagStatusEnum_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagStatusEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) TagStatusEnum_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagStatusEnum_NotEq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagStatusEnum_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagStatusEnum_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagStatusEnum_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) TagStatusEnum_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) IsBlocked_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) IsBlocked_Ins(ins ...int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) IsBlocked_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) IsBlocked_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_NotEq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) GroupId_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) GroupId_Ins(ins ...int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) GroupId_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) GroupId_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) GroupId_NotEq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) GroupId_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) GroupId_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) GroupId_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) GroupId_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) CreatedTime_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) CreatedTime_Ins(ins ...int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) CreatedTime_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) CreatedTime_Eq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_NotEq(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Tag_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Tag_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Tag_Updater) Or() *__Tag_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Updater) TagId_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) TagId_Ins(ins ...int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) TagId_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) TagId_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagId_NotEq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagId_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagId_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagId_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagId_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) Count_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Count_Ins(ins ...int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Count_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Count_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_NotEq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) TagStatusEnum_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) TagStatusEnum_Ins(ins ...int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) TagStatusEnum_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagStatusEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) TagStatusEnum_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagStatusEnum_NotEq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagStatusEnum_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagStatusEnum_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagStatusEnum_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) TagStatusEnum_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) IsBlocked_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) IsBlocked_Ins(ins ...int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) IsBlocked_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) IsBlocked_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_NotEq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) GroupId_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) GroupId_Ins(ins ...int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) GroupId_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) GroupId_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) GroupId_NotEq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) GroupId_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) GroupId_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) GroupId_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) GroupId_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) CreatedTime_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) CreatedTime_Ins(ins ...int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) CreatedTime_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) CreatedTime_Eq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_NotEq(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Tag_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Tag_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Tag_Selector) Or() *__Tag_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Selector) TagId_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) TagId_Ins(ins ...int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) TagId_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) TagId_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagId_NotEq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagId_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagId_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagId_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagId_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) Count_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Count_Ins(ins ...int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Count_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Count_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_NotEq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) TagStatusEnum_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) TagStatusEnum_Ins(ins ...int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagStatusEnum IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) TagStatusEnum_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagStatusEnum NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) TagStatusEnum_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagStatusEnum_NotEq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagStatusEnum_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagStatusEnum_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagStatusEnum_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) TagStatusEnum_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagStatusEnum >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) IsBlocked_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) IsBlocked_Ins(ins ...int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) IsBlocked_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) IsBlocked_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_NotEq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) GroupId_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) GroupId_Ins(ins ...int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) GroupId_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) GroupId_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) GroupId_NotEq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) GroupId_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) GroupId_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) GroupId_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) GroupId_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) CreatedTime_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) CreatedTime_Ins(ins ...int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) CreatedTime_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) CreatedTime_Eq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_NotEq(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Tag_Deleter) Name_In(ins []string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Name_NotIn(ins []string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Deleter) Name_Like(val string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Name_Eq(val string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Name_NotEq(val string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Tag_Updater) Name_In(ins []string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Name_NotIn(ins []string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Updater) Name_Like(val string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Name_Eq(val string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Name_NotEq(val string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Tag_Selector) Name_In(ins []string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Name_NotIn(ins []string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Selector) Name_Like(val string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Name_Eq(val string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Name_NotEq(val string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Tag_Updater) TagId(newVal int) *__Tag_Updater {
	up := updateCol{" TagId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" TagId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) TagId_Increment(count int) *__Tag_Updater {
	if count > 0 {
		up := updateCol{" TagId = TagId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" TagId = TagId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" TagId = TagId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" TagId = TagId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Tag_Updater) Name(newVal string) *__Tag_Updater {
	up := updateCol{"Name = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Name = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Tag_Updater) Count(newVal int) *__Tag_Updater {
	up := updateCol{" Count = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Count = " + u.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) Count_Increment(count int) *__Tag_Updater {
	if count > 0 {
		up := updateCol{" Count = Count+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Count = Count+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Count = Count- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Count = Count- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Tag_Updater) TagStatusEnum(newVal int) *__Tag_Updater {
	up := updateCol{" TagStatusEnum = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" TagStatusEnum = " + u.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) TagStatusEnum_Increment(count int) *__Tag_Updater {
	if count > 0 {
		up := updateCol{" TagStatusEnum = TagStatusEnum+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" TagStatusEnum = TagStatusEnum+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" TagStatusEnum = TagStatusEnum- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" TagStatusEnum = TagStatusEnum- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Tag_Updater) IsBlocked(newVal int) *__Tag_Updater {
	up := updateCol{" IsBlocked = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsBlocked = " + u.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) IsBlocked_Increment(count int) *__Tag_Updater {
	if count > 0 {
		up := updateCol{" IsBlocked = IsBlocked+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsBlocked = IsBlocked+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsBlocked = IsBlocked- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsBlocked = IsBlocked- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Tag_Updater) GroupId(newVal int) *__Tag_Updater {
	up := updateCol{" GroupId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" GroupId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) GroupId_Increment(count int) *__Tag_Updater {
	if count > 0 {
		up := updateCol{" GroupId = GroupId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" GroupId = GroupId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" GroupId = GroupId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" GroupId = GroupId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Tag_Updater) CreatedTime(newVal int) *__Tag_Updater {
	up := updateCol{" CreatedTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatedTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Tag_Updater) CreatedTime_Increment(count int) *__Tag_Updater {
	if count > 0 {
		up := updateCol{" CreatedTime = CreatedTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatedTime = CreatedTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatedTime = CreatedTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatedTime = CreatedTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Tag_Selector) OrderBy_TagId_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY TagId DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_TagId_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY TagId ASC "
	return u
}

func (u *__Tag_Selector) Select_TagId() *__Tag_Selector {
	u.selectCol = "TagId"
	return u
}

func (u *__Tag_Selector) OrderBy_Name_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY Name DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_Name_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY Name ASC "
	return u
}

func (u *__Tag_Selector) Select_Name() *__Tag_Selector {
	u.selectCol = "Name"
	return u
}

func (u *__Tag_Selector) OrderBy_Count_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY Count DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_Count_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY Count ASC "
	return u
}

func (u *__Tag_Selector) Select_Count() *__Tag_Selector {
	u.selectCol = "Count"
	return u
}

func (u *__Tag_Selector) OrderBy_TagStatusEnum_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY TagStatusEnum DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_TagStatusEnum_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY TagStatusEnum ASC "
	return u
}

func (u *__Tag_Selector) Select_TagStatusEnum() *__Tag_Selector {
	u.selectCol = "TagStatusEnum"
	return u
}

func (u *__Tag_Selector) OrderBy_IsBlocked_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY IsBlocked DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_IsBlocked_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY IsBlocked ASC "
	return u
}

func (u *__Tag_Selector) Select_IsBlocked() *__Tag_Selector {
	u.selectCol = "IsBlocked"
	return u
}

func (u *__Tag_Selector) OrderBy_GroupId_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY GroupId DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_GroupId_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY GroupId ASC "
	return u
}

func (u *__Tag_Selector) Select_GroupId() *__Tag_Selector {
	u.selectCol = "GroupId"
	return u
}

func (u *__Tag_Selector) OrderBy_CreatedTime_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_CreatedTime_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Tag_Selector) Select_CreatedTime() *__Tag_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Tag_Selector) Limit(num int) *__Tag_Selector {
	u.limit = num
	return u
}

func (u *__Tag_Selector) Offset(num int) *__Tag_Selector {
	u.offset = num
	return u
}

func (u *__Tag_Selector) Order_Rand() *__Tag_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Tag_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.tag"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Tag_Selector) GetRow(db *sqlx.DB) (*Tag, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, whereArgs)
	}

	row := &Tag{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnTag_LoadOne(row)

	return row, nil
}

func (u *__Tag_Selector) GetRows(db *sqlx.DB) ([]*Tag, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*Tag
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnTag_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Tag_Selector) GetRows2(db *sqlx.DB) ([]Tag, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*Tag
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnTag_LoadMany(rows)

	rows2 := make([]Tag, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Tag_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__Tag_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Tag_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Tag_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Tag_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.tag SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__Tag_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.tag WHERE " + wheresStr

	// run query
	if LogTableSqlReq.Tag {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Tag ////////////////

func MassInsert_Tag(rows []Tag, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(7, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun.tag (" +
		"TagId, Name, Count, TagStatusEnum, IsBlocked, GroupId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.TagId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.TagStatusEnum)
		vals = append(vals, row.IsBlocked)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_Tag(rows []Tag, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(7, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun.tag (" +
		"TagId, Name, Count, TagStatusEnum, IsBlocked, GroupId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.TagId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.TagStatusEnum)
		vals = append(vals, row.IsBlocked)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.Tag {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Tag {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//
