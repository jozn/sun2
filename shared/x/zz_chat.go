package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Chat represents a row from 'sun_chat.chat'.

// Manualy copy this to project
type Chat__ struct {
	ChatId           int    `json:"ChatId"`           // ChatId -
	ChatKey          string `json:"ChatKey"`          // ChatKey -
	RoomKey          string `json:"RoomKey"`          // RoomKey -
	RoomType         int    `json:"RoomType"`         // RoomType -
	UserId           int    `json:"UserId"`           // UserId -
	PeerUserId       int    `json:"PeerUserId"`       // PeerUserId -
	GroupId          int    `json:"GroupId"`          // GroupId -
	HashTagId        int    `json:"HashTagId"`        // HashTagId -
	StartedByMe      int    `json:"StartedByMe"`      // StartedByMe -
	Title            string `json:"Title"`            // Title -
	PinTime          int    `json:"PinTime"`          // PinTime -
	FromMsgId        int    `json:"FromMsgId"`        // FromMsgId -
	Seq              int    `json:"Seq"`              // Seq -
	UnseenCount      int    `json:"UnseenCount"`      // UnseenCount -
	LastMsgId        int    `json:"LastMsgId"`        // LastMsgId -
	LastMsgStatus    int    `json:"LastMsgStatus"`    // LastMsgStatus -
	SeenSeq          int    `json:"SeenSeq"`          // SeenSeq -
	SeenMsgId        int    `json:"SeenMsgId"`        // SeenMsgId -
	LastMsgIdRecived int    `json:"LastMsgIdRecived"` // LastMsgIdRecived -
	Left             int    `json:"Left"`             // Left -
	Creator          int    `json:"Creator"`          // Creator -
	Kicked           int    `json:"Kicked"`           // Kicked -
	Admin            int    `json:"Admin"`            // Admin -
	Deactivated      int    `json:"Deactivated"`      // Deactivated -
	VersionTime      int    `json:"VersionTime"`      // VersionTime -
	OrderTime        int    `json:"OrderTime"`        // OrderTime -
	CreatedTime      int    `json:"CreatedTime"`      // CreatedTime -
	DraftText        string `json:"DraftText"`        // DraftText -
	DratReplyToMsgId int    `json:"DratReplyToMsgId"` // DratReplyToMsgId -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Chat exists in the database.
func (c *Chat) Exists() bool {
	return c._exists
}

// Deleted provides information if the Chat has been deleted from the database.
func (c *Chat) Deleted() bool {
	return c._deleted
}

// Insert inserts the Chat to the database.
func (c *Chat) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_chat.chat (` +
		`ChatId, ChatKey, RoomKey, RoomType, UserId, PeerUserId, GroupId, HashTagId, StartedByMe, Title, PinTime, FromMsgId, Seq, UnseenCount, LastMsgId, LastMsgStatus, SeenSeq, SeenMsgId, LastMsgIdRecived, Left, Creator, Kicked, Admin, Deactivated, VersionTime, OrderTime, CreatedTime, DraftText, DratReplyToMsgId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, c.ChatId, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.StartedByMe, c.Title, c.PinTime, c.FromMsgId, c.Seq, c.UnseenCount, c.LastMsgId, c.LastMsgStatus, c.SeenSeq, c.SeenMsgId, c.LastMsgIdRecived, c.Left, c.Creator, c.Kicked, c.Admin, c.Deactivated, c.VersionTime, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId)
	}
	_, err = db.Exec(sqlstr, c.ChatId, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.StartedByMe, c.Title, c.PinTime, c.FromMsgId, c.Seq, c.UnseenCount, c.LastMsgId, c.LastMsgStatus, c.SeenSeq, c.SeenMsgId, c.LastMsgIdRecived, c.Left, c.Creator, c.Kicked, c.Admin, c.Deactivated, c.VersionTime, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	OnChat_AfterInsert(c)

	return nil
}

// Insert inserts the Chat to the database.
func (c *Chat) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_chat.chat (` +
		`ChatId, ChatKey, RoomKey, RoomType, UserId, PeerUserId, GroupId, HashTagId, StartedByMe, Title, PinTime, FromMsgId, Seq, UnseenCount, LastMsgId, LastMsgStatus, SeenSeq, SeenMsgId, LastMsgIdRecived, Left, Creator, Kicked, Admin, Deactivated, VersionTime, OrderTime, CreatedTime, DraftText, DratReplyToMsgId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, c.ChatId, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.StartedByMe, c.Title, c.PinTime, c.FromMsgId, c.Seq, c.UnseenCount, c.LastMsgId, c.LastMsgStatus, c.SeenSeq, c.SeenMsgId, c.LastMsgIdRecived, c.Left, c.Creator, c.Kicked, c.Admin, c.Deactivated, c.VersionTime, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId)
	}
	_, err = db.Exec(sqlstr, c.ChatId, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.StartedByMe, c.Title, c.PinTime, c.FromMsgId, c.Seq, c.UnseenCount, c.LastMsgId, c.LastMsgStatus, c.SeenSeq, c.SeenMsgId, c.LastMsgIdRecived, c.Left, c.Creator, c.Kicked, c.Admin, c.Deactivated, c.VersionTime, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return err
	}

	c._exists = true

	OnChat_AfterInsert(c)

	return nil
}

// Update updates the Chat in the database.
func (c *Chat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_chat.chat SET ` +
		`ChatKey = ?, RoomKey = ?, RoomType = ?, UserId = ?, PeerUserId = ?, GroupId = ?, HashTagId = ?, StartedByMe = ?, Title = ?, PinTime = ?, FromMsgId = ?, Seq = ?, UnseenCount = ?, LastMsgId = ?, LastMsgStatus = ?, SeenSeq = ?, SeenMsgId = ?, LastMsgIdRecived = ?, Left = ?, Creator = ?, Kicked = ?, Admin = ?, Deactivated = ?, VersionTime = ?, OrderTime = ?, CreatedTime = ?, DraftText = ?, DratReplyToMsgId = ?` +
		` WHERE ChatId = ?`

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.StartedByMe, c.Title, c.PinTime, c.FromMsgId, c.Seq, c.UnseenCount, c.LastMsgId, c.LastMsgStatus, c.SeenSeq, c.SeenMsgId, c.LastMsgIdRecived, c.Left, c.Creator, c.Kicked, c.Admin, c.Deactivated, c.VersionTime, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId, c.ChatId)
	}
	_, err = db.Exec(sqlstr, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.StartedByMe, c.Title, c.PinTime, c.FromMsgId, c.Seq, c.UnseenCount, c.LastMsgId, c.LastMsgStatus, c.SeenSeq, c.SeenMsgId, c.LastMsgIdRecived, c.Left, c.Creator, c.Kicked, c.Admin, c.Deactivated, c.VersionTime, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId, c.ChatId)

	if LogTableSqlReq.Chat {
		XOLogErr(err)
	}
	OnChat_AfterUpdate(c)

	return err
}

// Save saves the Chat to the database.
func (c *Chat) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Replace(db)
}

// Delete deletes the Chat from the database.
func (c *Chat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_chat.chat WHERE ChatId = ?`

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, c.ChatId)
	}
	_, err = db.Exec(sqlstr, c.ChatId)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	c._deleted = true

	OnChat_AfterDelete(c)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Chat_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Chat_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Chat_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewChat_Deleter() *__Chat_Deleter {
	d := __Chat_Deleter{whereSep: " AND "}
	return &d
}

func NewChat_Updater() *__Chat_Updater {
	u := __Chat_Updater{whereSep: " AND "}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewChat_Selector() *__Chat_Selector {
	u := __Chat_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__Chat_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__Chat_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__Chat_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Chat_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Chat_Deleter) Or() *__Chat_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Chat_Deleter) ChatId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) ChatId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) ChatId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) ChatId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) RoomType_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) RoomType_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) RoomType_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) RoomType_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) UserId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UserId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UserId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) UserId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) PeerUserId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerUserId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerUserId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) PeerUserId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) GroupId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) GroupId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) GroupId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) GroupId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) HashTagId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) HashTagId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) HashTagId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) HashTagId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) StartedByMe_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StartedByMe IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) StartedByMe_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StartedByMe IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) StartedByMe_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StartedByMe NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) StartedByMe_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) StartedByMe_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) StartedByMe_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) StartedByMe_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) StartedByMe_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) StartedByMe_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) PinTime_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PinTime_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PinTime_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) PinTime_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTime_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTime_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTime_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTime_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTime_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) FromMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) FromMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) FromMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) FromMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) Seq_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Seq_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Seq_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) Seq_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) UnseenCount_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UnseenCount_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UnseenCount_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) UnseenCount_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) LastMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) LastMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) LastMsgStatus_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMsgStatus_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMsgStatus_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgStatus NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) LastMsgStatus_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgStatus_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgStatus_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgStatus_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgStatus_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgStatus_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) SeenSeq_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) SeenSeq_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) SeenSeq_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) SeenSeq_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenSeq_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenSeq_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenSeq_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenSeq_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenSeq_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) SeenMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) SeenMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) SeenMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) SeenMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) SeenMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) LastMsgIdRecived_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgIdRecived IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMsgIdRecived_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgIdRecived IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMsgIdRecived_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgIdRecived NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) LastMsgIdRecived_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgIdRecived_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgIdRecived_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgIdRecived_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgIdRecived_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgIdRecived_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) Left_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Left IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Left_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Left IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Left_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Left NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) Left_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Left_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Left_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Left_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Left_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Left_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) Creator_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Creator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Creator_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Creator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Creator_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Creator NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) Creator_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Creator_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Creator_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Creator_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Creator_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Creator_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) Kicked_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Kicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Kicked_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Kicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Kicked_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Kicked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) Kicked_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Kicked_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Kicked_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Kicked_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Kicked_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Kicked_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) Admin_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Admin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Admin_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Admin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Admin_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Admin NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) Admin_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Admin_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Admin_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Admin_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Admin_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Admin_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) Deactivated_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Deactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Deactivated_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Deactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Deactivated_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Deactivated NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) Deactivated_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Deactivated_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Deactivated_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Deactivated_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Deactivated_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Deactivated_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) VersionTime_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) VersionTime_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) VersionTime_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) VersionTime_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTime_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTime_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTime_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTime_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTime_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) OrderTime_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) OrderTime_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) OrderTime_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) OrderTime_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) CreatedTime_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) CreatedTime_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) CreatedTime_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) CreatedTime_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) DratReplyToMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) DratReplyToMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) DratReplyToMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) DratReplyToMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Chat_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Chat_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Chat_Updater) Or() *__Chat_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Chat_Updater) ChatId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) ChatId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) ChatId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) ChatId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) RoomType_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) RoomType_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) RoomType_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) RoomType_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) UserId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UserId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UserId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) UserId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) PeerUserId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerUserId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerUserId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) PeerUserId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) GroupId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) GroupId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) GroupId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) GroupId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) HashTagId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) HashTagId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) HashTagId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) HashTagId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) StartedByMe_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StartedByMe IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) StartedByMe_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StartedByMe IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) StartedByMe_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StartedByMe NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) StartedByMe_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) StartedByMe_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) StartedByMe_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) StartedByMe_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) StartedByMe_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) StartedByMe_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) PinTime_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PinTime_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PinTime_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) PinTime_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTime_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTime_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTime_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTime_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTime_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) FromMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) FromMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) FromMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) FromMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) Seq_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Seq_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Seq_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) Seq_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) UnseenCount_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UnseenCount_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UnseenCount_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) UnseenCount_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) LastMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) LastMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) LastMsgStatus_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMsgStatus_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMsgStatus_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgStatus NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) LastMsgStatus_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgStatus_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgStatus_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgStatus_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgStatus_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgStatus_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) SeenSeq_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) SeenSeq_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) SeenSeq_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) SeenSeq_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenSeq_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenSeq_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenSeq_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenSeq_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenSeq_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) SeenMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) SeenMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) SeenMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) SeenMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) SeenMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) LastMsgIdRecived_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgIdRecived IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMsgIdRecived_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgIdRecived IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMsgIdRecived_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgIdRecived NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) LastMsgIdRecived_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgIdRecived_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgIdRecived_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgIdRecived_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgIdRecived_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgIdRecived_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) Left_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Left IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Left_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Left IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Left_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Left NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) Left_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Left_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Left_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Left_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Left_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Left_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) Creator_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Creator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Creator_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Creator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Creator_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Creator NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) Creator_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Creator_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Creator_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Creator_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Creator_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Creator_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) Kicked_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Kicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Kicked_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Kicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Kicked_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Kicked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) Kicked_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Kicked_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Kicked_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Kicked_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Kicked_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Kicked_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) Admin_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Admin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Admin_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Admin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Admin_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Admin NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) Admin_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Admin_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Admin_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Admin_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Admin_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Admin_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) Deactivated_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Deactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Deactivated_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Deactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Deactivated_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Deactivated NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) Deactivated_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Deactivated_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Deactivated_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Deactivated_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Deactivated_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Deactivated_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) VersionTime_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) VersionTime_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) VersionTime_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) VersionTime_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTime_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTime_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTime_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTime_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTime_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) OrderTime_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) OrderTime_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) OrderTime_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) OrderTime_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) CreatedTime_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) CreatedTime_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) CreatedTime_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) CreatedTime_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) DratReplyToMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) DratReplyToMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) DratReplyToMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) DratReplyToMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Chat_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Chat_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Chat_Selector) Or() *__Chat_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Chat_Selector) ChatId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) ChatId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) ChatId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) ChatId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) RoomType_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) RoomType_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) RoomType_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) RoomType_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) UserId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UserId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UserId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) UserId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) PeerUserId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerUserId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerUserId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) PeerUserId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) GroupId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) GroupId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) GroupId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) GroupId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) HashTagId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) HashTagId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) HashTagId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) HashTagId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) StartedByMe_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StartedByMe IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) StartedByMe_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StartedByMe IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) StartedByMe_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " StartedByMe NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) StartedByMe_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) StartedByMe_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) StartedByMe_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) StartedByMe_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) StartedByMe_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) StartedByMe_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " StartedByMe >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) PinTime_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PinTime_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PinTime_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) PinTime_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTime_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTime_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTime_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTime_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTime_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) FromMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) FromMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) FromMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) FromMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) Seq_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Seq_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Seq_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) Seq_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) UnseenCount_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UnseenCount_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UnseenCount_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) UnseenCount_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) LastMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) LastMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) LastMsgStatus_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMsgStatus_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMsgStatus_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgStatus NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) LastMsgStatus_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgStatus_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgStatus_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgStatus_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgStatus_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgStatus_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgStatus >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) SeenSeq_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) SeenSeq_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) SeenSeq_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) SeenSeq_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenSeq_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenSeq_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenSeq_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenSeq_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenSeq_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) SeenMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) SeenMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) SeenMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) SeenMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) SeenMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) LastMsgIdRecived_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgIdRecived IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMsgIdRecived_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgIdRecived IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMsgIdRecived_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgIdRecived NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) LastMsgIdRecived_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgIdRecived_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgIdRecived_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgIdRecived_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgIdRecived_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgIdRecived_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgIdRecived >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) Left_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Left IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Left_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Left IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Left_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Left NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) Left_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Left_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Left_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Left_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Left_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Left_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Left >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) Creator_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Creator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Creator_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Creator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Creator_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Creator NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) Creator_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Creator_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Creator_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Creator_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Creator_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Creator_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Creator >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) Kicked_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Kicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Kicked_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Kicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Kicked_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Kicked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) Kicked_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Kicked_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Kicked_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Kicked_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Kicked_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Kicked_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Kicked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) Admin_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Admin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Admin_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Admin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Admin_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Admin NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) Admin_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Admin_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Admin_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Admin_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Admin_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Admin_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Admin >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) Deactivated_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Deactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Deactivated_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Deactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Deactivated_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Deactivated NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) Deactivated_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Deactivated_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Deactivated_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Deactivated_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Deactivated_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Deactivated_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Deactivated >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) VersionTime_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) VersionTime_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) VersionTime_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) VersionTime_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTime_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTime_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTime_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTime_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTime_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) OrderTime_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) OrderTime_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) OrderTime_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) OrderTime_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) CreatedTime_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) CreatedTime_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) CreatedTime_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) CreatedTime_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) DratReplyToMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) DratReplyToMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) DratReplyToMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) DratReplyToMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Chat_Deleter) ChatKey_In(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) ChatKey_NotIn(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Deleter) ChatKey_Like(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) ChatKey_Eq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatKey_NotEq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) RoomKey_In(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) RoomKey_NotIn(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Deleter) RoomKey_Like(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) RoomKey_Eq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomKey_NotEq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) Title_In(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Title_NotIn(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Deleter) Title_Like(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) Title_Eq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Title_NotEq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) DraftText_In(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) DraftText_NotIn(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Deleter) DraftText_Like(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) DraftText_Eq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DraftText_NotEq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Chat_Updater) ChatKey_In(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) ChatKey_NotIn(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Updater) ChatKey_Like(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) ChatKey_Eq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatKey_NotEq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) RoomKey_In(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) RoomKey_NotIn(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Updater) RoomKey_Like(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) RoomKey_Eq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomKey_NotEq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) Title_In(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Title_NotIn(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Updater) Title_Like(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) Title_Eq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Title_NotEq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) DraftText_In(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) DraftText_NotIn(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Updater) DraftText_Like(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) DraftText_Eq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DraftText_NotEq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Chat_Selector) ChatKey_In(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) ChatKey_NotIn(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Selector) ChatKey_Like(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) ChatKey_Eq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatKey_NotEq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) RoomKey_In(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) RoomKey_NotIn(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Selector) RoomKey_Like(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) RoomKey_Eq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomKey_NotEq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) Title_In(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Title_NotIn(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Selector) Title_Like(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) Title_Eq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Title_NotEq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) DraftText_In(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) DraftText_NotIn(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Selector) DraftText_Like(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) DraftText_Eq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DraftText_NotEq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Chat_Updater) ChatId(newVal int) *__Chat_Updater {
	up := updateCol{" ChatId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ChatId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) ChatId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" ChatId = ChatId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ChatId = ChatId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ChatId = ChatId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ChatId = ChatId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Chat_Updater) ChatKey(newVal string) *__Chat_Updater {
	up := updateCol{"ChatKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ChatKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Chat_Updater) RoomKey(newVal string) *__Chat_Updater {
	up := updateCol{"RoomKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" RoomKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Chat_Updater) RoomType(newVal int) *__Chat_Updater {
	up := updateCol{" RoomType = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" RoomType = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) RoomType_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" RoomType = RoomType+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" RoomType = RoomType+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" RoomType = RoomType- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" RoomType = RoomType- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) UserId(newVal int) *__Chat_Updater {
	up := updateCol{" UserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) UserId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" UserId = UserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UserId = UserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UserId = UserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UserId = UserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) PeerUserId(newVal int) *__Chat_Updater {
	up := updateCol{" PeerUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PeerUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) PeerUserId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" PeerUserId = PeerUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PeerUserId = PeerUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PeerUserId = PeerUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PeerUserId = PeerUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) GroupId(newVal int) *__Chat_Updater {
	up := updateCol{" GroupId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" GroupId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) GroupId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" GroupId = GroupId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" GroupId = GroupId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" GroupId = GroupId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" GroupId = GroupId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) HashTagId(newVal int) *__Chat_Updater {
	up := updateCol{" HashTagId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" HashTagId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) HashTagId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" HashTagId = HashTagId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" HashTagId = HashTagId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" HashTagId = HashTagId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" HashTagId = HashTagId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) StartedByMe(newVal int) *__Chat_Updater {
	up := updateCol{" StartedByMe = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" StartedByMe = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) StartedByMe_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" StartedByMe = StartedByMe+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" StartedByMe = StartedByMe+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" StartedByMe = StartedByMe- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" StartedByMe = StartedByMe- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Chat_Updater) Title(newVal string) *__Chat_Updater {
	up := updateCol{"Title = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Title = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Chat_Updater) PinTime(newVal int) *__Chat_Updater {
	up := updateCol{" PinTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PinTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) PinTime_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" PinTime = PinTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PinTime = PinTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PinTime = PinTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PinTime = PinTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) FromMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" FromMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" FromMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) FromMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" FromMsgId = FromMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" FromMsgId = FromMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" FromMsgId = FromMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" FromMsgId = FromMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) Seq(newVal int) *__Chat_Updater {
	up := updateCol{" Seq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Seq = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) Seq_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" Seq = Seq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Seq = Seq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Seq = Seq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Seq = Seq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) UnseenCount(newVal int) *__Chat_Updater {
	up := updateCol{" UnseenCount = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UnseenCount = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) UnseenCount_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" UnseenCount = UnseenCount+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UnseenCount = UnseenCount+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UnseenCount = UnseenCount- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UnseenCount = UnseenCount- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) LastMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" LastMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" LastMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) LastMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" LastMsgId = LastMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" LastMsgId = LastMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" LastMsgId = LastMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" LastMsgId = LastMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) LastMsgStatus(newVal int) *__Chat_Updater {
	up := updateCol{" LastMsgStatus = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" LastMsgStatus = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) LastMsgStatus_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" LastMsgStatus = LastMsgStatus+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" LastMsgStatus = LastMsgStatus+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" LastMsgStatus = LastMsgStatus- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" LastMsgStatus = LastMsgStatus- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) SeenSeq(newVal int) *__Chat_Updater {
	up := updateCol{" SeenSeq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" SeenSeq = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) SeenSeq_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" SeenSeq = SeenSeq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" SeenSeq = SeenSeq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" SeenSeq = SeenSeq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" SeenSeq = SeenSeq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) SeenMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" SeenMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" SeenMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) SeenMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" SeenMsgId = SeenMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" SeenMsgId = SeenMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" SeenMsgId = SeenMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" SeenMsgId = SeenMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) LastMsgIdRecived(newVal int) *__Chat_Updater {
	up := updateCol{" LastMsgIdRecived = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" LastMsgIdRecived = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) LastMsgIdRecived_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" LastMsgIdRecived = LastMsgIdRecived+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" LastMsgIdRecived = LastMsgIdRecived+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" LastMsgIdRecived = LastMsgIdRecived- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" LastMsgIdRecived = LastMsgIdRecived- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) Left(newVal int) *__Chat_Updater {
	up := updateCol{" Left = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Left = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) Left_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" Left = Left+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Left = Left+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Left = Left- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Left = Left- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) Creator(newVal int) *__Chat_Updater {
	up := updateCol{" Creator = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Creator = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) Creator_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" Creator = Creator+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Creator = Creator+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Creator = Creator- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Creator = Creator- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) Kicked(newVal int) *__Chat_Updater {
	up := updateCol{" Kicked = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Kicked = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) Kicked_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" Kicked = Kicked+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Kicked = Kicked+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Kicked = Kicked- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Kicked = Kicked- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) Admin(newVal int) *__Chat_Updater {
	up := updateCol{" Admin = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Admin = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) Admin_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" Admin = Admin+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Admin = Admin+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Admin = Admin- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Admin = Admin- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) Deactivated(newVal int) *__Chat_Updater {
	up := updateCol{" Deactivated = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Deactivated = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) Deactivated_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" Deactivated = Deactivated+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Deactivated = Deactivated+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Deactivated = Deactivated- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Deactivated = Deactivated- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) VersionTime(newVal int) *__Chat_Updater {
	up := updateCol{" VersionTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" VersionTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) VersionTime_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" VersionTime = VersionTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" VersionTime = VersionTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" VersionTime = VersionTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" VersionTime = VersionTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) OrderTime(newVal int) *__Chat_Updater {
	up := updateCol{" OrderTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" OrderTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) OrderTime_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" OrderTime = OrderTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" OrderTime = OrderTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" OrderTime = OrderTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" OrderTime = OrderTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) CreatedTime(newVal int) *__Chat_Updater {
	up := updateCol{" CreatedTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatedTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) CreatedTime_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" CreatedTime = CreatedTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatedTime = CreatedTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatedTime = CreatedTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatedTime = CreatedTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Chat_Updater) DraftText(newVal string) *__Chat_Updater {
	up := updateCol{"DraftText = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DraftText = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Chat_Updater) DratReplyToMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" DratReplyToMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DratReplyToMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) DratReplyToMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" DratReplyToMsgId = DratReplyToMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DratReplyToMsgId = DratReplyToMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DratReplyToMsgId = DratReplyToMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DratReplyToMsgId = DratReplyToMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Chat_Selector) OrderBy_ChatId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_ChatId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatId ASC "
	return u
}

func (u *__Chat_Selector) Select_ChatId() *__Chat_Selector {
	u.selectCol = "ChatId"
	return u
}

func (u *__Chat_Selector) OrderBy_ChatKey_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatKey DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_ChatKey_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatKey ASC "
	return u
}

func (u *__Chat_Selector) Select_ChatKey() *__Chat_Selector {
	u.selectCol = "ChatKey"
	return u
}

func (u *__Chat_Selector) OrderBy_RoomKey_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_RoomKey_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__Chat_Selector) Select_RoomKey() *__Chat_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__Chat_Selector) OrderBy_RoomType_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomType DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_RoomType_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomType ASC "
	return u
}

func (u *__Chat_Selector) Select_RoomType() *__Chat_Selector {
	u.selectCol = "RoomType"
	return u
}

func (u *__Chat_Selector) OrderBy_UserId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_UserId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Chat_Selector) Select_UserId() *__Chat_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Chat_Selector) OrderBy_PeerUserId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_PeerUserId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__Chat_Selector) Select_PeerUserId() *__Chat_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__Chat_Selector) OrderBy_GroupId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY GroupId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_GroupId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY GroupId ASC "
	return u
}

func (u *__Chat_Selector) Select_GroupId() *__Chat_Selector {
	u.selectCol = "GroupId"
	return u
}

func (u *__Chat_Selector) OrderBy_HashTagId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY HashTagId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_HashTagId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY HashTagId ASC "
	return u
}

func (u *__Chat_Selector) Select_HashTagId() *__Chat_Selector {
	u.selectCol = "HashTagId"
	return u
}

func (u *__Chat_Selector) OrderBy_StartedByMe_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY StartedByMe DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_StartedByMe_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY StartedByMe ASC "
	return u
}

func (u *__Chat_Selector) Select_StartedByMe() *__Chat_Selector {
	u.selectCol = "StartedByMe"
	return u
}

func (u *__Chat_Selector) OrderBy_Title_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY Title DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_Title_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY Title ASC "
	return u
}

func (u *__Chat_Selector) Select_Title() *__Chat_Selector {
	u.selectCol = "Title"
	return u
}

func (u *__Chat_Selector) OrderBy_PinTime_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY PinTime DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_PinTime_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY PinTime ASC "
	return u
}

func (u *__Chat_Selector) Select_PinTime() *__Chat_Selector {
	u.selectCol = "PinTime"
	return u
}

func (u *__Chat_Selector) OrderBy_FromMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY FromMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_FromMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY FromMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_FromMsgId() *__Chat_Selector {
	u.selectCol = "FromMsgId"
	return u
}

func (u *__Chat_Selector) OrderBy_Seq_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY Seq DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_Seq_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY Seq ASC "
	return u
}

func (u *__Chat_Selector) Select_Seq() *__Chat_Selector {
	u.selectCol = "Seq"
	return u
}

func (u *__Chat_Selector) OrderBy_UnseenCount_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY UnseenCount DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_UnseenCount_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY UnseenCount ASC "
	return u
}

func (u *__Chat_Selector) Select_UnseenCount() *__Chat_Selector {
	u.selectCol = "UnseenCount"
	return u
}

func (u *__Chat_Selector) OrderBy_LastMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_LastMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_LastMsgId() *__Chat_Selector {
	u.selectCol = "LastMsgId"
	return u
}

func (u *__Chat_Selector) OrderBy_LastMsgStatus_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMsgStatus DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_LastMsgStatus_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMsgStatus ASC "
	return u
}

func (u *__Chat_Selector) Select_LastMsgStatus() *__Chat_Selector {
	u.selectCol = "LastMsgStatus"
	return u
}

func (u *__Chat_Selector) OrderBy_SeenSeq_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY SeenSeq DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_SeenSeq_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY SeenSeq ASC "
	return u
}

func (u *__Chat_Selector) Select_SeenSeq() *__Chat_Selector {
	u.selectCol = "SeenSeq"
	return u
}

func (u *__Chat_Selector) OrderBy_SeenMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY SeenMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_SeenMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY SeenMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_SeenMsgId() *__Chat_Selector {
	u.selectCol = "SeenMsgId"
	return u
}

func (u *__Chat_Selector) OrderBy_LastMsgIdRecived_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMsgIdRecived DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_LastMsgIdRecived_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMsgIdRecived ASC "
	return u
}

func (u *__Chat_Selector) Select_LastMsgIdRecived() *__Chat_Selector {
	u.selectCol = "LastMsgIdRecived"
	return u
}

func (u *__Chat_Selector) OrderBy_Left_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY Left DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_Left_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY Left ASC "
	return u
}

func (u *__Chat_Selector) Select_Left() *__Chat_Selector {
	u.selectCol = "Left"
	return u
}

func (u *__Chat_Selector) OrderBy_Creator_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY Creator DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_Creator_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY Creator ASC "
	return u
}

func (u *__Chat_Selector) Select_Creator() *__Chat_Selector {
	u.selectCol = "Creator"
	return u
}

func (u *__Chat_Selector) OrderBy_Kicked_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY Kicked DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_Kicked_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY Kicked ASC "
	return u
}

func (u *__Chat_Selector) Select_Kicked() *__Chat_Selector {
	u.selectCol = "Kicked"
	return u
}

func (u *__Chat_Selector) OrderBy_Admin_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY Admin DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_Admin_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY Admin ASC "
	return u
}

func (u *__Chat_Selector) Select_Admin() *__Chat_Selector {
	u.selectCol = "Admin"
	return u
}

func (u *__Chat_Selector) OrderBy_Deactivated_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY Deactivated DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_Deactivated_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY Deactivated ASC "
	return u
}

func (u *__Chat_Selector) Select_Deactivated() *__Chat_Selector {
	u.selectCol = "Deactivated"
	return u
}

func (u *__Chat_Selector) OrderBy_VersionTime_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY VersionTime DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_VersionTime_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY VersionTime ASC "
	return u
}

func (u *__Chat_Selector) Select_VersionTime() *__Chat_Selector {
	u.selectCol = "VersionTime"
	return u
}

func (u *__Chat_Selector) OrderBy_OrderTime_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY OrderTime DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_OrderTime_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY OrderTime ASC "
	return u
}

func (u *__Chat_Selector) Select_OrderTime() *__Chat_Selector {
	u.selectCol = "OrderTime"
	return u
}

func (u *__Chat_Selector) OrderBy_CreatedTime_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_CreatedTime_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Chat_Selector) Select_CreatedTime() *__Chat_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Chat_Selector) OrderBy_DraftText_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY DraftText DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_DraftText_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY DraftText ASC "
	return u
}

func (u *__Chat_Selector) Select_DraftText() *__Chat_Selector {
	u.selectCol = "DraftText"
	return u
}

func (u *__Chat_Selector) OrderBy_DratReplyToMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY DratReplyToMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_DratReplyToMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY DratReplyToMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_DratReplyToMsgId() *__Chat_Selector {
	u.selectCol = "DratReplyToMsgId"
	return u
}

func (u *__Chat_Selector) Limit(num int) *__Chat_Selector {
	u.limit = num
	return u
}

func (u *__Chat_Selector) Offset(num int) *__Chat_Selector {
	u.offset = num
	return u
}

func (u *__Chat_Selector) Order_Rand() *__Chat_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Chat_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_chat.chat"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Chat_Selector) GetRow(db *sqlx.DB) (*Chat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}

	row := &Chat{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnChat_LoadOne(row)

	return row, nil
}

func (u *__Chat_Selector) GetRows(db *sqlx.DB) ([]*Chat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*Chat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnChat_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Chat_Selector) GetRows2(db *sqlx.DB) ([]Chat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*Chat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnChat_LoadMany(rows)

	rows2 := make([]Chat, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Chat_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__Chat_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Chat_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Chat_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Chat_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_chat.chat SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__Chat_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_chat.chat WHERE " + wheresStr

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Chat ////////////////

func MassInsert_Chat(rows []Chat, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(29, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun_chat.chat (" +
		"ChatId, ChatKey, RoomKey, RoomType, UserId, PeerUserId, GroupId, HashTagId, StartedByMe, Title, PinTime, FromMsgId, Seq, UnseenCount, LastMsgId, LastMsgStatus, SeenSeq, SeenMsgId, LastMsgIdRecived, Left, Creator, Kicked, Admin, Deactivated, VersionTime, OrderTime, CreatedTime, DraftText, DratReplyToMsgId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ChatId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.RoomType)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.HashTagId)
		vals = append(vals, row.StartedByMe)
		vals = append(vals, row.Title)
		vals = append(vals, row.PinTime)
		vals = append(vals, row.FromMsgId)
		vals = append(vals, row.Seq)
		vals = append(vals, row.UnseenCount)
		vals = append(vals, row.LastMsgId)
		vals = append(vals, row.LastMsgStatus)
		vals = append(vals, row.SeenSeq)
		vals = append(vals, row.SeenMsgId)
		vals = append(vals, row.LastMsgIdRecived)
		vals = append(vals, row.Left)
		vals = append(vals, row.Creator)
		vals = append(vals, row.Kicked)
		vals = append(vals, row.Admin)
		vals = append(vals, row.Deactivated)
		vals = append(vals, row.VersionTime)
		vals = append(vals, row.OrderTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.DraftText)
		vals = append(vals, row.DratReplyToMsgId)

	}

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_Chat(rows []Chat, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(29, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun_chat.chat (" +
		"ChatId, ChatKey, RoomKey, RoomType, UserId, PeerUserId, GroupId, HashTagId, StartedByMe, Title, PinTime, FromMsgId, Seq, UnseenCount, LastMsgId, LastMsgStatus, SeenSeq, SeenMsgId, LastMsgIdRecived, Left, Creator, Kicked, Admin, Deactivated, VersionTime, OrderTime, CreatedTime, DraftText, DratReplyToMsgId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ChatId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.RoomType)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.HashTagId)
		vals = append(vals, row.StartedByMe)
		vals = append(vals, row.Title)
		vals = append(vals, row.PinTime)
		vals = append(vals, row.FromMsgId)
		vals = append(vals, row.Seq)
		vals = append(vals, row.UnseenCount)
		vals = append(vals, row.LastMsgId)
		vals = append(vals, row.LastMsgStatus)
		vals = append(vals, row.SeenSeq)
		vals = append(vals, row.SeenMsgId)
		vals = append(vals, row.LastMsgIdRecived)
		vals = append(vals, row.Left)
		vals = append(vals, row.Creator)
		vals = append(vals, row.Kicked)
		vals = append(vals, row.Admin)
		vals = append(vals, row.Deactivated)
		vals = append(vals, row.VersionTime)
		vals = append(vals, row.OrderTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.DraftText)
		vals = append(vals, row.DratReplyToMsgId)

	}

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
