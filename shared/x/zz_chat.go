package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Chat represents a row from 'sun_chat.chat'.

// Manualy copy this to project
type Chat__ struct {
	ChatId                 int    `json:"ChatId"`                 // ChatId -
	ChatKey                string `json:"ChatKey"`                // ChatKey -
	RoomKey                string `json:"RoomKey"`                // RoomKey -
	RoomType               int    `json:"RoomType"`               // RoomType -
	UserId                 int    `json:"UserId"`                 // UserId -
	PeerUserId             int    `json:"PeerUserId"`             // PeerUserId -
	GroupId                int    `json:"GroupId"`                // GroupId -
	HashTagId              int    `json:"HashTagId"`              // HashTagId -
	Title                  string `json:"Title"`                  // Title -
	PinTimeMs              int    `json:"PinTimeMs"`              // PinTimeMs -
	FromMsgId              int    `json:"FromMsgId"`              // FromMsgId -
	UnseenCount            int    `json:"UnseenCount"`            // UnseenCount -
	Seq                    int    `json:"Seq"`                    // Seq -
	LastMsgId              int    `json:"LastMsgId"`              // LastMsgId -
	LastMyMsgStatus        int    `json:"LastMyMsgStatus"`        // LastMyMsgStatus -
	MyLastSeenSeq          int    `json:"MyLastSeenSeq"`          // MyLastSeenSeq -
	MyLastSeenMsgId        int    `json:"MyLastSeenMsgId"`        // MyLastSeenMsgId -
	PeerLastSeenMsgId      int    `json:"PeerLastSeenMsgId"`      // PeerLastSeenMsgId -
	MyLastDeliveredSeq     int    `json:"MyLastDeliveredSeq"`     // MyLastDeliveredSeq -
	MyLastDeliveredMsgId   int    `json:"MyLastDeliveredMsgId"`   // MyLastDeliveredMsgId -
	PeerLastDeliveredMsgId int    `json:"PeerLastDeliveredMsgId"` // PeerLastDeliveredMsgId -
	IsActive               int    `json:"IsActive"`               // IsActive -
	IsLeft                 int    `json:"IsLeft"`                 // IsLeft -
	IsCreator              int    `json:"IsCreator"`              // IsCreator -
	IsKicked               int    `json:"IsKicked"`               // IsKicked -
	IsAdmin                int    `json:"IsAdmin"`                // IsAdmin -
	IsDeactivated          int    `json:"IsDeactivated"`          // IsDeactivated -
	IsMuted                int    `json:"IsMuted"`                // IsMuted -
	MuteUntil              int    `json:"MuteUntil"`              // MuteUntil -
	VersionTimeMs          int    `json:"VersionTimeMs"`          // VersionTimeMs -
	VersionSeq             int    `json:"VersionSeq"`             // VersionSeq -
	OrderTime              int    `json:"OrderTime"`              // OrderTime -
	CreatedTime            int    `json:"CreatedTime"`            // CreatedTime -
	DraftText              string `json:"DraftText"`              // DraftText -
	DratReplyToMsgId       int    `json:"DratReplyToMsgId"`       // DratReplyToMsgId -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Chat exists in the database.
func (c *Chat) Exists() bool {
	return c._exists
}

// Deleted provides information if the Chat has been deleted from the database.
func (c *Chat) Deleted() bool {
	return c._deleted
}

// Insert inserts the Chat to the database.
func (c *Chat) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_chat.chat (` +
		`ChatId, ChatKey, RoomKey, RoomType, UserId, PeerUserId, GroupId, HashTagId, Title, PinTimeMs, FromMsgId, UnseenCount, Seq, LastMsgId, LastMyMsgStatus, MyLastSeenSeq, MyLastSeenMsgId, PeerLastSeenMsgId, MyLastDeliveredSeq, MyLastDeliveredMsgId, PeerLastDeliveredMsgId, IsActive, IsLeft, IsCreator, IsKicked, IsAdmin, IsDeactivated, IsMuted, MuteUntil, VersionTimeMs, VersionSeq, OrderTime, CreatedTime, DraftText, DratReplyToMsgId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, c.ChatId, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.Title, c.PinTimeMs, c.FromMsgId, c.UnseenCount, c.Seq, c.LastMsgId, c.LastMyMsgStatus, c.MyLastSeenSeq, c.MyLastSeenMsgId, c.PeerLastSeenMsgId, c.MyLastDeliveredSeq, c.MyLastDeliveredMsgId, c.PeerLastDeliveredMsgId, c.IsActive, c.IsLeft, c.IsCreator, c.IsKicked, c.IsAdmin, c.IsDeactivated, c.IsMuted, c.MuteUntil, c.VersionTimeMs, c.VersionSeq, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId)
	}
	_, err = db.Exec(sqlstr, c.ChatId, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.Title, c.PinTimeMs, c.FromMsgId, c.UnseenCount, c.Seq, c.LastMsgId, c.LastMyMsgStatus, c.MyLastSeenSeq, c.MyLastSeenMsgId, c.PeerLastSeenMsgId, c.MyLastDeliveredSeq, c.MyLastDeliveredMsgId, c.PeerLastDeliveredMsgId, c.IsActive, c.IsLeft, c.IsCreator, c.IsKicked, c.IsAdmin, c.IsDeactivated, c.IsMuted, c.MuteUntil, c.VersionTimeMs, c.VersionSeq, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	OnChat_AfterInsert(c)

	return nil
}

// Insert inserts the Chat to the database.
func (c *Chat) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_chat.chat (` +
		`ChatId, ChatKey, RoomKey, RoomType, UserId, PeerUserId, GroupId, HashTagId, Title, PinTimeMs, FromMsgId, UnseenCount, Seq, LastMsgId, LastMyMsgStatus, MyLastSeenSeq, MyLastSeenMsgId, PeerLastSeenMsgId, MyLastDeliveredSeq, MyLastDeliveredMsgId, PeerLastDeliveredMsgId, IsActive, IsLeft, IsCreator, IsKicked, IsAdmin, IsDeactivated, IsMuted, MuteUntil, VersionTimeMs, VersionSeq, OrderTime, CreatedTime, DraftText, DratReplyToMsgId` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, c.ChatId, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.Title, c.PinTimeMs, c.FromMsgId, c.UnseenCount, c.Seq, c.LastMsgId, c.LastMyMsgStatus, c.MyLastSeenSeq, c.MyLastSeenMsgId, c.PeerLastSeenMsgId, c.MyLastDeliveredSeq, c.MyLastDeliveredMsgId, c.PeerLastDeliveredMsgId, c.IsActive, c.IsLeft, c.IsCreator, c.IsKicked, c.IsAdmin, c.IsDeactivated, c.IsMuted, c.MuteUntil, c.VersionTimeMs, c.VersionSeq, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId)
	}
	_, err = db.Exec(sqlstr, c.ChatId, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.Title, c.PinTimeMs, c.FromMsgId, c.UnseenCount, c.Seq, c.LastMsgId, c.LastMyMsgStatus, c.MyLastSeenSeq, c.MyLastSeenMsgId, c.PeerLastSeenMsgId, c.MyLastDeliveredSeq, c.MyLastDeliveredMsgId, c.PeerLastDeliveredMsgId, c.IsActive, c.IsLeft, c.IsCreator, c.IsKicked, c.IsAdmin, c.IsDeactivated, c.IsMuted, c.MuteUntil, c.VersionTimeMs, c.VersionSeq, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return err
	}

	c._exists = true

	OnChat_AfterInsert(c)

	return nil
}

// Update updates the Chat in the database.
func (c *Chat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_chat.chat SET ` +
		`ChatKey = ?, RoomKey = ?, RoomType = ?, UserId = ?, PeerUserId = ?, GroupId = ?, HashTagId = ?, Title = ?, PinTimeMs = ?, FromMsgId = ?, UnseenCount = ?, Seq = ?, LastMsgId = ?, LastMyMsgStatus = ?, MyLastSeenSeq = ?, MyLastSeenMsgId = ?, PeerLastSeenMsgId = ?, MyLastDeliveredSeq = ?, MyLastDeliveredMsgId = ?, PeerLastDeliveredMsgId = ?, IsActive = ?, IsLeft = ?, IsCreator = ?, IsKicked = ?, IsAdmin = ?, IsDeactivated = ?, IsMuted = ?, MuteUntil = ?, VersionTimeMs = ?, VersionSeq = ?, OrderTime = ?, CreatedTime = ?, DraftText = ?, DratReplyToMsgId = ?` +
		` WHERE ChatId = ?`

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.Title, c.PinTimeMs, c.FromMsgId, c.UnseenCount, c.Seq, c.LastMsgId, c.LastMyMsgStatus, c.MyLastSeenSeq, c.MyLastSeenMsgId, c.PeerLastSeenMsgId, c.MyLastDeliveredSeq, c.MyLastDeliveredMsgId, c.PeerLastDeliveredMsgId, c.IsActive, c.IsLeft, c.IsCreator, c.IsKicked, c.IsAdmin, c.IsDeactivated, c.IsMuted, c.MuteUntil, c.VersionTimeMs, c.VersionSeq, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId, c.ChatId)
	}
	_, err = db.Exec(sqlstr, c.ChatKey, c.RoomKey, c.RoomType, c.UserId, c.PeerUserId, c.GroupId, c.HashTagId, c.Title, c.PinTimeMs, c.FromMsgId, c.UnseenCount, c.Seq, c.LastMsgId, c.LastMyMsgStatus, c.MyLastSeenSeq, c.MyLastSeenMsgId, c.PeerLastSeenMsgId, c.MyLastDeliveredSeq, c.MyLastDeliveredMsgId, c.PeerLastDeliveredMsgId, c.IsActive, c.IsLeft, c.IsCreator, c.IsKicked, c.IsAdmin, c.IsDeactivated, c.IsMuted, c.MuteUntil, c.VersionTimeMs, c.VersionSeq, c.OrderTime, c.CreatedTime, c.DraftText, c.DratReplyToMsgId, c.ChatId)

	if LogTableSqlReq.Chat {
		XOLogErr(err)
	}
	OnChat_AfterUpdate(c)

	return err
}

// Save saves the Chat to the database.
func (c *Chat) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Replace(db)
}

// Delete deletes the Chat from the database.
func (c *Chat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_chat.chat WHERE ChatId = ?`

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, c.ChatId)
	}
	_, err = db.Exec(sqlstr, c.ChatId)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	c._deleted = true

	OnChat_AfterDelete(c)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Chat_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Chat_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Chat_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewChat_Deleter() *__Chat_Deleter {
	d := __Chat_Deleter{whereSep: " AND ", isMysql: true}
	return &d
}

func NewChat_Updater() *__Chat_Updater {
	u := __Chat_Updater{whereSep: " AND ", isMysql: true}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewChat_Selector() *__Chat_Selector {
	u := __Chat_Selector{whereSep: " AND ", selectCol: "*", isMysql: true}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__Chat_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__Chat_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__Chat_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Chat_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Chat_Deleter) Or() *__Chat_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Chat_Deleter) ChatId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) ChatId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) ChatId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) ChatId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) RoomType_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) RoomType_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) RoomType_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) RoomType_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomType_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) UserId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UserId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UserId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) UserId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UserId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) PeerUserId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerUserId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerUserId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) PeerUserId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerUserId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) GroupId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) GroupId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) GroupId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) GroupId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) GroupId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) HashTagId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) HashTagId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) HashTagId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) HashTagId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) HashTagId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) PinTimeMs_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PinTimeMs_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PinTimeMs_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTimeMs NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) PinTimeMs_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTimeMs_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTimeMs_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTimeMs_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTimeMs_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PinTimeMs_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) FromMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) FromMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) FromMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) FromMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) FromMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) UnseenCount_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UnseenCount_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) UnseenCount_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) UnseenCount_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) UnseenCount_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) Seq_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Seq_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Seq_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) Seq_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Seq_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) LastMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) LastMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) LastMyMsgStatus_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMyMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMyMsgStatus_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMyMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) LastMyMsgStatus_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMyMsgStatus NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) LastMyMsgStatus_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMyMsgStatus_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMyMsgStatus_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMyMsgStatus_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMyMsgStatus_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) LastMyMsgStatus_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) MyLastSeenSeq_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MyLastSeenSeq_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MyLastSeenSeq_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) MyLastSeenSeq_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenSeq_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenSeq_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenSeq_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenSeq_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenSeq_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) MyLastSeenMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MyLastSeenMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MyLastSeenMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) MyLastSeenMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastSeenMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) PeerLastSeenMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerLastSeenMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerLastSeenMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) PeerLastSeenMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastSeenMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastSeenMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastSeenMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastSeenMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastSeenMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) MyLastDeliveredSeq_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MyLastDeliveredSeq_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MyLastDeliveredSeq_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) MyLastDeliveredSeq_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredSeq_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredSeq_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredSeq_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredSeq_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredSeq_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) MyLastDeliveredMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MyLastDeliveredMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MyLastDeliveredMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) MyLastDeliveredMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MyLastDeliveredMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) PeerLastDeliveredMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerLastDeliveredMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) PeerLastDeliveredMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) PeerLastDeliveredMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastDeliveredMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastDeliveredMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastDeliveredMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastDeliveredMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) PeerLastDeliveredMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) IsActive_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsActive IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsActive_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsActive IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsActive_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsActive NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) IsActive_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsActive_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsActive_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsActive_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsActive_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsActive_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) IsLeft_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLeft IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsLeft_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLeft IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsLeft_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLeft NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) IsLeft_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsLeft_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsLeft_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsLeft_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsLeft_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsLeft_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) IsCreator_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsCreator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsCreator_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsCreator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsCreator_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsCreator NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) IsCreator_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsCreator_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsCreator_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsCreator_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsCreator_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsCreator_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) IsKicked_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsKicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsKicked_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsKicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsKicked_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsKicked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) IsKicked_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsKicked_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsKicked_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsKicked_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsKicked_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsKicked_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) IsAdmin_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAdmin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsAdmin_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAdmin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsAdmin_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAdmin NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) IsAdmin_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsAdmin_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsAdmin_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsAdmin_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsAdmin_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsAdmin_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) IsDeactivated_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsDeactivated_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsDeactivated_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeactivated NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) IsDeactivated_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsDeactivated_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsDeactivated_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsDeactivated_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsDeactivated_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsDeactivated_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) IsMuted_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMuted IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsMuted_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMuted IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) IsMuted_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMuted NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) IsMuted_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsMuted_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsMuted_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsMuted_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsMuted_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) IsMuted_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) MuteUntil_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MuteUntil IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MuteUntil_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MuteUntil IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) MuteUntil_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MuteUntil NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) MuteUntil_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MuteUntil_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MuteUntil_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MuteUntil_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MuteUntil_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) MuteUntil_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) VersionTimeMs_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) VersionTimeMs_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) VersionTimeMs_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTimeMs NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) VersionTimeMs_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTimeMs_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTimeMs_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTimeMs_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTimeMs_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionTimeMs_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) VersionSeq_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) VersionSeq_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) VersionSeq_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) VersionSeq_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionSeq_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionSeq_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionSeq_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionSeq_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) VersionSeq_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) OrderTime_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) OrderTime_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) OrderTime_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) OrderTime_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) OrderTime_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) CreatedTime_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) CreatedTime_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) CreatedTime_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) CreatedTime_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) CreatedTime_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) DratReplyToMsgId_In(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) DratReplyToMsgId_Ins(ins ...int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) DratReplyToMsgId_NotIn(ins []int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) DratReplyToMsgId_Eq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_NotEq(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_LT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_LE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_GT(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DratReplyToMsgId_GE(val int) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Chat_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Chat_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Chat_Updater) Or() *__Chat_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Chat_Updater) ChatId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) ChatId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) ChatId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) ChatId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) RoomType_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) RoomType_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) RoomType_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) RoomType_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomType_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) UserId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UserId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UserId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) UserId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UserId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) PeerUserId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerUserId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerUserId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) PeerUserId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerUserId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) GroupId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) GroupId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) GroupId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) GroupId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) GroupId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) HashTagId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) HashTagId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) HashTagId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) HashTagId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) HashTagId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) PinTimeMs_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PinTimeMs_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PinTimeMs_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTimeMs NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) PinTimeMs_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTimeMs_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTimeMs_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTimeMs_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTimeMs_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PinTimeMs_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) FromMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) FromMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) FromMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) FromMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) FromMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) UnseenCount_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UnseenCount_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) UnseenCount_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) UnseenCount_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) UnseenCount_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) Seq_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Seq_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Seq_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) Seq_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Seq_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) LastMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) LastMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) LastMyMsgStatus_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMyMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMyMsgStatus_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMyMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) LastMyMsgStatus_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMyMsgStatus NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) LastMyMsgStatus_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMyMsgStatus_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMyMsgStatus_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMyMsgStatus_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMyMsgStatus_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) LastMyMsgStatus_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) MyLastSeenSeq_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MyLastSeenSeq_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MyLastSeenSeq_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) MyLastSeenSeq_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenSeq_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenSeq_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenSeq_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenSeq_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenSeq_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) MyLastSeenMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MyLastSeenMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MyLastSeenMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) MyLastSeenMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastSeenMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) PeerLastSeenMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerLastSeenMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerLastSeenMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) PeerLastSeenMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastSeenMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastSeenMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastSeenMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastSeenMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastSeenMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) MyLastDeliveredSeq_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MyLastDeliveredSeq_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MyLastDeliveredSeq_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) MyLastDeliveredSeq_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredSeq_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredSeq_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredSeq_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredSeq_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredSeq_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) MyLastDeliveredMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MyLastDeliveredMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MyLastDeliveredMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) MyLastDeliveredMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MyLastDeliveredMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) PeerLastDeliveredMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerLastDeliveredMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) PeerLastDeliveredMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) PeerLastDeliveredMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastDeliveredMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastDeliveredMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastDeliveredMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastDeliveredMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) PeerLastDeliveredMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) IsActive_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsActive IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsActive_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsActive IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsActive_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsActive NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) IsActive_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsActive_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsActive_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsActive_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsActive_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsActive_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) IsLeft_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLeft IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsLeft_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLeft IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsLeft_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLeft NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) IsLeft_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsLeft_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsLeft_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsLeft_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsLeft_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsLeft_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) IsCreator_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsCreator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsCreator_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsCreator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsCreator_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsCreator NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) IsCreator_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsCreator_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsCreator_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsCreator_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsCreator_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsCreator_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) IsKicked_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsKicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsKicked_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsKicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsKicked_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsKicked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) IsKicked_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsKicked_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsKicked_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsKicked_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsKicked_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsKicked_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) IsAdmin_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAdmin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsAdmin_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAdmin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsAdmin_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAdmin NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) IsAdmin_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsAdmin_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsAdmin_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsAdmin_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsAdmin_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsAdmin_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) IsDeactivated_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsDeactivated_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsDeactivated_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeactivated NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) IsDeactivated_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsDeactivated_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsDeactivated_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsDeactivated_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsDeactivated_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsDeactivated_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) IsMuted_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMuted IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsMuted_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMuted IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) IsMuted_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMuted NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) IsMuted_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsMuted_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsMuted_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsMuted_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsMuted_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) IsMuted_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) MuteUntil_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MuteUntil IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MuteUntil_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MuteUntil IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) MuteUntil_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MuteUntil NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) MuteUntil_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MuteUntil_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MuteUntil_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MuteUntil_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MuteUntil_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) MuteUntil_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) VersionTimeMs_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) VersionTimeMs_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) VersionTimeMs_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTimeMs NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) VersionTimeMs_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTimeMs_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTimeMs_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTimeMs_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTimeMs_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionTimeMs_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) VersionSeq_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) VersionSeq_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) VersionSeq_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) VersionSeq_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionSeq_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionSeq_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionSeq_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionSeq_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) VersionSeq_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) OrderTime_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) OrderTime_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) OrderTime_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) OrderTime_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) OrderTime_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) CreatedTime_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) CreatedTime_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) CreatedTime_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) CreatedTime_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) CreatedTime_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) DratReplyToMsgId_In(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) DratReplyToMsgId_Ins(ins ...int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) DratReplyToMsgId_NotIn(ins []int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) DratReplyToMsgId_Eq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_NotEq(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_LT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_LE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_GT(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DratReplyToMsgId_GE(val int) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Chat_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Chat_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Chat_Selector) Or() *__Chat_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Chat_Selector) ChatId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) ChatId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) ChatId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) ChatId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) RoomType_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) RoomType_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) RoomType_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomType NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) RoomType_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomType_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomType >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) UserId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UserId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UserId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) UserId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UserId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) PeerUserId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerUserId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerUserId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) PeerUserId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerUserId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) GroupId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) GroupId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) GroupId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) GroupId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) GroupId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) HashTagId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) HashTagId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) HashTagId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) HashTagId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) HashTagId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) PinTimeMs_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PinTimeMs_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PinTimeMs_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinTimeMs NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) PinTimeMs_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTimeMs_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTimeMs_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTimeMs_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTimeMs_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PinTimeMs_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinTimeMs >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) FromMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) FromMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) FromMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) FromMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) FromMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) UnseenCount_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UnseenCount_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) UnseenCount_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UnseenCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) UnseenCount_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) UnseenCount_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UnseenCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) Seq_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Seq_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Seq_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) Seq_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Seq_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) LastMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) LastMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) LastMyMsgStatus_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMyMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMyMsgStatus_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMyMsgStatus IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) LastMyMsgStatus_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMyMsgStatus NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) LastMyMsgStatus_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMyMsgStatus_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMyMsgStatus_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMyMsgStatus_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMyMsgStatus_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) LastMyMsgStatus_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMyMsgStatus >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) MyLastSeenSeq_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MyLastSeenSeq_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MyLastSeenSeq_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) MyLastSeenSeq_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenSeq_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenSeq_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenSeq_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenSeq_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenSeq_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) MyLastSeenMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MyLastSeenMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MyLastSeenMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastSeenMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) MyLastSeenMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastSeenMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastSeenMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) PeerLastSeenMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerLastSeenMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerLastSeenMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) PeerLastSeenMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastSeenMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastSeenMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastSeenMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastSeenMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastSeenMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastSeenMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) MyLastDeliveredSeq_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MyLastDeliveredSeq_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MyLastDeliveredSeq_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) MyLastDeliveredSeq_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredSeq_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredSeq_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredSeq_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredSeq_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredSeq_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) MyLastDeliveredMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MyLastDeliveredMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MyLastDeliveredMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) MyLastDeliveredMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MyLastDeliveredMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MyLastDeliveredMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) PeerLastDeliveredMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerLastDeliveredMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) PeerLastDeliveredMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) PeerLastDeliveredMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastDeliveredMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastDeliveredMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastDeliveredMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastDeliveredMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) PeerLastDeliveredMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerLastDeliveredMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) IsActive_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsActive IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsActive_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsActive IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsActive_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsActive NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) IsActive_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsActive_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsActive_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsActive_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsActive_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsActive_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsActive >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) IsLeft_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLeft IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsLeft_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLeft IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsLeft_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsLeft NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) IsLeft_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsLeft_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsLeft_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsLeft_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsLeft_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsLeft_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsLeft >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) IsCreator_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsCreator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsCreator_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsCreator IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsCreator_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsCreator NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) IsCreator_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsCreator_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsCreator_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsCreator_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsCreator_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsCreator_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsCreator >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) IsKicked_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsKicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsKicked_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsKicked IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsKicked_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsKicked NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) IsKicked_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsKicked_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsKicked_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsKicked_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsKicked_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsKicked_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsKicked >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) IsAdmin_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAdmin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsAdmin_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAdmin IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsAdmin_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsAdmin NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) IsAdmin_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsAdmin_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsAdmin_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsAdmin_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsAdmin_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsAdmin_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsAdmin >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) IsDeactivated_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsDeactivated_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeactivated IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsDeactivated_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsDeactivated NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) IsDeactivated_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsDeactivated_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsDeactivated_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsDeactivated_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsDeactivated_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsDeactivated_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsDeactivated >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) IsMuted_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMuted IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsMuted_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMuted IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) IsMuted_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMuted NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) IsMuted_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsMuted_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsMuted_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsMuted_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsMuted_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) IsMuted_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMuted >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) MuteUntil_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MuteUntil IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MuteUntil_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MuteUntil IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) MuteUntil_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MuteUntil NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) MuteUntil_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MuteUntil_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MuteUntil_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MuteUntil_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MuteUntil_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) MuteUntil_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MuteUntil >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) VersionTimeMs_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) VersionTimeMs_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTimeMs IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) VersionTimeMs_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionTimeMs NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) VersionTimeMs_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTimeMs_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTimeMs_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTimeMs_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTimeMs_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionTimeMs_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionTimeMs >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) VersionSeq_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) VersionSeq_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionSeq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) VersionSeq_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " VersionSeq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) VersionSeq_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionSeq_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionSeq_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionSeq_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionSeq_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) VersionSeq_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " VersionSeq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) OrderTime_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) OrderTime_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) OrderTime_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OrderTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) OrderTime_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) OrderTime_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OrderTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) CreatedTime_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) CreatedTime_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) CreatedTime_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) CreatedTime_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) CreatedTime_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) DratReplyToMsgId_In(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) DratReplyToMsgId_Ins(ins ...int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) DratReplyToMsgId_NotIn(ins []int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DratReplyToMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) DratReplyToMsgId_Eq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_NotEq(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_LT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_LE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_GT(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DratReplyToMsgId_GE(val int) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DratReplyToMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Chat_Deleter) ChatKey_In(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) ChatKey_NotIn(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Deleter) ChatKey_Like(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) ChatKey_Eq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) ChatKey_NotEq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) RoomKey_In(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) RoomKey_NotIn(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Deleter) RoomKey_Like(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) RoomKey_Eq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) RoomKey_NotEq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) Title_In(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) Title_NotIn(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Deleter) Title_Like(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) Title_Eq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) Title_NotEq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Deleter) DraftText_In(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Deleter) DraftText_NotIn(ins []string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Deleter) DraftText_Like(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Deleter) DraftText_Eq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Deleter) DraftText_NotEq(val string) *__Chat_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Chat_Updater) ChatKey_In(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) ChatKey_NotIn(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Updater) ChatKey_Like(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) ChatKey_Eq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) ChatKey_NotEq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) RoomKey_In(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) RoomKey_NotIn(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Updater) RoomKey_Like(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) RoomKey_Eq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) RoomKey_NotEq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) Title_In(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) Title_NotIn(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Updater) Title_Like(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) Title_Eq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) Title_NotEq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Updater) DraftText_In(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Updater) DraftText_NotIn(ins []string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Updater) DraftText_Like(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Updater) DraftText_Eq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Updater) DraftText_NotEq(val string) *__Chat_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Chat_Selector) ChatKey_In(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) ChatKey_NotIn(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ChatKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Selector) ChatKey_Like(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) ChatKey_Eq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) ChatKey_NotEq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ChatKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) RoomKey_In(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) RoomKey_NotIn(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Selector) RoomKey_Like(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) RoomKey_Eq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) RoomKey_NotEq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) Title_In(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) Title_NotIn(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Title NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Selector) Title_Like(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) Title_Eq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) Title_NotEq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Title != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Chat_Selector) DraftText_In(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Chat_Selector) DraftText_NotIn(ins []string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DraftText NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Chat_Selector) DraftText_Like(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Chat_Selector) DraftText_Eq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Chat_Selector) DraftText_NotEq(val string) *__Chat_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DraftText != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Chat_Updater) ChatId(newVal int) *__Chat_Updater {
	up := updateCol{" ChatId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ChatId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) ChatId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" ChatId = ChatId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" ChatId = ChatId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" ChatId = ChatId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" ChatId = ChatId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Chat_Updater) ChatKey(newVal string) *__Chat_Updater {
	up := updateCol{"ChatKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" ChatKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Chat_Updater) RoomKey(newVal string) *__Chat_Updater {
	up := updateCol{"RoomKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" RoomKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Chat_Updater) RoomType(newVal int) *__Chat_Updater {
	up := updateCol{" RoomType = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" RoomType = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) RoomType_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" RoomType = RoomType+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" RoomType = RoomType+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" RoomType = RoomType- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" RoomType = RoomType- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) UserId(newVal int) *__Chat_Updater {
	up := updateCol{" UserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) UserId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" UserId = UserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UserId = UserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UserId = UserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UserId = UserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) PeerUserId(newVal int) *__Chat_Updater {
	up := updateCol{" PeerUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PeerUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) PeerUserId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" PeerUserId = PeerUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PeerUserId = PeerUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PeerUserId = PeerUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PeerUserId = PeerUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) GroupId(newVal int) *__Chat_Updater {
	up := updateCol{" GroupId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" GroupId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) GroupId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" GroupId = GroupId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" GroupId = GroupId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" GroupId = GroupId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" GroupId = GroupId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) HashTagId(newVal int) *__Chat_Updater {
	up := updateCol{" HashTagId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" HashTagId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) HashTagId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" HashTagId = HashTagId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" HashTagId = HashTagId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" HashTagId = HashTagId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" HashTagId = HashTagId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Chat_Updater) Title(newVal string) *__Chat_Updater {
	up := updateCol{"Title = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Title = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Chat_Updater) PinTimeMs(newVal int) *__Chat_Updater {
	up := updateCol{" PinTimeMs = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PinTimeMs = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) PinTimeMs_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" PinTimeMs = PinTimeMs+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PinTimeMs = PinTimeMs+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PinTimeMs = PinTimeMs- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PinTimeMs = PinTimeMs- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) FromMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" FromMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" FromMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) FromMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" FromMsgId = FromMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" FromMsgId = FromMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" FromMsgId = FromMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" FromMsgId = FromMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) UnseenCount(newVal int) *__Chat_Updater {
	up := updateCol{" UnseenCount = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UnseenCount = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) UnseenCount_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" UnseenCount = UnseenCount+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UnseenCount = UnseenCount+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UnseenCount = UnseenCount- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UnseenCount = UnseenCount- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) Seq(newVal int) *__Chat_Updater {
	up := updateCol{" Seq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Seq = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) Seq_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" Seq = Seq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Seq = Seq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Seq = Seq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Seq = Seq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) LastMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" LastMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" LastMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) LastMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" LastMsgId = LastMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" LastMsgId = LastMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" LastMsgId = LastMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" LastMsgId = LastMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) LastMyMsgStatus(newVal int) *__Chat_Updater {
	up := updateCol{" LastMyMsgStatus = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" LastMyMsgStatus = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) LastMyMsgStatus_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" LastMyMsgStatus = LastMyMsgStatus+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" LastMyMsgStatus = LastMyMsgStatus+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" LastMyMsgStatus = LastMyMsgStatus- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" LastMyMsgStatus = LastMyMsgStatus- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) MyLastSeenSeq(newVal int) *__Chat_Updater {
	up := updateCol{" MyLastSeenSeq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MyLastSeenSeq = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) MyLastSeenSeq_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" MyLastSeenSeq = MyLastSeenSeq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MyLastSeenSeq = MyLastSeenSeq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MyLastSeenSeq = MyLastSeenSeq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MyLastSeenSeq = MyLastSeenSeq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) MyLastSeenMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" MyLastSeenMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MyLastSeenMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) MyLastSeenMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" MyLastSeenMsgId = MyLastSeenMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MyLastSeenMsgId = MyLastSeenMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MyLastSeenMsgId = MyLastSeenMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MyLastSeenMsgId = MyLastSeenMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) PeerLastSeenMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" PeerLastSeenMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PeerLastSeenMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) PeerLastSeenMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" PeerLastSeenMsgId = PeerLastSeenMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PeerLastSeenMsgId = PeerLastSeenMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PeerLastSeenMsgId = PeerLastSeenMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PeerLastSeenMsgId = PeerLastSeenMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) MyLastDeliveredSeq(newVal int) *__Chat_Updater {
	up := updateCol{" MyLastDeliveredSeq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MyLastDeliveredSeq = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) MyLastDeliveredSeq_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" MyLastDeliveredSeq = MyLastDeliveredSeq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MyLastDeliveredSeq = MyLastDeliveredSeq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MyLastDeliveredSeq = MyLastDeliveredSeq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MyLastDeliveredSeq = MyLastDeliveredSeq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) MyLastDeliveredMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" MyLastDeliveredMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MyLastDeliveredMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) MyLastDeliveredMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" MyLastDeliveredMsgId = MyLastDeliveredMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MyLastDeliveredMsgId = MyLastDeliveredMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MyLastDeliveredMsgId = MyLastDeliveredMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MyLastDeliveredMsgId = MyLastDeliveredMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) PeerLastDeliveredMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" PeerLastDeliveredMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PeerLastDeliveredMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) PeerLastDeliveredMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" PeerLastDeliveredMsgId = PeerLastDeliveredMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PeerLastDeliveredMsgId = PeerLastDeliveredMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PeerLastDeliveredMsgId = PeerLastDeliveredMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PeerLastDeliveredMsgId = PeerLastDeliveredMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) IsActive(newVal int) *__Chat_Updater {
	up := updateCol{" IsActive = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsActive = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) IsActive_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" IsActive = IsActive+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsActive = IsActive+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsActive = IsActive- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsActive = IsActive- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) IsLeft(newVal int) *__Chat_Updater {
	up := updateCol{" IsLeft = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsLeft = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) IsLeft_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" IsLeft = IsLeft+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsLeft = IsLeft+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsLeft = IsLeft- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsLeft = IsLeft- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) IsCreator(newVal int) *__Chat_Updater {
	up := updateCol{" IsCreator = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsCreator = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) IsCreator_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" IsCreator = IsCreator+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsCreator = IsCreator+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsCreator = IsCreator- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsCreator = IsCreator- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) IsKicked(newVal int) *__Chat_Updater {
	up := updateCol{" IsKicked = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsKicked = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) IsKicked_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" IsKicked = IsKicked+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsKicked = IsKicked+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsKicked = IsKicked- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsKicked = IsKicked- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) IsAdmin(newVal int) *__Chat_Updater {
	up := updateCol{" IsAdmin = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsAdmin = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) IsAdmin_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" IsAdmin = IsAdmin+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsAdmin = IsAdmin+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsAdmin = IsAdmin- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsAdmin = IsAdmin- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) IsDeactivated(newVal int) *__Chat_Updater {
	up := updateCol{" IsDeactivated = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsDeactivated = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) IsDeactivated_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" IsDeactivated = IsDeactivated+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsDeactivated = IsDeactivated+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsDeactivated = IsDeactivated- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsDeactivated = IsDeactivated- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) IsMuted(newVal int) *__Chat_Updater {
	up := updateCol{" IsMuted = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsMuted = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) IsMuted_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" IsMuted = IsMuted+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsMuted = IsMuted+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsMuted = IsMuted- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsMuted = IsMuted- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) MuteUntil(newVal int) *__Chat_Updater {
	up := updateCol{" MuteUntil = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MuteUntil = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) MuteUntil_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" MuteUntil = MuteUntil+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MuteUntil = MuteUntil+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MuteUntil = MuteUntil- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MuteUntil = MuteUntil- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) VersionTimeMs(newVal int) *__Chat_Updater {
	up := updateCol{" VersionTimeMs = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" VersionTimeMs = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) VersionTimeMs_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" VersionTimeMs = VersionTimeMs+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" VersionTimeMs = VersionTimeMs+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" VersionTimeMs = VersionTimeMs- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" VersionTimeMs = VersionTimeMs- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) VersionSeq(newVal int) *__Chat_Updater {
	up := updateCol{" VersionSeq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" VersionSeq = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) VersionSeq_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" VersionSeq = VersionSeq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" VersionSeq = VersionSeq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" VersionSeq = VersionSeq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" VersionSeq = VersionSeq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) OrderTime(newVal int) *__Chat_Updater {
	up := updateCol{" OrderTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" OrderTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) OrderTime_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" OrderTime = OrderTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" OrderTime = OrderTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" OrderTime = OrderTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" OrderTime = OrderTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Chat_Updater) CreatedTime(newVal int) *__Chat_Updater {
	up := updateCol{" CreatedTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatedTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) CreatedTime_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" CreatedTime = CreatedTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatedTime = CreatedTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatedTime = CreatedTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatedTime = CreatedTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Chat_Updater) DraftText(newVal string) *__Chat_Updater {
	up := updateCol{"DraftText = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DraftText = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Chat_Updater) DratReplyToMsgId(newVal int) *__Chat_Updater {
	up := updateCol{" DratReplyToMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" DratReplyToMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Chat_Updater) DratReplyToMsgId_Increment(count int) *__Chat_Updater {
	if count > 0 {
		up := updateCol{" DratReplyToMsgId = DratReplyToMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" DratReplyToMsgId = DratReplyToMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" DratReplyToMsgId = DratReplyToMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" DratReplyToMsgId = DratReplyToMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Chat_Selector) OrderBy_ChatId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_ChatId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatId ASC "
	return u
}

func (u *__Chat_Selector) Select_ChatId() *__Chat_Selector {
	u.selectCol = "ChatId"
	return u
}

func (u *__Chat_Selector) OrderBy_ChatKey_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatKey DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_ChatKey_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY ChatKey ASC "
	return u
}

func (u *__Chat_Selector) Select_ChatKey() *__Chat_Selector {
	u.selectCol = "ChatKey"
	return u
}

func (u *__Chat_Selector) OrderBy_RoomKey_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_RoomKey_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__Chat_Selector) Select_RoomKey() *__Chat_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__Chat_Selector) OrderBy_RoomType_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomType DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_RoomType_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY RoomType ASC "
	return u
}

func (u *__Chat_Selector) Select_RoomType() *__Chat_Selector {
	u.selectCol = "RoomType"
	return u
}

func (u *__Chat_Selector) OrderBy_UserId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_UserId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Chat_Selector) Select_UserId() *__Chat_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Chat_Selector) OrderBy_PeerUserId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_PeerUserId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__Chat_Selector) Select_PeerUserId() *__Chat_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__Chat_Selector) OrderBy_GroupId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY GroupId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_GroupId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY GroupId ASC "
	return u
}

func (u *__Chat_Selector) Select_GroupId() *__Chat_Selector {
	u.selectCol = "GroupId"
	return u
}

func (u *__Chat_Selector) OrderBy_HashTagId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY HashTagId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_HashTagId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY HashTagId ASC "
	return u
}

func (u *__Chat_Selector) Select_HashTagId() *__Chat_Selector {
	u.selectCol = "HashTagId"
	return u
}

func (u *__Chat_Selector) OrderBy_Title_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY Title DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_Title_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY Title ASC "
	return u
}

func (u *__Chat_Selector) Select_Title() *__Chat_Selector {
	u.selectCol = "Title"
	return u
}

func (u *__Chat_Selector) OrderBy_PinTimeMs_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY PinTimeMs DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_PinTimeMs_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY PinTimeMs ASC "
	return u
}

func (u *__Chat_Selector) Select_PinTimeMs() *__Chat_Selector {
	u.selectCol = "PinTimeMs"
	return u
}

func (u *__Chat_Selector) OrderBy_FromMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY FromMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_FromMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY FromMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_FromMsgId() *__Chat_Selector {
	u.selectCol = "FromMsgId"
	return u
}

func (u *__Chat_Selector) OrderBy_UnseenCount_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY UnseenCount DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_UnseenCount_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY UnseenCount ASC "
	return u
}

func (u *__Chat_Selector) Select_UnseenCount() *__Chat_Selector {
	u.selectCol = "UnseenCount"
	return u
}

func (u *__Chat_Selector) OrderBy_Seq_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY Seq DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_Seq_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY Seq ASC "
	return u
}

func (u *__Chat_Selector) Select_Seq() *__Chat_Selector {
	u.selectCol = "Seq"
	return u
}

func (u *__Chat_Selector) OrderBy_LastMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_LastMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_LastMsgId() *__Chat_Selector {
	u.selectCol = "LastMsgId"
	return u
}

func (u *__Chat_Selector) OrderBy_LastMyMsgStatus_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMyMsgStatus DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_LastMyMsgStatus_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY LastMyMsgStatus ASC "
	return u
}

func (u *__Chat_Selector) Select_LastMyMsgStatus() *__Chat_Selector {
	u.selectCol = "LastMyMsgStatus"
	return u
}

func (u *__Chat_Selector) OrderBy_MyLastSeenSeq_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY MyLastSeenSeq DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_MyLastSeenSeq_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY MyLastSeenSeq ASC "
	return u
}

func (u *__Chat_Selector) Select_MyLastSeenSeq() *__Chat_Selector {
	u.selectCol = "MyLastSeenSeq"
	return u
}

func (u *__Chat_Selector) OrderBy_MyLastSeenMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY MyLastSeenMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_MyLastSeenMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY MyLastSeenMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_MyLastSeenMsgId() *__Chat_Selector {
	u.selectCol = "MyLastSeenMsgId"
	return u
}

func (u *__Chat_Selector) OrderBy_PeerLastSeenMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerLastSeenMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_PeerLastSeenMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerLastSeenMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_PeerLastSeenMsgId() *__Chat_Selector {
	u.selectCol = "PeerLastSeenMsgId"
	return u
}

func (u *__Chat_Selector) OrderBy_MyLastDeliveredSeq_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY MyLastDeliveredSeq DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_MyLastDeliveredSeq_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY MyLastDeliveredSeq ASC "
	return u
}

func (u *__Chat_Selector) Select_MyLastDeliveredSeq() *__Chat_Selector {
	u.selectCol = "MyLastDeliveredSeq"
	return u
}

func (u *__Chat_Selector) OrderBy_MyLastDeliveredMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY MyLastDeliveredMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_MyLastDeliveredMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY MyLastDeliveredMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_MyLastDeliveredMsgId() *__Chat_Selector {
	u.selectCol = "MyLastDeliveredMsgId"
	return u
}

func (u *__Chat_Selector) OrderBy_PeerLastDeliveredMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerLastDeliveredMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_PeerLastDeliveredMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY PeerLastDeliveredMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_PeerLastDeliveredMsgId() *__Chat_Selector {
	u.selectCol = "PeerLastDeliveredMsgId"
	return u
}

func (u *__Chat_Selector) OrderBy_IsActive_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsActive DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_IsActive_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsActive ASC "
	return u
}

func (u *__Chat_Selector) Select_IsActive() *__Chat_Selector {
	u.selectCol = "IsActive"
	return u
}

func (u *__Chat_Selector) OrderBy_IsLeft_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsLeft DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_IsLeft_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsLeft ASC "
	return u
}

func (u *__Chat_Selector) Select_IsLeft() *__Chat_Selector {
	u.selectCol = "IsLeft"
	return u
}

func (u *__Chat_Selector) OrderBy_IsCreator_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsCreator DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_IsCreator_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsCreator ASC "
	return u
}

func (u *__Chat_Selector) Select_IsCreator() *__Chat_Selector {
	u.selectCol = "IsCreator"
	return u
}

func (u *__Chat_Selector) OrderBy_IsKicked_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsKicked DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_IsKicked_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsKicked ASC "
	return u
}

func (u *__Chat_Selector) Select_IsKicked() *__Chat_Selector {
	u.selectCol = "IsKicked"
	return u
}

func (u *__Chat_Selector) OrderBy_IsAdmin_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsAdmin DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_IsAdmin_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsAdmin ASC "
	return u
}

func (u *__Chat_Selector) Select_IsAdmin() *__Chat_Selector {
	u.selectCol = "IsAdmin"
	return u
}

func (u *__Chat_Selector) OrderBy_IsDeactivated_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsDeactivated DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_IsDeactivated_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsDeactivated ASC "
	return u
}

func (u *__Chat_Selector) Select_IsDeactivated() *__Chat_Selector {
	u.selectCol = "IsDeactivated"
	return u
}

func (u *__Chat_Selector) OrderBy_IsMuted_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsMuted DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_IsMuted_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY IsMuted ASC "
	return u
}

func (u *__Chat_Selector) Select_IsMuted() *__Chat_Selector {
	u.selectCol = "IsMuted"
	return u
}

func (u *__Chat_Selector) OrderBy_MuteUntil_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY MuteUntil DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_MuteUntil_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY MuteUntil ASC "
	return u
}

func (u *__Chat_Selector) Select_MuteUntil() *__Chat_Selector {
	u.selectCol = "MuteUntil"
	return u
}

func (u *__Chat_Selector) OrderBy_VersionTimeMs_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY VersionTimeMs DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_VersionTimeMs_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY VersionTimeMs ASC "
	return u
}

func (u *__Chat_Selector) Select_VersionTimeMs() *__Chat_Selector {
	u.selectCol = "VersionTimeMs"
	return u
}

func (u *__Chat_Selector) OrderBy_VersionSeq_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY VersionSeq DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_VersionSeq_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY VersionSeq ASC "
	return u
}

func (u *__Chat_Selector) Select_VersionSeq() *__Chat_Selector {
	u.selectCol = "VersionSeq"
	return u
}

func (u *__Chat_Selector) OrderBy_OrderTime_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY OrderTime DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_OrderTime_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY OrderTime ASC "
	return u
}

func (u *__Chat_Selector) Select_OrderTime() *__Chat_Selector {
	u.selectCol = "OrderTime"
	return u
}

func (u *__Chat_Selector) OrderBy_CreatedTime_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_CreatedTime_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Chat_Selector) Select_CreatedTime() *__Chat_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Chat_Selector) OrderBy_DraftText_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY DraftText DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_DraftText_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY DraftText ASC "
	return u
}

func (u *__Chat_Selector) Select_DraftText() *__Chat_Selector {
	u.selectCol = "DraftText"
	return u
}

func (u *__Chat_Selector) OrderBy_DratReplyToMsgId_Desc() *__Chat_Selector {
	u.orderBy = " ORDER BY DratReplyToMsgId DESC "
	return u
}

func (u *__Chat_Selector) OrderBy_DratReplyToMsgId_Asc() *__Chat_Selector {
	u.orderBy = " ORDER BY DratReplyToMsgId ASC "
	return u
}

func (u *__Chat_Selector) Select_DratReplyToMsgId() *__Chat_Selector {
	u.selectCol = "DratReplyToMsgId"
	return u
}

func (u *__Chat_Selector) Limit(num int) *__Chat_Selector {
	u.limit = num
	return u
}

func (u *__Chat_Selector) Offset(num int) *__Chat_Selector {
	u.offset = num
	return u
}

func (u *__Chat_Selector) Order_Rand() *__Chat_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Chat_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_chat.chat"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Chat_Selector) GetRow(db *sqlx.DB) (*Chat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}

	row := &Chat{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnChat_LoadOne(row)

	return row, nil
}

func (u *__Chat_Selector) GetRows(db *sqlx.DB) ([]*Chat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*Chat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnChat_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Chat_Selector) GetRows2(db *sqlx.DB) ([]Chat, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*Chat
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnChat_LoadMany(rows)

	rows2 := make([]Chat, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Chat_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__Chat_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Chat_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Chat_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Chat_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_chat.chat SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__Chat_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_chat.chat WHERE " + wheresStr

	// run query
	if LogTableSqlReq.Chat {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Chat ////////////////

func MassInsert_Chat(rows []Chat, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(35, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun_chat.chat (" +
		"ChatId, ChatKey, RoomKey, RoomType, UserId, PeerUserId, GroupId, HashTagId, Title, PinTimeMs, FromMsgId, UnseenCount, Seq, LastMsgId, LastMyMsgStatus, MyLastSeenSeq, MyLastSeenMsgId, PeerLastSeenMsgId, MyLastDeliveredSeq, MyLastDeliveredMsgId, PeerLastDeliveredMsgId, IsActive, IsLeft, IsCreator, IsKicked, IsAdmin, IsDeactivated, IsMuted, MuteUntil, VersionTimeMs, VersionSeq, OrderTime, CreatedTime, DraftText, DratReplyToMsgId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ChatId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.RoomType)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.HashTagId)
		vals = append(vals, row.Title)
		vals = append(vals, row.PinTimeMs)
		vals = append(vals, row.FromMsgId)
		vals = append(vals, row.UnseenCount)
		vals = append(vals, row.Seq)
		vals = append(vals, row.LastMsgId)
		vals = append(vals, row.LastMyMsgStatus)
		vals = append(vals, row.MyLastSeenSeq)
		vals = append(vals, row.MyLastSeenMsgId)
		vals = append(vals, row.PeerLastSeenMsgId)
		vals = append(vals, row.MyLastDeliveredSeq)
		vals = append(vals, row.MyLastDeliveredMsgId)
		vals = append(vals, row.PeerLastDeliveredMsgId)
		vals = append(vals, row.IsActive)
		vals = append(vals, row.IsLeft)
		vals = append(vals, row.IsCreator)
		vals = append(vals, row.IsKicked)
		vals = append(vals, row.IsAdmin)
		vals = append(vals, row.IsDeactivated)
		vals = append(vals, row.IsMuted)
		vals = append(vals, row.MuteUntil)
		vals = append(vals, row.VersionTimeMs)
		vals = append(vals, row.VersionSeq)
		vals = append(vals, row.OrderTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.DraftText)
		vals = append(vals, row.DratReplyToMsgId)

	}

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_Chat(rows []Chat, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(35, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun_chat.chat (" +
		"ChatId, ChatKey, RoomKey, RoomType, UserId, PeerUserId, GroupId, HashTagId, Title, PinTimeMs, FromMsgId, UnseenCount, Seq, LastMsgId, LastMyMsgStatus, MyLastSeenSeq, MyLastSeenMsgId, PeerLastSeenMsgId, MyLastDeliveredSeq, MyLastDeliveredMsgId, PeerLastDeliveredMsgId, IsActive, IsLeft, IsCreator, IsKicked, IsAdmin, IsDeactivated, IsMuted, MuteUntil, VersionTimeMs, VersionSeq, OrderTime, CreatedTime, DraftText, DratReplyToMsgId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ChatId)
		vals = append(vals, row.ChatKey)
		vals = append(vals, row.RoomKey)
		vals = append(vals, row.RoomType)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.HashTagId)
		vals = append(vals, row.Title)
		vals = append(vals, row.PinTimeMs)
		vals = append(vals, row.FromMsgId)
		vals = append(vals, row.UnseenCount)
		vals = append(vals, row.Seq)
		vals = append(vals, row.LastMsgId)
		vals = append(vals, row.LastMyMsgStatus)
		vals = append(vals, row.MyLastSeenSeq)
		vals = append(vals, row.MyLastSeenMsgId)
		vals = append(vals, row.PeerLastSeenMsgId)
		vals = append(vals, row.MyLastDeliveredSeq)
		vals = append(vals, row.MyLastDeliveredMsgId)
		vals = append(vals, row.PeerLastDeliveredMsgId)
		vals = append(vals, row.IsActive)
		vals = append(vals, row.IsLeft)
		vals = append(vals, row.IsCreator)
		vals = append(vals, row.IsKicked)
		vals = append(vals, row.IsAdmin)
		vals = append(vals, row.IsDeactivated)
		vals = append(vals, row.IsMuted)
		vals = append(vals, row.MuteUntil)
		vals = append(vals, row.VersionTimeMs)
		vals = append(vals, row.VersionSeq)
		vals = append(vals, row.OrderTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.DraftText)
		vals = append(vals, row.DratReplyToMsgId)

	}

	if LogTableSqlReq.Chat {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Chat {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
