package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Blocked represents a row from 'sun.blocked'.

// Manualy copy this to project
type Blocked__ struct {
	Id            int `json:"Id"`            // Id -
	UserId        int `json:"UserId"`        // UserId -
	BlockedUserId int `json:"BlockedUserId"` // BlockedUserId -
	CreatedTime   int `json:"CreatedTime"`   // CreatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Blocked exists in the database.
func (b *Blocked) Exists() bool {
	return b._exists
}

// Deleted provides information if the Blocked has been deleted from the database.
func (b *Blocked) Deleted() bool {
	return b._deleted
}

// Insert inserts the Blocked to the database.
func (b *Blocked) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO sun.blocked (` +
		`UserId, BlockedUserId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, b.UserId, b.BlockedUserId, b.CreatedTime)
	}
	res, err := db.Exec(sqlstr, b.UserId, b.BlockedUserId, b.CreatedTime)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	b.Id = int(id)
	b._exists = true

	OnBlocked_AfterInsert(b)

	return nil
}

// Insert inserts the Blocked to the database.
func (b *Blocked) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.blocked (` +
		`UserId, BlockedUserId, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, b.UserId, b.BlockedUserId, b.CreatedTime)
	}
	res, err := db.Exec(sqlstr, b.UserId, b.BlockedUserId, b.CreatedTime)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	b.Id = int(id)
	b._exists = true

	OnBlocked_AfterInsert(b)

	return nil
}

// Update updates the Blocked in the database.
func (b *Blocked) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.blocked SET ` +
		`UserId = ?, BlockedUserId = ?, CreatedTime = ?` +
		` WHERE Id = ?`

	// run query
	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, b.UserId, b.BlockedUserId, b.CreatedTime, b.Id)
	}
	_, err = db.Exec(sqlstr, b.UserId, b.BlockedUserId, b.CreatedTime, b.Id)

	if LogTableSqlReq.Blocked {
		XOLogErr(err)
	}
	OnBlocked_AfterUpdate(b)

	return err
}

// Save saves the Blocked to the database.
func (b *Blocked) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Replace(db)
}

// Delete deletes the Blocked from the database.
func (b *Blocked) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.blocked WHERE Id = ?`

	// run query
	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, b.Id)
	}
	_, err = db.Exec(sqlstr, b.Id)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	b._deleted = true

	OnBlocked_AfterDelete(b)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Blocked_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Blocked_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Blocked_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewBlocked_Deleter() *__Blocked_Deleter {
	d := __Blocked_Deleter{whereSep: " AND "}
	return &d
}

func NewBlocked_Updater() *__Blocked_Updater {
	u := __Blocked_Updater{whereSep: " AND "}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewBlocked_Selector() *__Blocked_Selector {
	u := __Blocked_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__Blocked_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__Blocked_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__Blocked_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Blocked_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Blocked_Deleter) Or() *__Blocked_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Blocked_Deleter) Id_In(ins []int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Deleter) Id_Ins(ins ...int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Deleter) Id_NotIn(ins []int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Deleter) Id_Eq(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) Id_NotEq(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) Id_LT(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) Id_LE(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) Id_GT(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) Id_GE(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Blocked_Deleter) UserId_In(ins []int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Deleter) UserId_Ins(ins ...int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Deleter) UserId_NotIn(ins []int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Deleter) UserId_Eq(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) UserId_NotEq(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) UserId_LT(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) UserId_LE(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) UserId_GT(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) UserId_GE(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Blocked_Deleter) BlockedUserId_In(ins []int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BlockedUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Deleter) BlockedUserId_Ins(ins ...int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BlockedUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Deleter) BlockedUserId_NotIn(ins []int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BlockedUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Deleter) BlockedUserId_Eq(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) BlockedUserId_NotEq(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) BlockedUserId_LT(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) BlockedUserId_LE(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) BlockedUserId_GT(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) BlockedUserId_GE(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Blocked_Deleter) CreatedTime_In(ins []int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Deleter) CreatedTime_Ins(ins ...int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Deleter) CreatedTime_NotIn(ins []int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Deleter) CreatedTime_Eq(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) CreatedTime_NotEq(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) CreatedTime_LT(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) CreatedTime_LE(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) CreatedTime_GT(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Deleter) CreatedTime_GE(val int) *__Blocked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Blocked_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Blocked_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Blocked_Updater) Or() *__Blocked_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Blocked_Updater) Id_In(ins []int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Updater) Id_Ins(ins ...int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Updater) Id_NotIn(ins []int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Updater) Id_Eq(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) Id_NotEq(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) Id_LT(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) Id_LE(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) Id_GT(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) Id_GE(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Blocked_Updater) UserId_In(ins []int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Updater) UserId_Ins(ins ...int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Updater) UserId_NotIn(ins []int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Updater) UserId_Eq(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) UserId_NotEq(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) UserId_LT(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) UserId_LE(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) UserId_GT(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) UserId_GE(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Blocked_Updater) BlockedUserId_In(ins []int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BlockedUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Updater) BlockedUserId_Ins(ins ...int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BlockedUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Updater) BlockedUserId_NotIn(ins []int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BlockedUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Updater) BlockedUserId_Eq(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) BlockedUserId_NotEq(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) BlockedUserId_LT(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) BlockedUserId_LE(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) BlockedUserId_GT(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) BlockedUserId_GE(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Blocked_Updater) CreatedTime_In(ins []int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Updater) CreatedTime_Ins(ins ...int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Updater) CreatedTime_NotIn(ins []int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Updater) CreatedTime_Eq(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) CreatedTime_NotEq(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) CreatedTime_LT(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) CreatedTime_LE(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) CreatedTime_GT(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Updater) CreatedTime_GE(val int) *__Blocked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Blocked_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Blocked_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Blocked_Selector) Or() *__Blocked_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Blocked_Selector) Id_In(ins []int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Selector) Id_Ins(ins ...int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Selector) Id_NotIn(ins []int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Selector) Id_Eq(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) Id_NotEq(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) Id_LT(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) Id_LE(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) Id_GT(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) Id_GE(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Blocked_Selector) UserId_In(ins []int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Selector) UserId_Ins(ins ...int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Selector) UserId_NotIn(ins []int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Selector) UserId_Eq(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) UserId_NotEq(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) UserId_LT(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) UserId_LE(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) UserId_GT(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) UserId_GE(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Blocked_Selector) BlockedUserId_In(ins []int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BlockedUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Selector) BlockedUserId_Ins(ins ...int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BlockedUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Selector) BlockedUserId_NotIn(ins []int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " BlockedUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Selector) BlockedUserId_Eq(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) BlockedUserId_NotEq(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) BlockedUserId_LT(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) BlockedUserId_LE(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) BlockedUserId_GT(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) BlockedUserId_GE(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " BlockedUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Blocked_Selector) CreatedTime_In(ins []int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Selector) CreatedTime_Ins(ins ...int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Blocked_Selector) CreatedTime_NotIn(ins []int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Blocked_Selector) CreatedTime_Eq(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) CreatedTime_NotEq(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) CreatedTime_LT(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) CreatedTime_LE(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) CreatedTime_GT(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Blocked_Selector) CreatedTime_GE(val int) *__Blocked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Blocked_Updater) Id(newVal int) *__Blocked_Updater {
	up := updateCol{" Id = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Id = " + u.nextDollar()] = newVal
	return u
}

func (u *__Blocked_Updater) Id_Increment(count int) *__Blocked_Updater {
	if count > 0 {
		up := updateCol{" Id = Id+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Id = Id+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Id = Id- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Id = Id- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Blocked_Updater) UserId(newVal int) *__Blocked_Updater {
	up := updateCol{" UserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Blocked_Updater) UserId_Increment(count int) *__Blocked_Updater {
	if count > 0 {
		up := updateCol{" UserId = UserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UserId = UserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UserId = UserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UserId = UserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Blocked_Updater) BlockedUserId(newVal int) *__Blocked_Updater {
	up := updateCol{" BlockedUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" BlockedUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Blocked_Updater) BlockedUserId_Increment(count int) *__Blocked_Updater {
	if count > 0 {
		up := updateCol{" BlockedUserId = BlockedUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" BlockedUserId = BlockedUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" BlockedUserId = BlockedUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" BlockedUserId = BlockedUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Blocked_Updater) CreatedTime(newVal int) *__Blocked_Updater {
	up := updateCol{" CreatedTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatedTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Blocked_Updater) CreatedTime_Increment(count int) *__Blocked_Updater {
	if count > 0 {
		up := updateCol{" CreatedTime = CreatedTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatedTime = CreatedTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatedTime = CreatedTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatedTime = CreatedTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Blocked_Selector) OrderBy_Id_Desc() *__Blocked_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Blocked_Selector) OrderBy_Id_Asc() *__Blocked_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Blocked_Selector) Select_Id() *__Blocked_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Blocked_Selector) OrderBy_UserId_Desc() *__Blocked_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Blocked_Selector) OrderBy_UserId_Asc() *__Blocked_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Blocked_Selector) Select_UserId() *__Blocked_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Blocked_Selector) OrderBy_BlockedUserId_Desc() *__Blocked_Selector {
	u.orderBy = " ORDER BY BlockedUserId DESC "
	return u
}

func (u *__Blocked_Selector) OrderBy_BlockedUserId_Asc() *__Blocked_Selector {
	u.orderBy = " ORDER BY BlockedUserId ASC "
	return u
}

func (u *__Blocked_Selector) Select_BlockedUserId() *__Blocked_Selector {
	u.selectCol = "BlockedUserId"
	return u
}

func (u *__Blocked_Selector) OrderBy_CreatedTime_Desc() *__Blocked_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Blocked_Selector) OrderBy_CreatedTime_Asc() *__Blocked_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Blocked_Selector) Select_CreatedTime() *__Blocked_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Blocked_Selector) Limit(num int) *__Blocked_Selector {
	u.limit = num
	return u
}

func (u *__Blocked_Selector) Offset(num int) *__Blocked_Selector {
	u.offset = num
	return u
}

func (u *__Blocked_Selector) Order_Rand() *__Blocked_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Blocked_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.blocked"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Blocked_Selector) GetRow(db *sqlx.DB) (*Blocked, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, whereArgs)
	}

	row := &Blocked{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnBlocked_LoadOne(row)

	return row, nil
}

func (u *__Blocked_Selector) GetRows(db *sqlx.DB) ([]*Blocked, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*Blocked
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnBlocked_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Blocked_Selector) GetRows2(db *sqlx.DB) ([]Blocked, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*Blocked
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnBlocked_LoadMany(rows)

	rows2 := make([]Blocked, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Blocked_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__Blocked_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Blocked_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Blocked_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Blocked_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.blocked SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__Blocked_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.blocked WHERE " + wheresStr

	// run query
	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Blocked ////////////////

func MassInsert_Blocked(rows []Blocked, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	s := "(?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun.blocked (" +
		"UserId, BlockedUserId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.BlockedUserId)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_Blocked(rows []Blocked, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun.blocked (" +
		"UserId, BlockedUserId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.BlockedUserId)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.Blocked {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Blocked {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//
