package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun_old/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Notify represents a row from 'sun.notify'.

// Manualy copy this to project
type Notify__ struct {
	NotifyId       int `json:"NotifyId"`       // NotifyId -
	ForUserId      int `json:"ForUserId"`      // ForUserId -
	ActorUserId    int `json:"ActorUserId"`    // ActorUserId -
	NotifyTypeEnum int `json:"NotifyTypeEnum"` // NotifyTypeEnum -
	PostId         int `json:"PostId"`         // PostId -
	CommentId      int `json:"CommentId"`      // CommentId -
	PeerUserId     int `json:"PeerUserId"`     // PeerUserId -
	Murmur64Hash   int `json:"Murmur64Hash"`   // Murmur64Hash -
	SeenStatus     int `json:"SeenStatus"`     // SeenStatus -
	CreatedTime    int `json:"CreatedTime"`    // CreatedTime -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Notify exists in the database.
func (n *Notify) Exists() bool {
	return n._exists
}

// Deleted provides information if the Notify has been deleted from the database.
func (n *Notify) Deleted() bool {
	return n._deleted
}

// Insert inserts the Notify to the database.
func (n *Notify) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.notify (` +
		`NotifyId, ForUserId, ActorUserId, NotifyTypeEnum, PostId, CommentId, PeerUserId, Murmur64Hash, SeenStatus, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Notify {
		XOLog(sqlstr, n.NotifyId, n.ForUserId, n.ActorUserId, n.NotifyTypeEnum, n.PostId, n.CommentId, n.PeerUserId, n.Murmur64Hash, n.SeenStatus, n.CreatedTime)
	}
	_, err = db.Exec(sqlstr, n.NotifyId, n.ForUserId, n.ActorUserId, n.NotifyTypeEnum, n.PostId, n.CommentId, n.PeerUserId, n.Murmur64Hash, n.SeenStatus, n.CreatedTime)
	if err != nil {
		return err
	}

	// set existence
	n._exists = true

	OnNotify_AfterInsert(n)

	return nil
}

// Insert inserts the Notify to the database.
func (n *Notify) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.notify (` +
		`NotifyId, ForUserId, ActorUserId, NotifyTypeEnum, PostId, CommentId, PeerUserId, Murmur64Hash, SeenStatus, CreatedTime` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Notify {
		XOLog(sqlstr, n.NotifyId, n.ForUserId, n.ActorUserId, n.NotifyTypeEnum, n.PostId, n.CommentId, n.PeerUserId, n.Murmur64Hash, n.SeenStatus, n.CreatedTime)
	}
	_, err = db.Exec(sqlstr, n.NotifyId, n.ForUserId, n.ActorUserId, n.NotifyTypeEnum, n.PostId, n.CommentId, n.PeerUserId, n.Murmur64Hash, n.SeenStatus, n.CreatedTime)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return err
	}

	n._exists = true

	OnNotify_AfterInsert(n)

	return nil
}

// Update updates the Notify in the database.
func (n *Notify) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if n._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.notify SET ` +
		`ForUserId = ?, ActorUserId = ?, NotifyTypeEnum = ?, PostId = ?, CommentId = ?, PeerUserId = ?, Murmur64Hash = ?, SeenStatus = ?, CreatedTime = ?` +
		` WHERE NotifyId = ?`

	// run query
	if LogTableSqlReq.Notify {
		XOLog(sqlstr, n.ForUserId, n.ActorUserId, n.NotifyTypeEnum, n.PostId, n.CommentId, n.PeerUserId, n.Murmur64Hash, n.SeenStatus, n.CreatedTime, n.NotifyId)
	}
	_, err = db.Exec(sqlstr, n.ForUserId, n.ActorUserId, n.NotifyTypeEnum, n.PostId, n.CommentId, n.PeerUserId, n.Murmur64Hash, n.SeenStatus, n.CreatedTime, n.NotifyId)

	if LogTableSqlReq.Notify {
		XOLogErr(err)
	}
	OnNotify_AfterUpdate(n)

	return err
}

// Save saves the Notify to the database.
func (n *Notify) Save(db XODB) error {
	if n.Exists() {
		return n.Update(db)
	}

	return n.Replace(db)
}

// Delete deletes the Notify from the database.
func (n *Notify) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return nil
	}

	// if deleted, bail
	if n._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.notify WHERE NotifyId = ?`

	// run query
	if LogTableSqlReq.Notify {
		XOLog(sqlstr, n.NotifyId)
	}
	_, err = db.Exec(sqlstr, n.NotifyId)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	n._deleted = true

	OnNotify_AfterDelete(n)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Notify_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Notify_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Notify_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewNotify_Deleter() *__Notify_Deleter {
	d := __Notify_Deleter{whereSep: " AND "}
	return &d
}

func NewNotify_Updater() *__Notify_Updater {
	u := __Notify_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewNotify_Selector() *__Notify_Selector {
	u := __Notify_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Notify_Deleter) Or() *__Notify_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Notify_Deleter) NotifyId_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) NotifyId_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) NotifyId_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) NotifyId_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyId_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyId_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyId_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyId_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyId_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Deleter) ForUserId_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) ForUserId_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) ForUserId_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) ForUserId_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ForUserId_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ForUserId_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ForUserId_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ForUserId_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ForUserId_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Deleter) ActorUserId_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) ActorUserId_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) ActorUserId_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) ActorUserId_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ActorUserId_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ActorUserId_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ActorUserId_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ActorUserId_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) ActorUserId_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Deleter) NotifyTypeEnum_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) NotifyTypeEnum_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) NotifyTypeEnum_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) NotifyTypeEnum_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyTypeEnum_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyTypeEnum_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyTypeEnum_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyTypeEnum_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) NotifyTypeEnum_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Deleter) PostId_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) PostId_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) PostId_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) PostId_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PostId_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PostId_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PostId_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PostId_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PostId_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Deleter) CommentId_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) CommentId_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) CommentId_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) CommentId_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CommentId_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CommentId_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CommentId_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CommentId_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CommentId_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Deleter) PeerUserId_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) PeerUserId_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) PeerUserId_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) PeerUserId_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PeerUserId_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PeerUserId_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PeerUserId_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PeerUserId_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) PeerUserId_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Deleter) Murmur64Hash_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) Murmur64Hash_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) Murmur64Hash_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) Murmur64Hash_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) Murmur64Hash_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) Murmur64Hash_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) Murmur64Hash_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) Murmur64Hash_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) Murmur64Hash_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Deleter) SeenStatus_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) SeenStatus_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) SeenStatus_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) SeenStatus_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) SeenStatus_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) SeenStatus_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) SeenStatus_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) SeenStatus_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) SeenStatus_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Deleter) CreatedTime_In(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) CreatedTime_Ins(ins ...int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Deleter) CreatedTime_NotIn(ins []int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Deleter) CreatedTime_Eq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CreatedTime_NotEq(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CreatedTime_LT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CreatedTime_LE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CreatedTime_GT(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Deleter) CreatedTime_GE(val int) *__Notify_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Notify_Updater) Or() *__Notify_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Notify_Updater) NotifyId_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) NotifyId_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) NotifyId_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) NotifyId_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyId_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyId_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyId_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyId_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyId_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Updater) ForUserId_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) ForUserId_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) ForUserId_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) ForUserId_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ForUserId_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ForUserId_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ForUserId_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ForUserId_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ForUserId_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Updater) ActorUserId_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) ActorUserId_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) ActorUserId_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) ActorUserId_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ActorUserId_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ActorUserId_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ActorUserId_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ActorUserId_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) ActorUserId_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Updater) NotifyTypeEnum_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) NotifyTypeEnum_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) NotifyTypeEnum_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) NotifyTypeEnum_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyTypeEnum_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyTypeEnum_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyTypeEnum_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyTypeEnum_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) NotifyTypeEnum_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Updater) PostId_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) PostId_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) PostId_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) PostId_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PostId_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PostId_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PostId_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PostId_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PostId_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Updater) CommentId_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) CommentId_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) CommentId_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) CommentId_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CommentId_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CommentId_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CommentId_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CommentId_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CommentId_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Updater) PeerUserId_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) PeerUserId_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) PeerUserId_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) PeerUserId_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PeerUserId_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PeerUserId_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PeerUserId_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PeerUserId_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) PeerUserId_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Updater) Murmur64Hash_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) Murmur64Hash_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) Murmur64Hash_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) Murmur64Hash_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) Murmur64Hash_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) Murmur64Hash_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) Murmur64Hash_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) Murmur64Hash_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) Murmur64Hash_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Updater) SeenStatus_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) SeenStatus_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) SeenStatus_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) SeenStatus_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) SeenStatus_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) SeenStatus_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) SeenStatus_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) SeenStatus_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) SeenStatus_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Updater) CreatedTime_In(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) CreatedTime_Ins(ins ...int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Updater) CreatedTime_NotIn(ins []int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Updater) CreatedTime_Eq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CreatedTime_NotEq(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CreatedTime_LT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CreatedTime_LE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CreatedTime_GT(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Updater) CreatedTime_GE(val int) *__Notify_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Notify_Selector) Or() *__Notify_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Notify_Selector) NotifyId_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) NotifyId_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) NotifyId_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) NotifyId_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyId_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyId_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyId_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyId_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyId_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Selector) ForUserId_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) ForUserId_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) ForUserId_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) ForUserId_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ForUserId_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ForUserId_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ForUserId_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ForUserId_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ForUserId_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Selector) ActorUserId_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) ActorUserId_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) ActorUserId_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) ActorUserId_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ActorUserId_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ActorUserId_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ActorUserId_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ActorUserId_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) ActorUserId_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Selector) NotifyTypeEnum_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) NotifyTypeEnum_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) NotifyTypeEnum_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotifyTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) NotifyTypeEnum_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyTypeEnum_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyTypeEnum_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyTypeEnum_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyTypeEnum_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) NotifyTypeEnum_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotifyTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Selector) PostId_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) PostId_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) PostId_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) PostId_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PostId_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PostId_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PostId_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PostId_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PostId_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Selector) CommentId_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) CommentId_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) CommentId_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CommentId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) CommentId_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CommentId_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CommentId_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CommentId_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CommentId_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CommentId_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CommentId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Selector) PeerUserId_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) PeerUserId_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) PeerUserId_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) PeerUserId_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PeerUserId_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PeerUserId_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PeerUserId_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PeerUserId_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) PeerUserId_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Selector) Murmur64Hash_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) Murmur64Hash_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) Murmur64Hash_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Murmur64Hash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) Murmur64Hash_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) Murmur64Hash_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) Murmur64Hash_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) Murmur64Hash_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) Murmur64Hash_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) Murmur64Hash_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Murmur64Hash >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Selector) SeenStatus_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) SeenStatus_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) SeenStatus_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SeenStatus NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) SeenStatus_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) SeenStatus_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) SeenStatus_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) SeenStatus_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) SeenStatus_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) SeenStatus_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SeenStatus >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notify_Selector) CreatedTime_In(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) CreatedTime_Ins(ins ...int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notify_Selector) CreatedTime_NotIn(ins []int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notify_Selector) CreatedTime_Eq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CreatedTime_NotEq(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CreatedTime_LT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CreatedTime_LE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CreatedTime_GT(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notify_Selector) CreatedTime_GE(val int) *__Notify_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Notify_Updater) NotifyId(newVal int) *__Notify_Updater {
	u.updates[" NotifyId = ? "] = newVal
	return u
}

func (u *__Notify_Updater) NotifyId_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" NotifyId = NotifyId+? "] = count
	}

	if count < 0 {
		u.updates[" NotifyId = NotifyId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notify_Updater) ForUserId(newVal int) *__Notify_Updater {
	u.updates[" ForUserId = ? "] = newVal
	return u
}

func (u *__Notify_Updater) ForUserId_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" ForUserId = ForUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ForUserId = ForUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notify_Updater) ActorUserId(newVal int) *__Notify_Updater {
	u.updates[" ActorUserId = ? "] = newVal
	return u
}

func (u *__Notify_Updater) ActorUserId_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" ActorUserId = ActorUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ActorUserId = ActorUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notify_Updater) NotifyTypeEnum(newVal int) *__Notify_Updater {
	u.updates[" NotifyTypeEnum = ? "] = newVal
	return u
}

func (u *__Notify_Updater) NotifyTypeEnum_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" NotifyTypeEnum = NotifyTypeEnum+? "] = count
	}

	if count < 0 {
		u.updates[" NotifyTypeEnum = NotifyTypeEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notify_Updater) PostId(newVal int) *__Notify_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__Notify_Updater) PostId_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notify_Updater) CommentId(newVal int) *__Notify_Updater {
	u.updates[" CommentId = ? "] = newVal
	return u
}

func (u *__Notify_Updater) CommentId_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" CommentId = CommentId+? "] = count
	}

	if count < 0 {
		u.updates[" CommentId = CommentId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notify_Updater) PeerUserId(newVal int) *__Notify_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

func (u *__Notify_Updater) PeerUserId_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" PeerUserId = PeerUserId+? "] = count
	}

	if count < 0 {
		u.updates[" PeerUserId = PeerUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notify_Updater) Murmur64Hash(newVal int) *__Notify_Updater {
	u.updates[" Murmur64Hash = ? "] = newVal
	return u
}

func (u *__Notify_Updater) Murmur64Hash_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" Murmur64Hash = Murmur64Hash+? "] = count
	}

	if count < 0 {
		u.updates[" Murmur64Hash = Murmur64Hash-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notify_Updater) SeenStatus(newVal int) *__Notify_Updater {
	u.updates[" SeenStatus = ? "] = newVal
	return u
}

func (u *__Notify_Updater) SeenStatus_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" SeenStatus = SeenStatus+? "] = count
	}

	if count < 0 {
		u.updates[" SeenStatus = SeenStatus-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notify_Updater) CreatedTime(newVal int) *__Notify_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Notify_Updater) CreatedTime_Increment(count int) *__Notify_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Notify_Selector) OrderBy_NotifyId_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY NotifyId DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_NotifyId_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY NotifyId ASC "
	return u
}

func (u *__Notify_Selector) Select_NotifyId() *__Notify_Selector {
	u.selectCol = "NotifyId"
	return u
}

func (u *__Notify_Selector) OrderBy_ForUserId_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY ForUserId DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_ForUserId_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY ForUserId ASC "
	return u
}

func (u *__Notify_Selector) Select_ForUserId() *__Notify_Selector {
	u.selectCol = "ForUserId"
	return u
}

func (u *__Notify_Selector) OrderBy_ActorUserId_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY ActorUserId DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_ActorUserId_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY ActorUserId ASC "
	return u
}

func (u *__Notify_Selector) Select_ActorUserId() *__Notify_Selector {
	u.selectCol = "ActorUserId"
	return u
}

func (u *__Notify_Selector) OrderBy_NotifyTypeEnum_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY NotifyTypeEnum DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_NotifyTypeEnum_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY NotifyTypeEnum ASC "
	return u
}

func (u *__Notify_Selector) Select_NotifyTypeEnum() *__Notify_Selector {
	u.selectCol = "NotifyTypeEnum"
	return u
}

func (u *__Notify_Selector) OrderBy_PostId_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_PostId_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Notify_Selector) Select_PostId() *__Notify_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Notify_Selector) OrderBy_CommentId_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY CommentId DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_CommentId_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY CommentId ASC "
	return u
}

func (u *__Notify_Selector) Select_CommentId() *__Notify_Selector {
	u.selectCol = "CommentId"
	return u
}

func (u *__Notify_Selector) OrderBy_PeerUserId_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_PeerUserId_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__Notify_Selector) Select_PeerUserId() *__Notify_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__Notify_Selector) OrderBy_Murmur64Hash_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY Murmur64Hash DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_Murmur64Hash_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY Murmur64Hash ASC "
	return u
}

func (u *__Notify_Selector) Select_Murmur64Hash() *__Notify_Selector {
	u.selectCol = "Murmur64Hash"
	return u
}

func (u *__Notify_Selector) OrderBy_SeenStatus_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY SeenStatus DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_SeenStatus_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY SeenStatus ASC "
	return u
}

func (u *__Notify_Selector) Select_SeenStatus() *__Notify_Selector {
	u.selectCol = "SeenStatus"
	return u
}

func (u *__Notify_Selector) OrderBy_CreatedTime_Desc() *__Notify_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Notify_Selector) OrderBy_CreatedTime_Asc() *__Notify_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Notify_Selector) Select_CreatedTime() *__Notify_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Notify_Selector) Limit(num int) *__Notify_Selector {
	u.limit = num
	return u
}

func (u *__Notify_Selector) Offset(num int) *__Notify_Selector {
	u.offset = num
	return u
}

func (u *__Notify_Selector) Order_Rand() *__Notify_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Notify_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.notify"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Notify_Selector) GetRow(db *sqlx.DB) (*Notify, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, whereArgs)
	}

	row := &Notify{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnNotify_LoadOne(row)

	return row, nil
}

func (u *__Notify_Selector) GetRows(db *sqlx.DB) ([]*Notify, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*Notify
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnNotify_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Notify_Selector) GetRows2(db *sqlx.DB) ([]Notify, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*Notify
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnNotify_LoadMany(rows)

	rows2 := make([]Notify, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Notify_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__Notify_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Notify_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Notify_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Notify_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.notify SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__Notify_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.notify WHERE " + wheresStr

	// run query
	if LogTableSqlReq.Notify {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Notify ////////////////

func MassInsert_Notify(rows []Notify, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun.notify (" +
		"NotifyId, ForUserId, ActorUserId, NotifyTypeEnum, PostId, CommentId, PeerUserId, Murmur64Hash, SeenStatus, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.NotifyId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.NotifyTypeEnum)
		vals = append(vals, row.PostId)
		vals = append(vals, row.CommentId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.Murmur64Hash)
		vals = append(vals, row.SeenStatus)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_Notify(rows []Notify, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "(?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun.notify (" +
		"NotifyId, ForUserId, ActorUserId, NotifyTypeEnum, PostId, CommentId, PeerUserId, Murmur64Hash, SeenStatus, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.NotifyId)
		vals = append(vals, row.ForUserId)
		vals = append(vals, row.ActorUserId)
		vals = append(vals, row.NotifyTypeEnum)
		vals = append(vals, row.PostId)
		vals = append(vals, row.CommentId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.Murmur64Hash)
		vals = append(vals, row.SeenStatus)
		vals = append(vals, row.CreatedTime)

	}

	if LogTableSqlReq.Notify {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Notify {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//
