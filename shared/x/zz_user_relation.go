package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// UserRelation represents a row from 'sun.user_relation'.

// Manualy copy this to project
type UserRelation__ struct {
	RelNanoId     int `json:"RelNanoId"`     // RelNanoId -
	UserId        int `json:"UserId"`        // UserId -
	PeerUserId    int `json:"PeerUserId"`    // PeerUserId -
	Follwing      int `json:"Follwing"`      // Follwing -
	Followed      int `json:"Followed"`      // Followed -
	InContacts    int `json:"InContacts"`    // InContacts -
	MutualContact int `json:"MutualContact"` // MutualContact -
	IsFavorite    int `json:"IsFavorite"`    // IsFavorite -
	Notify        int `json:"Notify"`        // Notify -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserRelation exists in the database.
func (ur *UserRelation) Exists() bool {
	return ur._exists
}

// Deleted provides information if the UserRelation has been deleted from the database.
func (ur *UserRelation) Deleted() bool {
	return ur._deleted
}

// Insert inserts the UserRelation to the database.
func (ur *UserRelation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ur._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun.user_relation (` +
		`RelNanoId, UserId, PeerUserId, Follwing, Followed, InContacts, MutualContact, IsFavorite, Notify` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, ur.RelNanoId, ur.UserId, ur.PeerUserId, ur.Follwing, ur.Followed, ur.InContacts, ur.MutualContact, ur.IsFavorite, ur.Notify)
	}
	_, err = db.Exec(sqlstr, ur.RelNanoId, ur.UserId, ur.PeerUserId, ur.Follwing, ur.Followed, ur.InContacts, ur.MutualContact, ur.IsFavorite, ur.Notify)
	if err != nil {
		return err
	}

	// set existence
	ur._exists = true

	OnUserRelation_AfterInsert(ur)

	return nil
}

// Insert inserts the UserRelation to the database.
func (ur *UserRelation) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.user_relation (` +
		`RelNanoId, UserId, PeerUserId, Follwing, Followed, InContacts, MutualContact, IsFavorite, Notify` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, ur.RelNanoId, ur.UserId, ur.PeerUserId, ur.Follwing, ur.Followed, ur.InContacts, ur.MutualContact, ur.IsFavorite, ur.Notify)
	}
	_, err = db.Exec(sqlstr, ur.RelNanoId, ur.UserId, ur.PeerUserId, ur.Follwing, ur.Followed, ur.InContacts, ur.MutualContact, ur.IsFavorite, ur.Notify)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return err
	}

	ur._exists = true

	OnUserRelation_AfterInsert(ur)

	return nil
}

// Update updates the UserRelation in the database.
func (ur *UserRelation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ur._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ur._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.user_relation SET ` +
		`UserId = ?, PeerUserId = ?, Follwing = ?, Followed = ?, InContacts = ?, MutualContact = ?, IsFavorite = ?, Notify = ?` +
		` WHERE RelNanoId = ?`

	// run query
	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, ur.UserId, ur.PeerUserId, ur.Follwing, ur.Followed, ur.InContacts, ur.MutualContact, ur.IsFavorite, ur.Notify, ur.RelNanoId)
	}
	_, err = db.Exec(sqlstr, ur.UserId, ur.PeerUserId, ur.Follwing, ur.Followed, ur.InContacts, ur.MutualContact, ur.IsFavorite, ur.Notify, ur.RelNanoId)

	if LogTableSqlReq.UserRelation {
		XOLogErr(err)
	}
	OnUserRelation_AfterUpdate(ur)

	return err
}

// Save saves the UserRelation to the database.
func (ur *UserRelation) Save(db XODB) error {
	if ur.Exists() {
		return ur.Update(db)
	}

	return ur.Replace(db)
}

// Delete deletes the UserRelation from the database.
func (ur *UserRelation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ur._exists {
		return nil
	}

	// if deleted, bail
	if ur._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.user_relation WHERE RelNanoId = ?`

	// run query
	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, ur.RelNanoId)
	}
	_, err = db.Exec(sqlstr, ur.RelNanoId)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	ur._deleted = true

	OnUserRelation_AfterDelete(ur)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __UserRelation_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __UserRelation_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __UserRelation_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewUserRelation_Deleter() *__UserRelation_Deleter {
	d := __UserRelation_Deleter{whereSep: " AND ", isMysql: true}
	return &d
}

func NewUserRelation_Updater() *__UserRelation_Updater {
	u := __UserRelation_Updater{whereSep: " AND ", isMysql: true}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewUserRelation_Selector() *__UserRelation_Selector {
	u := __UserRelation_Selector{whereSep: " AND ", selectCol: "*", isMysql: true}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__UserRelation_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__UserRelation_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__UserRelation_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__UserRelation_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__UserRelation_Deleter) Or() *__UserRelation_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__UserRelation_Deleter) RelNanoId_In(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RelNanoId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) RelNanoId_Ins(ins ...int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RelNanoId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) RelNanoId_NotIn(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RelNanoId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Deleter) RelNanoId_Eq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) RelNanoId_NotEq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) RelNanoId_LT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) RelNanoId_LE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) RelNanoId_GT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) RelNanoId_GE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Deleter) UserId_In(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) UserId_Ins(ins ...int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) UserId_NotIn(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Deleter) UserId_Eq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) UserId_NotEq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) UserId_LT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) UserId_LE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) UserId_GT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) UserId_GE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Deleter) PeerUserId_In(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) PeerUserId_Ins(ins ...int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) PeerUserId_NotIn(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Deleter) PeerUserId_Eq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) PeerUserId_NotEq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) PeerUserId_LT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) PeerUserId_LE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) PeerUserId_GT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) PeerUserId_GE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Deleter) Follwing_In(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Follwing IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) Follwing_Ins(ins ...int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Follwing IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) Follwing_NotIn(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Follwing NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Deleter) Follwing_Eq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Follwing_NotEq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Follwing_LT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Follwing_LE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Follwing_GT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Follwing_GE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Deleter) Followed_In(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Followed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) Followed_Ins(ins ...int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Followed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) Followed_NotIn(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Followed NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Deleter) Followed_Eq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Followed_NotEq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Followed_LT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Followed_LE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Followed_GT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Followed_GE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Deleter) InContacts_In(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InContacts IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) InContacts_Ins(ins ...int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InContacts IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) InContacts_NotIn(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InContacts NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Deleter) InContacts_Eq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) InContacts_NotEq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) InContacts_LT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) InContacts_LE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) InContacts_GT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) InContacts_GE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Deleter) MutualContact_In(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MutualContact IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) MutualContact_Ins(ins ...int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MutualContact IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) MutualContact_NotIn(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MutualContact NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Deleter) MutualContact_Eq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) MutualContact_NotEq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) MutualContact_LT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) MutualContact_LE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) MutualContact_GT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) MutualContact_GE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Deleter) IsFavorite_In(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsFavorite IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) IsFavorite_Ins(ins ...int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsFavorite IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) IsFavorite_NotIn(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsFavorite NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Deleter) IsFavorite_Eq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) IsFavorite_NotEq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) IsFavorite_LT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) IsFavorite_LE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) IsFavorite_GT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) IsFavorite_GE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Deleter) Notify_In(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Notify IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) Notify_Ins(ins ...int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Notify IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Deleter) Notify_NotIn(ins []int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Notify NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Deleter) Notify_Eq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Notify_NotEq(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Notify_LT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Notify_LE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Notify_GT(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Deleter) Notify_GE(val int) *__UserRelation_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__UserRelation_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__UserRelation_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__UserRelation_Updater) Or() *__UserRelation_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__UserRelation_Updater) RelNanoId_In(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RelNanoId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) RelNanoId_Ins(ins ...int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RelNanoId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) RelNanoId_NotIn(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RelNanoId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Updater) RelNanoId_Eq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) RelNanoId_NotEq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) RelNanoId_LT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) RelNanoId_LE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) RelNanoId_GT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) RelNanoId_GE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Updater) UserId_In(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) UserId_Ins(ins ...int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) UserId_NotIn(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Updater) UserId_Eq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) UserId_NotEq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) UserId_LT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) UserId_LE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) UserId_GT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) UserId_GE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Updater) PeerUserId_In(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) PeerUserId_Ins(ins ...int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) PeerUserId_NotIn(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Updater) PeerUserId_Eq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) PeerUserId_NotEq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) PeerUserId_LT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) PeerUserId_LE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) PeerUserId_GT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) PeerUserId_GE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Updater) Follwing_In(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Follwing IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) Follwing_Ins(ins ...int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Follwing IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) Follwing_NotIn(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Follwing NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Updater) Follwing_Eq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Follwing_NotEq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Follwing_LT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Follwing_LE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Follwing_GT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Follwing_GE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Updater) Followed_In(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Followed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) Followed_Ins(ins ...int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Followed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) Followed_NotIn(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Followed NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Updater) Followed_Eq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Followed_NotEq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Followed_LT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Followed_LE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Followed_GT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Followed_GE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Updater) InContacts_In(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InContacts IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) InContacts_Ins(ins ...int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InContacts IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) InContacts_NotIn(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InContacts NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Updater) InContacts_Eq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) InContacts_NotEq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) InContacts_LT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) InContacts_LE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) InContacts_GT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) InContacts_GE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Updater) MutualContact_In(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MutualContact IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) MutualContact_Ins(ins ...int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MutualContact IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) MutualContact_NotIn(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MutualContact NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Updater) MutualContact_Eq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) MutualContact_NotEq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) MutualContact_LT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) MutualContact_LE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) MutualContact_GT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) MutualContact_GE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Updater) IsFavorite_In(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsFavorite IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) IsFavorite_Ins(ins ...int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsFavorite IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) IsFavorite_NotIn(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsFavorite NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Updater) IsFavorite_Eq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) IsFavorite_NotEq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) IsFavorite_LT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) IsFavorite_LE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) IsFavorite_GT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) IsFavorite_GE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Updater) Notify_In(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Notify IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) Notify_Ins(ins ...int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Notify IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Updater) Notify_NotIn(ins []int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Notify NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Updater) Notify_Eq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Notify_NotEq(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Notify_LT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Notify_LE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Notify_GT(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Updater) Notify_GE(val int) *__UserRelation_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__UserRelation_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__UserRelation_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__UserRelation_Selector) Or() *__UserRelation_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__UserRelation_Selector) RelNanoId_In(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RelNanoId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) RelNanoId_Ins(ins ...int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RelNanoId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) RelNanoId_NotIn(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RelNanoId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Selector) RelNanoId_Eq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) RelNanoId_NotEq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) RelNanoId_LT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) RelNanoId_LE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) RelNanoId_GT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) RelNanoId_GE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RelNanoId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Selector) UserId_In(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) UserId_Ins(ins ...int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) UserId_NotIn(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Selector) UserId_Eq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) UserId_NotEq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) UserId_LT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) UserId_LE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) UserId_GT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) UserId_GE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Selector) PeerUserId_In(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) PeerUserId_Ins(ins ...int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) PeerUserId_NotIn(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Selector) PeerUserId_Eq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) PeerUserId_NotEq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) PeerUserId_LT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) PeerUserId_LE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) PeerUserId_GT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) PeerUserId_GE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Selector) Follwing_In(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Follwing IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) Follwing_Ins(ins ...int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Follwing IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) Follwing_NotIn(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Follwing NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Selector) Follwing_Eq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Follwing_NotEq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Follwing_LT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Follwing_LE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Follwing_GT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Follwing_GE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Follwing >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Selector) Followed_In(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Followed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) Followed_Ins(ins ...int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Followed IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) Followed_NotIn(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Followed NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Selector) Followed_Eq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Followed_NotEq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Followed_LT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Followed_LE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Followed_GT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Followed_GE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Followed >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Selector) InContacts_In(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InContacts IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) InContacts_Ins(ins ...int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InContacts IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) InContacts_NotIn(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InContacts NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Selector) InContacts_Eq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) InContacts_NotEq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) InContacts_LT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) InContacts_LE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) InContacts_GT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) InContacts_GE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InContacts >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Selector) MutualContact_In(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MutualContact IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) MutualContact_Ins(ins ...int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MutualContact IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) MutualContact_NotIn(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MutualContact NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Selector) MutualContact_Eq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) MutualContact_NotEq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) MutualContact_LT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) MutualContact_LE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) MutualContact_GT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) MutualContact_GE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MutualContact >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Selector) IsFavorite_In(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsFavorite IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) IsFavorite_Ins(ins ...int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsFavorite IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) IsFavorite_NotIn(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsFavorite NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Selector) IsFavorite_Eq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) IsFavorite_NotEq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) IsFavorite_LT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) IsFavorite_LE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) IsFavorite_GT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) IsFavorite_GE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsFavorite >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserRelation_Selector) Notify_In(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Notify IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) Notify_Ins(ins ...int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Notify IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserRelation_Selector) Notify_NotIn(ins []int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Notify NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserRelation_Selector) Notify_Eq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Notify_NotEq(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Notify_LT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Notify_LE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Notify_GT(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserRelation_Selector) Notify_GE(val int) *__UserRelation_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Notify >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__UserRelation_Updater) RelNanoId(newVal int) *__UserRelation_Updater {
	up := updateCol{" RelNanoId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" RelNanoId = " + u.nextDollar()] = newVal
	return u
}

func (u *__UserRelation_Updater) RelNanoId_Increment(count int) *__UserRelation_Updater {
	if count > 0 {
		up := updateCol{" RelNanoId = RelNanoId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" RelNanoId = RelNanoId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" RelNanoId = RelNanoId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" RelNanoId = RelNanoId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__UserRelation_Updater) UserId(newVal int) *__UserRelation_Updater {
	up := updateCol{" UserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__UserRelation_Updater) UserId_Increment(count int) *__UserRelation_Updater {
	if count > 0 {
		up := updateCol{" UserId = UserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" UserId = UserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" UserId = UserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" UserId = UserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__UserRelation_Updater) PeerUserId(newVal int) *__UserRelation_Updater {
	up := updateCol{" PeerUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PeerUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__UserRelation_Updater) PeerUserId_Increment(count int) *__UserRelation_Updater {
	if count > 0 {
		up := updateCol{" PeerUserId = PeerUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PeerUserId = PeerUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PeerUserId = PeerUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PeerUserId = PeerUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__UserRelation_Updater) Follwing(newVal int) *__UserRelation_Updater {
	up := updateCol{" Follwing = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Follwing = " + u.nextDollar()] = newVal
	return u
}

func (u *__UserRelation_Updater) Follwing_Increment(count int) *__UserRelation_Updater {
	if count > 0 {
		up := updateCol{" Follwing = Follwing+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Follwing = Follwing+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Follwing = Follwing- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Follwing = Follwing- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__UserRelation_Updater) Followed(newVal int) *__UserRelation_Updater {
	up := updateCol{" Followed = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Followed = " + u.nextDollar()] = newVal
	return u
}

func (u *__UserRelation_Updater) Followed_Increment(count int) *__UserRelation_Updater {
	if count > 0 {
		up := updateCol{" Followed = Followed+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Followed = Followed+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Followed = Followed- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Followed = Followed- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__UserRelation_Updater) InContacts(newVal int) *__UserRelation_Updater {
	up := updateCol{" InContacts = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" InContacts = " + u.nextDollar()] = newVal
	return u
}

func (u *__UserRelation_Updater) InContacts_Increment(count int) *__UserRelation_Updater {
	if count > 0 {
		up := updateCol{" InContacts = InContacts+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" InContacts = InContacts+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" InContacts = InContacts- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" InContacts = InContacts- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__UserRelation_Updater) MutualContact(newVal int) *__UserRelation_Updater {
	up := updateCol{" MutualContact = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MutualContact = " + u.nextDollar()] = newVal
	return u
}

func (u *__UserRelation_Updater) MutualContact_Increment(count int) *__UserRelation_Updater {
	if count > 0 {
		up := updateCol{" MutualContact = MutualContact+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MutualContact = MutualContact+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MutualContact = MutualContact- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MutualContact = MutualContact- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__UserRelation_Updater) IsFavorite(newVal int) *__UserRelation_Updater {
	up := updateCol{" IsFavorite = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsFavorite = " + u.nextDollar()] = newVal
	return u
}

func (u *__UserRelation_Updater) IsFavorite_Increment(count int) *__UserRelation_Updater {
	if count > 0 {
		up := updateCol{" IsFavorite = IsFavorite+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsFavorite = IsFavorite+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsFavorite = IsFavorite- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsFavorite = IsFavorite- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__UserRelation_Updater) Notify(newVal int) *__UserRelation_Updater {
	up := updateCol{" Notify = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Notify = " + u.nextDollar()] = newVal
	return u
}

func (u *__UserRelation_Updater) Notify_Increment(count int) *__UserRelation_Updater {
	if count > 0 {
		up := updateCol{" Notify = Notify+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Notify = Notify+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Notify = Notify- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Notify = Notify- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__UserRelation_Selector) OrderBy_RelNanoId_Desc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY RelNanoId DESC "
	return u
}

func (u *__UserRelation_Selector) OrderBy_RelNanoId_Asc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY RelNanoId ASC "
	return u
}

func (u *__UserRelation_Selector) Select_RelNanoId() *__UserRelation_Selector {
	u.selectCol = "RelNanoId"
	return u
}

func (u *__UserRelation_Selector) OrderBy_UserId_Desc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__UserRelation_Selector) OrderBy_UserId_Asc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__UserRelation_Selector) Select_UserId() *__UserRelation_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__UserRelation_Selector) OrderBy_PeerUserId_Desc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__UserRelation_Selector) OrderBy_PeerUserId_Asc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__UserRelation_Selector) Select_PeerUserId() *__UserRelation_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__UserRelation_Selector) OrderBy_Follwing_Desc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY Follwing DESC "
	return u
}

func (u *__UserRelation_Selector) OrderBy_Follwing_Asc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY Follwing ASC "
	return u
}

func (u *__UserRelation_Selector) Select_Follwing() *__UserRelation_Selector {
	u.selectCol = "Follwing"
	return u
}

func (u *__UserRelation_Selector) OrderBy_Followed_Desc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY Followed DESC "
	return u
}

func (u *__UserRelation_Selector) OrderBy_Followed_Asc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY Followed ASC "
	return u
}

func (u *__UserRelation_Selector) Select_Followed() *__UserRelation_Selector {
	u.selectCol = "Followed"
	return u
}

func (u *__UserRelation_Selector) OrderBy_InContacts_Desc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY InContacts DESC "
	return u
}

func (u *__UserRelation_Selector) OrderBy_InContacts_Asc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY InContacts ASC "
	return u
}

func (u *__UserRelation_Selector) Select_InContacts() *__UserRelation_Selector {
	u.selectCol = "InContacts"
	return u
}

func (u *__UserRelation_Selector) OrderBy_MutualContact_Desc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY MutualContact DESC "
	return u
}

func (u *__UserRelation_Selector) OrderBy_MutualContact_Asc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY MutualContact ASC "
	return u
}

func (u *__UserRelation_Selector) Select_MutualContact() *__UserRelation_Selector {
	u.selectCol = "MutualContact"
	return u
}

func (u *__UserRelation_Selector) OrderBy_IsFavorite_Desc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY IsFavorite DESC "
	return u
}

func (u *__UserRelation_Selector) OrderBy_IsFavorite_Asc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY IsFavorite ASC "
	return u
}

func (u *__UserRelation_Selector) Select_IsFavorite() *__UserRelation_Selector {
	u.selectCol = "IsFavorite"
	return u
}

func (u *__UserRelation_Selector) OrderBy_Notify_Desc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY Notify DESC "
	return u
}

func (u *__UserRelation_Selector) OrderBy_Notify_Asc() *__UserRelation_Selector {
	u.orderBy = " ORDER BY Notify ASC "
	return u
}

func (u *__UserRelation_Selector) Select_Notify() *__UserRelation_Selector {
	u.selectCol = "Notify"
	return u
}

func (u *__UserRelation_Selector) Limit(num int) *__UserRelation_Selector {
	u.limit = num
	return u
}

func (u *__UserRelation_Selector) Offset(num int) *__UserRelation_Selector {
	u.offset = num
	return u
}

func (u *__UserRelation_Selector) Order_Rand() *__UserRelation_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__UserRelation_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.user_relation"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__UserRelation_Selector) GetRow(db *sqlx.DB) (*UserRelation, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, whereArgs)
	}

	row := &UserRelation{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnUserRelation_LoadOne(row)

	return row, nil
}

func (u *__UserRelation_Selector) GetRows(db *sqlx.DB) ([]*UserRelation, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*UserRelation
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnUserRelation_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__UserRelation_Selector) GetRows2(db *sqlx.DB) ([]UserRelation, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*UserRelation
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnUserRelation_LoadMany(rows)

	rows2 := make([]UserRelation, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__UserRelation_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__UserRelation_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__UserRelation_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__UserRelation_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__UserRelation_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.user_relation SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__UserRelation_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.user_relation WHERE " + wheresStr

	// run query
	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  UserRelation ////////////////

func MassInsert_UserRelation(rows []UserRelation, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(9, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun.user_relation (" +
		"RelNanoId, UserId, PeerUserId, Follwing, Followed, InContacts, MutualContact, IsFavorite, Notify" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.RelNanoId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.Follwing)
		vals = append(vals, row.Followed)
		vals = append(vals, row.InContacts)
		vals = append(vals, row.MutualContact)
		vals = append(vals, row.IsFavorite)
		vals = append(vals, row.Notify)

	}

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_UserRelation(rows []UserRelation, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(9, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun.user_relation (" +
		"RelNanoId, UserId, PeerUserId, Follwing, Followed, InContacts, MutualContact, IsFavorite, Notify" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.RelNanoId)
		vals = append(vals, row.UserId)
		vals = append(vals, row.PeerUserId)
		vals = append(vals, row.Follwing)
		vals = append(vals, row.Followed)
		vals = append(vals, row.InContacts)
		vals = append(vals, row.MutualContact)
		vals = append(vals, row.IsFavorite)
		vals = append(vals, row.Notify)

	}

	if LogTableSqlReq.UserRelation {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.UserRelation {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//
