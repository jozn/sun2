package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/shared/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
)

// (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// Group represents a row from 'sun_chat.group'.

// Manualy copy this to project
type Group__ struct {
	GroupId         int    `json:"GroupId"`         // GroupId -
	GroupKey        string `json:"GroupKey"`        // GroupKey -
	GroupName       string `json:"GroupName"`       // GroupName -
	UserName        string `json:"UserName"`        // UserName -
	IsSuperGroup    int    `json:"IsSuperGroup"`    // IsSuperGroup -
	HashTagId       int    `json:"HashTagId"`       // HashTagId -
	CreatorUserId   int    `json:"CreatorUserId"`   // CreatorUserId -
	GroupPrivacy    int    `json:"GroupPrivacy"`    // GroupPrivacy -
	HistoryViewAble int    `json:"HistoryViewAble"` // HistoryViewAble -
	Seq             int    `json:"Seq"`             // Seq -
	LastMsgId       int    `json:"LastMsgId"`       // LastMsgId -
	PinedMsgId      int    `json:"PinedMsgId"`      // PinedMsgId -
	AvatarRefId     int    `json:"AvatarRefId"`     // AvatarRefId -
	AvatarCount     int    `json:"AvatarCount"`     // AvatarCount -
	About           string `json:"About"`           // About -
	InviteLink      string `json:"InviteLink"`      // InviteLink -
	MembersCount    int    `json:"MembersCount"`    // MembersCount -
	SortTime        int    `json:"SortTime"`        // SortTime -
	CreatedTime     int    `json:"CreatedTime"`     // CreatedTime -
	IsMute          int    `json:"IsMute"`          // IsMute -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Group exists in the database.
func (g *Group) Exists() bool {
	return g._exists
}

// Deleted provides information if the Group has been deleted from the database.
func (g *Group) Deleted() bool {
	return g._deleted
}

// Insert inserts the Group to the database.
func (g *Group) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sun_chat.group (` +
		`GroupId, GroupKey, GroupName, UserName, IsSuperGroup, HashTagId, CreatorUserId, GroupPrivacy, HistoryViewAble, Seq, LastMsgId, PinedMsgId, AvatarRefId, AvatarCount, About, InviteLink, MembersCount, SortTime, CreatedTime, IsMute` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Group {
		XOLog(sqlstr, g.GroupId, g.GroupKey, g.GroupName, g.UserName, g.IsSuperGroup, g.HashTagId, g.CreatorUserId, g.GroupPrivacy, g.HistoryViewAble, g.Seq, g.LastMsgId, g.PinedMsgId, g.AvatarRefId, g.AvatarCount, g.About, g.InviteLink, g.MembersCount, g.SortTime, g.CreatedTime, g.IsMute)
	}
	_, err = db.Exec(sqlstr, g.GroupId, g.GroupKey, g.GroupName, g.UserName, g.IsSuperGroup, g.HashTagId, g.CreatorUserId, g.GroupPrivacy, g.HistoryViewAble, g.Seq, g.LastMsgId, g.PinedMsgId, g.AvatarRefId, g.AvatarCount, g.About, g.InviteLink, g.MembersCount, g.SortTime, g.CreatedTime, g.IsMute)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	OnGroup_AfterInsert(g)

	return nil
}

// Insert inserts the Group to the database.
func (g *Group) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun_chat.group (` +
		`GroupId, GroupKey, GroupName, UserName, IsSuperGroup, HashTagId, CreatorUserId, GroupPrivacy, HistoryViewAble, Seq, LastMsgId, PinedMsgId, AvatarRefId, AvatarCount, About, InviteLink, MembersCount, SortTime, CreatedTime, IsMute` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.Group {
		XOLog(sqlstr, g.GroupId, g.GroupKey, g.GroupName, g.UserName, g.IsSuperGroup, g.HashTagId, g.CreatorUserId, g.GroupPrivacy, g.HistoryViewAble, g.Seq, g.LastMsgId, g.PinedMsgId, g.AvatarRefId, g.AvatarCount, g.About, g.InviteLink, g.MembersCount, g.SortTime, g.CreatedTime, g.IsMute)
	}
	_, err = db.Exec(sqlstr, g.GroupId, g.GroupKey, g.GroupName, g.UserName, g.IsSuperGroup, g.HashTagId, g.CreatorUserId, g.GroupPrivacy, g.HistoryViewAble, g.Seq, g.LastMsgId, g.PinedMsgId, g.AvatarRefId, g.AvatarCount, g.About, g.InviteLink, g.MembersCount, g.SortTime, g.CreatedTime, g.IsMute)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return err
	}

	g._exists = true

	OnGroup_AfterInsert(g)

	return nil
}

// Update updates the Group in the database.
func (g *Group) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if g._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun_chat.group SET ` +
		`GroupKey = ?, GroupName = ?, UserName = ?, IsSuperGroup = ?, HashTagId = ?, CreatorUserId = ?, GroupPrivacy = ?, HistoryViewAble = ?, Seq = ?, LastMsgId = ?, PinedMsgId = ?, AvatarRefId = ?, AvatarCount = ?, About = ?, InviteLink = ?, MembersCount = ?, SortTime = ?, CreatedTime = ?, IsMute = ?` +
		` WHERE GroupId = ?`

	// run query
	if LogTableSqlReq.Group {
		XOLog(sqlstr, g.GroupKey, g.GroupName, g.UserName, g.IsSuperGroup, g.HashTagId, g.CreatorUserId, g.GroupPrivacy, g.HistoryViewAble, g.Seq, g.LastMsgId, g.PinedMsgId, g.AvatarRefId, g.AvatarCount, g.About, g.InviteLink, g.MembersCount, g.SortTime, g.CreatedTime, g.IsMute, g.GroupId)
	}
	_, err = db.Exec(sqlstr, g.GroupKey, g.GroupName, g.UserName, g.IsSuperGroup, g.HashTagId, g.CreatorUserId, g.GroupPrivacy, g.HistoryViewAble, g.Seq, g.LastMsgId, g.PinedMsgId, g.AvatarRefId, g.AvatarCount, g.About, g.InviteLink, g.MembersCount, g.SortTime, g.CreatedTime, g.IsMute, g.GroupId)

	if LogTableSqlReq.Group {
		XOLogErr(err)
	}
	OnGroup_AfterUpdate(g)

	return err
}

// Save saves the Group to the database.
func (g *Group) Save(db XODB) error {
	if g.Exists() {
		return g.Update(db)
	}

	return g.Replace(db)
}

// Delete deletes the Group from the database.
func (g *Group) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun_chat.group WHERE GroupId = ?`

	// run query
	if LogTableSqlReq.Group {
		XOLog(sqlstr, g.GroupId)
	}
	_, err = db.Exec(sqlstr, g.GroupId)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	g._deleted = true

	OnGroup_AfterDelete(g)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __Group_Deleter struct {
	wheres      []whereClause
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Group_Updater struct {
	wheres []whereClause
	// updates   map[string]interface{}
	updates     []updateCol
	whereSep    string
	dollarIndex int
	isMysql     bool
}

type __Group_Selector struct {
	wheres      []whereClause
	selectCol   string
	whereSep    string
	orderBy     string //" order by id desc //for ints
	limit       int
	offset      int
	dollarIndex int
	isMysql     bool
}

func NewGroup_Deleter() *__Group_Deleter {
	d := __Group_Deleter{whereSep: " AND "}
	return &d
}

func NewGroup_Updater() *__Group_Updater {
	u := __Group_Updater{whereSep: " AND "}
	//u.updates =  make(map[string]interface{},10)
	return &u
}

func NewGroup_Selector() *__Group_Selector {
	u := __Group_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/*/// mysql or cockroach ? or $1 handlers
func (m *__Group_Selector)nextDollars(size int) string  {
    r := DollarsForSqlIn(size,m.dollarIndex,m.isMysql)
    m.dollarIndex += size
    return r
}

func (m *__Group_Selector)nextDollar() string  {
    r := DollarsForSqlIn(1,m.dollarIndex,m.isMysql)
    m.dollarIndex += 1
    return r
}

*/
/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

/// mysql or cockroach ? or $1 handlers
func (m *__Group_Deleter) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Group_Deleter) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Group_Deleter) Or() *__Group_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Group_Deleter) GroupId_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupId_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupId_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) GroupId_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupId_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) IsSuperGroup_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsSuperGroup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) IsSuperGroup_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsSuperGroup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) IsSuperGroup_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsSuperGroup NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) IsSuperGroup_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsSuperGroup_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsSuperGroup_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsSuperGroup_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsSuperGroup_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsSuperGroup_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) HashTagId_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) HashTagId_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) HashTagId_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) HashTagId_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HashTagId_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HashTagId_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HashTagId_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HashTagId_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HashTagId_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) CreatorUserId_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CreatorUserId_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CreatorUserId_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) CreatorUserId_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatorUserId_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) GroupPrivacy_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacy IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupPrivacy_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacy IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupPrivacy_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacy NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) GroupPrivacy_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacy_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacy_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacy_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacy_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupPrivacy_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) HistoryViewAble_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HistoryViewAble IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) HistoryViewAble_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HistoryViewAble IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) HistoryViewAble_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HistoryViewAble NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) HistoryViewAble_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HistoryViewAble_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HistoryViewAble_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HistoryViewAble_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HistoryViewAble_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) HistoryViewAble_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) Seq_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) Seq_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) Seq_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) Seq_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) Seq_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) Seq_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) Seq_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) Seq_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) Seq_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) LastMsgId_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) LastMsgId_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) LastMsgId_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) LastMsgId_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) LastMsgId_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) LastMsgId_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) LastMsgId_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) LastMsgId_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) LastMsgId_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) PinedMsgId_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinedMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) PinedMsgId_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinedMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) PinedMsgId_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinedMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) PinedMsgId_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) PinedMsgId_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) PinedMsgId_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) PinedMsgId_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) PinedMsgId_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) PinedMsgId_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) AvatarRefId_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarRefId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) AvatarRefId_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarRefId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) AvatarRefId_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarRefId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) AvatarRefId_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarRefId_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarRefId_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarRefId_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarRefId_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarRefId_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) AvatarCount_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) AvatarCount_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) AvatarCount_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) AvatarCount_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarCount_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarCount_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarCount_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarCount_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) AvatarCount_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) MembersCount_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) MembersCount_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) MembersCount_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) MembersCount_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) MembersCount_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) SortTime_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SortTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) SortTime_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SortTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) SortTime_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SortTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) SortTime_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) SortTime_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) SortTime_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) SortTime_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) SortTime_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) SortTime_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) CreatedTime_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CreatedTime_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) CreatedTime_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) CreatedTime_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) CreatedTime_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) IsMute_In(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMute IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) IsMute_Ins(ins ...int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMute IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) IsMute_NotIn(ins []int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMute NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) IsMute_Eq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsMute_NotEq(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsMute_LT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsMute_LE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsMute_GT(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) IsMute_GE(val int) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Group_Updater) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Group_Updater) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Group_Updater) Or() *__Group_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Group_Updater) GroupId_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupId_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupId_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) GroupId_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupId_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) IsSuperGroup_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsSuperGroup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) IsSuperGroup_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsSuperGroup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) IsSuperGroup_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsSuperGroup NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) IsSuperGroup_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsSuperGroup_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsSuperGroup_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsSuperGroup_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsSuperGroup_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsSuperGroup_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) HashTagId_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) HashTagId_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) HashTagId_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) HashTagId_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HashTagId_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HashTagId_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HashTagId_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HashTagId_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HashTagId_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) CreatorUserId_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CreatorUserId_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CreatorUserId_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) CreatorUserId_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatorUserId_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) GroupPrivacy_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacy IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupPrivacy_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacy IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupPrivacy_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacy NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) GroupPrivacy_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacy_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacy_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacy_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacy_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupPrivacy_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) HistoryViewAble_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HistoryViewAble IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) HistoryViewAble_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HistoryViewAble IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) HistoryViewAble_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HistoryViewAble NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) HistoryViewAble_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HistoryViewAble_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HistoryViewAble_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HistoryViewAble_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HistoryViewAble_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) HistoryViewAble_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) Seq_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) Seq_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) Seq_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) Seq_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) Seq_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) Seq_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) Seq_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) Seq_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) Seq_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) LastMsgId_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) LastMsgId_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) LastMsgId_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) LastMsgId_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) LastMsgId_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) LastMsgId_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) LastMsgId_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) LastMsgId_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) LastMsgId_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) PinedMsgId_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinedMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) PinedMsgId_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinedMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) PinedMsgId_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinedMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) PinedMsgId_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) PinedMsgId_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) PinedMsgId_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) PinedMsgId_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) PinedMsgId_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) PinedMsgId_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) AvatarRefId_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarRefId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) AvatarRefId_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarRefId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) AvatarRefId_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarRefId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) AvatarRefId_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarRefId_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarRefId_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarRefId_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarRefId_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarRefId_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) AvatarCount_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) AvatarCount_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) AvatarCount_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) AvatarCount_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarCount_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarCount_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarCount_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarCount_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) AvatarCount_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) MembersCount_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) MembersCount_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) MembersCount_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) MembersCount_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) MembersCount_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) SortTime_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SortTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) SortTime_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SortTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) SortTime_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SortTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) SortTime_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) SortTime_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) SortTime_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) SortTime_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) SortTime_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) SortTime_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) CreatedTime_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CreatedTime_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) CreatedTime_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) CreatedTime_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) CreatedTime_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) IsMute_In(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMute IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) IsMute_Ins(ins ...int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMute IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) IsMute_NotIn(ins []int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMute NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) IsMute_Eq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsMute_NotEq(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsMute_LT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsMute_LE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsMute_GT(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) IsMute_GE(val int) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// mysql or cockroach ? or $1 handlers
func (m *__Group_Selector) nextDollars(size int) string {
	r := DollarsForSqlIn(size, m.dollarIndex, m.isMysql)
	m.dollarIndex += size
	return r
}

func (m *__Group_Selector) nextDollar() string {
	r := DollarsForSqlIn(1, m.dollarIndex, m.isMysql)
	m.dollarIndex += 1
	return r
}

////////ints
func (u *__Group_Selector) Or() *__Group_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Group_Selector) GroupId_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupId_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupId_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) GroupId_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupId_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) IsSuperGroup_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsSuperGroup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) IsSuperGroup_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsSuperGroup IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) IsSuperGroup_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsSuperGroup NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) IsSuperGroup_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsSuperGroup_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsSuperGroup_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsSuperGroup_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsSuperGroup_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsSuperGroup_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsSuperGroup >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) HashTagId_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) HashTagId_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) HashTagId_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HashTagId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) HashTagId_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HashTagId_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HashTagId_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HashTagId_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HashTagId_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HashTagId_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HashTagId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) CreatorUserId_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CreatorUserId_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CreatorUserId_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatorUserId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) CreatorUserId_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatorUserId_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatorUserId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) GroupPrivacy_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacy IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupPrivacy_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacy IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupPrivacy_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupPrivacy NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) GroupPrivacy_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacy_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacy_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacy_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacy_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupPrivacy_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupPrivacy >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) HistoryViewAble_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HistoryViewAble IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) HistoryViewAble_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HistoryViewAble IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) HistoryViewAble_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " HistoryViewAble NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) HistoryViewAble_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HistoryViewAble_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HistoryViewAble_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HistoryViewAble_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HistoryViewAble_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) HistoryViewAble_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " HistoryViewAble >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) Seq_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) Seq_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) Seq_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Seq NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) Seq_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) Seq_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) Seq_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) Seq_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) Seq_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) Seq_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Seq >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) LastMsgId_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) LastMsgId_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) LastMsgId_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) LastMsgId_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) LastMsgId_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) LastMsgId_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) LastMsgId_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) LastMsgId_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) LastMsgId_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) PinedMsgId_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinedMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) PinedMsgId_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinedMsgId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) PinedMsgId_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PinedMsgId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) PinedMsgId_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) PinedMsgId_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) PinedMsgId_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) PinedMsgId_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) PinedMsgId_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) PinedMsgId_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PinedMsgId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) AvatarRefId_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarRefId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) AvatarRefId_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarRefId IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) AvatarRefId_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarRefId NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) AvatarRefId_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarRefId_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarRefId_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarRefId_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarRefId_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarRefId_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarRefId >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) AvatarCount_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) AvatarCount_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) AvatarCount_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) AvatarCount_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarCount_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarCount_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarCount_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarCount_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) AvatarCount_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) MembersCount_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) MembersCount_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) MembersCount_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MembersCount NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) MembersCount_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) MembersCount_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MembersCount >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) SortTime_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SortTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) SortTime_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SortTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) SortTime_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SortTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) SortTime_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) SortTime_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) SortTime_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) SortTime_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) SortTime_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) SortTime_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SortTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) CreatedTime_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CreatedTime_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) CreatedTime_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) CreatedTime_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) CreatedTime_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) IsMute_In(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMute IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) IsMute_Ins(ins ...int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMute IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) IsMute_NotIn(ins []int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsMute NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) IsMute_Eq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsMute_NotEq(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsMute_LT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute < " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsMute_LE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute <= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsMute_GT(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute > " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) IsMute_GE(val int) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsMute >= " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Group_Deleter) GroupKey_In(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupKey_NotIn(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Deleter) GroupKey_Like(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) GroupKey_Eq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupKey_NotEq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) GroupName_In(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) GroupName_NotIn(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Deleter) GroupName_Like(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) GroupName_Eq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) GroupName_NotEq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) UserName_In(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) UserName_NotIn(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Deleter) UserName_Like(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) UserName_Eq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) UserName_NotEq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) About_In(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) About_NotIn(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Deleter) About_Like(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) About_Eq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) About_NotEq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Deleter) InviteLink_In(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InviteLink IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Deleter) InviteLink_NotIn(ins []string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InviteLink NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Deleter) InviteLink_Like(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InviteLink LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Deleter) InviteLink_Eq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InviteLink = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Deleter) InviteLink_NotEq(val string) *__Group_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InviteLink != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Group_Updater) GroupKey_In(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupKey_NotIn(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Updater) GroupKey_Like(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) GroupKey_Eq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupKey_NotEq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) GroupName_In(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) GroupName_NotIn(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Updater) GroupName_Like(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) GroupName_Eq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) GroupName_NotEq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) UserName_In(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) UserName_NotIn(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Updater) UserName_Like(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) UserName_Eq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) UserName_NotEq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) About_In(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) About_NotIn(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Updater) About_Like(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) About_Eq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) About_NotEq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Updater) InviteLink_In(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InviteLink IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Updater) InviteLink_NotIn(ins []string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InviteLink NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Updater) InviteLink_Like(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InviteLink LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Updater) InviteLink_Eq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InviteLink = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Updater) InviteLink_NotEq(val string) *__Group_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InviteLink != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Group_Selector) GroupKey_In(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupKey IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupKey_NotIn(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupKey NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Selector) GroupKey_Like(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupKey LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) GroupKey_Eq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupKey = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupKey_NotEq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupKey != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) GroupName_In(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) GroupName_NotIn(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " GroupName NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Selector) GroupName_Like(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) GroupName_Eq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) GroupName_NotEq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " GroupName != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) UserName_In(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) UserName_NotIn(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Selector) UserName_Like(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) UserName_Eq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) UserName_NotEq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) About_In(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) About_NotIn(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Selector) About_Like(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) About_Eq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) About_NotEq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Group_Selector) InviteLink_In(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InviteLink IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Group_Selector) InviteLink_NotIn(ins []string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " InviteLink NOT IN(" + u.nextDollars(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Group_Selector) InviteLink_Like(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InviteLink LIKE " + u.nextDollar()
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Group_Selector) InviteLink_Eq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InviteLink = " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Group_Selector) InviteLink_NotEq(val string) *__Group_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " InviteLink != " + d.nextDollar()
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Group_Updater) GroupId(newVal int) *__Group_Updater {
	up := updateCol{" GroupId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" GroupId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) GroupId_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" GroupId = GroupId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" GroupId = GroupId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" GroupId = GroupId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" GroupId = GroupId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Group_Updater) GroupKey(newVal string) *__Group_Updater {
	up := updateCol{"GroupKey = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" GroupKey = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Group_Updater) GroupName(newVal string) *__Group_Updater {
	up := updateCol{"GroupName = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" GroupName = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Group_Updater) UserName(newVal string) *__Group_Updater {
	up := updateCol{"UserName = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" UserName = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Group_Updater) IsSuperGroup(newVal int) *__Group_Updater {
	up := updateCol{" IsSuperGroup = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsSuperGroup = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) IsSuperGroup_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" IsSuperGroup = IsSuperGroup+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsSuperGroup = IsSuperGroup+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsSuperGroup = IsSuperGroup- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsSuperGroup = IsSuperGroup- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) HashTagId(newVal int) *__Group_Updater {
	up := updateCol{" HashTagId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" HashTagId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) HashTagId_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" HashTagId = HashTagId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" HashTagId = HashTagId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" HashTagId = HashTagId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" HashTagId = HashTagId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) CreatorUserId(newVal int) *__Group_Updater {
	up := updateCol{" CreatorUserId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatorUserId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) CreatorUserId_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" CreatorUserId = CreatorUserId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatorUserId = CreatorUserId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatorUserId = CreatorUserId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatorUserId = CreatorUserId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) GroupPrivacy(newVal int) *__Group_Updater {
	up := updateCol{" GroupPrivacy = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" GroupPrivacy = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) GroupPrivacy_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" GroupPrivacy = GroupPrivacy+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" GroupPrivacy = GroupPrivacy+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" GroupPrivacy = GroupPrivacy- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" GroupPrivacy = GroupPrivacy- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) HistoryViewAble(newVal int) *__Group_Updater {
	up := updateCol{" HistoryViewAble = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" HistoryViewAble = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) HistoryViewAble_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" HistoryViewAble = HistoryViewAble+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" HistoryViewAble = HistoryViewAble+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" HistoryViewAble = HistoryViewAble- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" HistoryViewAble = HistoryViewAble- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) Seq(newVal int) *__Group_Updater {
	up := updateCol{" Seq = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" Seq = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) Seq_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" Seq = Seq+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" Seq = Seq+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" Seq = Seq- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" Seq = Seq- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) LastMsgId(newVal int) *__Group_Updater {
	up := updateCol{" LastMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" LastMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) LastMsgId_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" LastMsgId = LastMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" LastMsgId = LastMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" LastMsgId = LastMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" LastMsgId = LastMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) PinedMsgId(newVal int) *__Group_Updater {
	up := updateCol{" PinedMsgId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" PinedMsgId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) PinedMsgId_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" PinedMsgId = PinedMsgId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" PinedMsgId = PinedMsgId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" PinedMsgId = PinedMsgId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" PinedMsgId = PinedMsgId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) AvatarRefId(newVal int) *__Group_Updater {
	up := updateCol{" AvatarRefId = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" AvatarRefId = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) AvatarRefId_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" AvatarRefId = AvatarRefId+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" AvatarRefId = AvatarRefId+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" AvatarRefId = AvatarRefId- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" AvatarRefId = AvatarRefId- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) AvatarCount(newVal int) *__Group_Updater {
	up := updateCol{" AvatarCount = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" AvatarCount = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) AvatarCount_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" AvatarCount = AvatarCount+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" AvatarCount = AvatarCount+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" AvatarCount = AvatarCount- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" AvatarCount = AvatarCount- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Group_Updater) About(newVal string) *__Group_Updater {
	up := updateCol{"About = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" About = "+ u.nextDollar()] = newVal
	return u
}

//ints

//string
func (u *__Group_Updater) InviteLink(newVal string) *__Group_Updater {
	up := updateCol{"InviteLink = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" InviteLink = "+ u.nextDollar()] = newVal
	return u
}

//ints

func (u *__Group_Updater) MembersCount(newVal int) *__Group_Updater {
	up := updateCol{" MembersCount = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" MembersCount = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) MembersCount_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" MembersCount = MembersCount+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" MembersCount = MembersCount+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" MembersCount = MembersCount- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" MembersCount = MembersCount- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) SortTime(newVal int) *__Group_Updater {
	up := updateCol{" SortTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" SortTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) SortTime_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" SortTime = SortTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" SortTime = SortTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" SortTime = SortTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" SortTime = SortTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) CreatedTime(newVal int) *__Group_Updater {
	up := updateCol{" CreatedTime = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" CreatedTime = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) CreatedTime_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" CreatedTime = CreatedTime+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" CreatedTime = CreatedTime+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" CreatedTime = CreatedTime- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" CreatedTime = CreatedTime- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Group_Updater) IsMute(newVal int) *__Group_Updater {
	up := updateCol{" IsMute = " + u.nextDollar(), newVal}
	u.updates = append(u.updates, up)
	// u.updates[" IsMute = " + u.nextDollar()] = newVal
	return u
}

func (u *__Group_Updater) IsMute_Increment(count int) *__Group_Updater {
	if count > 0 {
		up := updateCol{" IsMute = IsMute+ " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		//u.updates[" IsMute = IsMute+ " + u.nextDollar()] = count
	}

	if count < 0 {
		up := updateCol{" IsMute = IsMute- " + u.nextDollar(), count}
		u.updates = append(u.updates, up)
		// u.updates[" IsMute = IsMute- " + u.nextDollar() ] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Group_Selector) OrderBy_GroupId_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupId DESC "
	return u
}

func (u *__Group_Selector) OrderBy_GroupId_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupId ASC "
	return u
}

func (u *__Group_Selector) Select_GroupId() *__Group_Selector {
	u.selectCol = "GroupId"
	return u
}

func (u *__Group_Selector) OrderBy_GroupKey_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupKey DESC "
	return u
}

func (u *__Group_Selector) OrderBy_GroupKey_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupKey ASC "
	return u
}

func (u *__Group_Selector) Select_GroupKey() *__Group_Selector {
	u.selectCol = "GroupKey"
	return u
}

func (u *__Group_Selector) OrderBy_GroupName_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupName DESC "
	return u
}

func (u *__Group_Selector) OrderBy_GroupName_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupName ASC "
	return u
}

func (u *__Group_Selector) Select_GroupName() *__Group_Selector {
	u.selectCol = "GroupName"
	return u
}

func (u *__Group_Selector) OrderBy_UserName_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY UserName DESC "
	return u
}

func (u *__Group_Selector) OrderBy_UserName_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY UserName ASC "
	return u
}

func (u *__Group_Selector) Select_UserName() *__Group_Selector {
	u.selectCol = "UserName"
	return u
}

func (u *__Group_Selector) OrderBy_IsSuperGroup_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY IsSuperGroup DESC "
	return u
}

func (u *__Group_Selector) OrderBy_IsSuperGroup_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY IsSuperGroup ASC "
	return u
}

func (u *__Group_Selector) Select_IsSuperGroup() *__Group_Selector {
	u.selectCol = "IsSuperGroup"
	return u
}

func (u *__Group_Selector) OrderBy_HashTagId_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY HashTagId DESC "
	return u
}

func (u *__Group_Selector) OrderBy_HashTagId_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY HashTagId ASC "
	return u
}

func (u *__Group_Selector) Select_HashTagId() *__Group_Selector {
	u.selectCol = "HashTagId"
	return u
}

func (u *__Group_Selector) OrderBy_CreatorUserId_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY CreatorUserId DESC "
	return u
}

func (u *__Group_Selector) OrderBy_CreatorUserId_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY CreatorUserId ASC "
	return u
}

func (u *__Group_Selector) Select_CreatorUserId() *__Group_Selector {
	u.selectCol = "CreatorUserId"
	return u
}

func (u *__Group_Selector) OrderBy_GroupPrivacy_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupPrivacy DESC "
	return u
}

func (u *__Group_Selector) OrderBy_GroupPrivacy_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY GroupPrivacy ASC "
	return u
}

func (u *__Group_Selector) Select_GroupPrivacy() *__Group_Selector {
	u.selectCol = "GroupPrivacy"
	return u
}

func (u *__Group_Selector) OrderBy_HistoryViewAble_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY HistoryViewAble DESC "
	return u
}

func (u *__Group_Selector) OrderBy_HistoryViewAble_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY HistoryViewAble ASC "
	return u
}

func (u *__Group_Selector) Select_HistoryViewAble() *__Group_Selector {
	u.selectCol = "HistoryViewAble"
	return u
}

func (u *__Group_Selector) OrderBy_Seq_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY Seq DESC "
	return u
}

func (u *__Group_Selector) OrderBy_Seq_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY Seq ASC "
	return u
}

func (u *__Group_Selector) Select_Seq() *__Group_Selector {
	u.selectCol = "Seq"
	return u
}

func (u *__Group_Selector) OrderBy_LastMsgId_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY LastMsgId DESC "
	return u
}

func (u *__Group_Selector) OrderBy_LastMsgId_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY LastMsgId ASC "
	return u
}

func (u *__Group_Selector) Select_LastMsgId() *__Group_Selector {
	u.selectCol = "LastMsgId"
	return u
}

func (u *__Group_Selector) OrderBy_PinedMsgId_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY PinedMsgId DESC "
	return u
}

func (u *__Group_Selector) OrderBy_PinedMsgId_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY PinedMsgId ASC "
	return u
}

func (u *__Group_Selector) Select_PinedMsgId() *__Group_Selector {
	u.selectCol = "PinedMsgId"
	return u
}

func (u *__Group_Selector) OrderBy_AvatarRefId_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY AvatarRefId DESC "
	return u
}

func (u *__Group_Selector) OrderBy_AvatarRefId_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY AvatarRefId ASC "
	return u
}

func (u *__Group_Selector) Select_AvatarRefId() *__Group_Selector {
	u.selectCol = "AvatarRefId"
	return u
}

func (u *__Group_Selector) OrderBy_AvatarCount_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY AvatarCount DESC "
	return u
}

func (u *__Group_Selector) OrderBy_AvatarCount_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY AvatarCount ASC "
	return u
}

func (u *__Group_Selector) Select_AvatarCount() *__Group_Selector {
	u.selectCol = "AvatarCount"
	return u
}

func (u *__Group_Selector) OrderBy_About_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY About DESC "
	return u
}

func (u *__Group_Selector) OrderBy_About_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY About ASC "
	return u
}

func (u *__Group_Selector) Select_About() *__Group_Selector {
	u.selectCol = "About"
	return u
}

func (u *__Group_Selector) OrderBy_InviteLink_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY InviteLink DESC "
	return u
}

func (u *__Group_Selector) OrderBy_InviteLink_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY InviteLink ASC "
	return u
}

func (u *__Group_Selector) Select_InviteLink() *__Group_Selector {
	u.selectCol = "InviteLink"
	return u
}

func (u *__Group_Selector) OrderBy_MembersCount_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY MembersCount DESC "
	return u
}

func (u *__Group_Selector) OrderBy_MembersCount_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY MembersCount ASC "
	return u
}

func (u *__Group_Selector) Select_MembersCount() *__Group_Selector {
	u.selectCol = "MembersCount"
	return u
}

func (u *__Group_Selector) OrderBy_SortTime_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY SortTime DESC "
	return u
}

func (u *__Group_Selector) OrderBy_SortTime_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY SortTime ASC "
	return u
}

func (u *__Group_Selector) Select_SortTime() *__Group_Selector {
	u.selectCol = "SortTime"
	return u
}

func (u *__Group_Selector) OrderBy_CreatedTime_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Group_Selector) OrderBy_CreatedTime_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Group_Selector) Select_CreatedTime() *__Group_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Group_Selector) OrderBy_IsMute_Desc() *__Group_Selector {
	u.orderBy = " ORDER BY IsMute DESC "
	return u
}

func (u *__Group_Selector) OrderBy_IsMute_Asc() *__Group_Selector {
	u.orderBy = " ORDER BY IsMute ASC "
	return u
}

func (u *__Group_Selector) Select_IsMute() *__Group_Selector {
	u.selectCol = "IsMute"
	return u
}

func (u *__Group_Selector) Limit(num int) *__Group_Selector {
	u.limit = num
	return u
}

func (u *__Group_Selector) Offset(num int) *__Group_Selector {
	u.offset = num
	return u
}

func (u *__Group_Selector) Order_Rand() *__Group_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Group_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun_chat.group"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Group_Selector) GetRow(db *sqlx.DB) (*Group, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Group {
		XOLog(sqlstr, whereArgs)
	}

	row := &Group{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnGroup_LoadOne(row)

	return row, nil
}

func (u *__Group_Selector) GetRows(db *sqlx.DB) ([]*Group, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Group {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*Group
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGroup_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__Group_Selector) GetRows2(db *sqlx.DB) ([]Group, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Group {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*Group
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnGroup_LoadMany(rows)

	rows2 := make([]Group, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__Group_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Group {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__Group_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Group {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Group_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Group {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__Group_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.Group {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Group_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	/*for up, newVal := range u.updates {
	    sqlUpdateArr = append(sqlUpdateArr, up)
	    updateArgs = append(updateArgs, newVal)
	}*/
	for _, up := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up.col)
		updateArgs = append(updateArgs, up.val)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun_chat.group SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.Group {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__Group_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun_chat.group WHERE " + wheresStr

	// run query
	if LogTableSqlReq.Group {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Group ////////////////

func MassInsert_Group(rows []Group, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)

	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(20, ln, true)
	// sql query
	sqlstr := "INSERT INTO sun_chat.group (" +
		"GroupId, GroupKey, GroupName, UserName, IsSuperGroup, HashTagId, CreatorUserId, GroupPrivacy, HistoryViewAble, Seq, LastMsgId, PinedMsgId, AvatarRefId, AvatarCount, About, InviteLink, MembersCount, SortTime, CreatedTime, IsMute" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.GroupKey)
		vals = append(vals, row.GroupName)
		vals = append(vals, row.UserName)
		vals = append(vals, row.IsSuperGroup)
		vals = append(vals, row.HashTagId)
		vals = append(vals, row.CreatorUserId)
		vals = append(vals, row.GroupPrivacy)
		vals = append(vals, row.HistoryViewAble)
		vals = append(vals, row.Seq)
		vals = append(vals, row.LastMsgId)
		vals = append(vals, row.PinedMsgId)
		vals = append(vals, row.AvatarRefId)
		vals = append(vals, row.AvatarCount)
		vals = append(vals, row.About)
		vals = append(vals, row.InviteLink)
		vals = append(vals, row.MembersCount)
		vals = append(vals, row.SortTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.IsMute)

	}

	if LogTableSqlReq.Group {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_Group(rows []Group, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	// insVals_:= strings.Repeat(s, ln)
	// insVals := insVals_[0:len(insVals_)-1]
	insVals := helper.SqlManyDollars(20, ln, true)
	// sql query
	sqlstr := "REPLACE INTO sun_chat.group (" +
		"GroupId, GroupKey, GroupName, UserName, IsSuperGroup, HashTagId, CreatorUserId, GroupPrivacy, HistoryViewAble, Seq, LastMsgId, PinedMsgId, AvatarRefId, AvatarCount, About, InviteLink, MembersCount, SortTime, CreatedTime, IsMute" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.GroupId)
		vals = append(vals, row.GroupKey)
		vals = append(vals, row.GroupName)
		vals = append(vals, row.UserName)
		vals = append(vals, row.IsSuperGroup)
		vals = append(vals, row.HashTagId)
		vals = append(vals, row.CreatorUserId)
		vals = append(vals, row.GroupPrivacy)
		vals = append(vals, row.HistoryViewAble)
		vals = append(vals, row.Seq)
		vals = append(vals, row.LastMsgId)
		vals = append(vals, row.PinedMsgId)
		vals = append(vals, row.AvatarRefId)
		vals = append(vals, row.AvatarCount)
		vals = append(vals, row.About)
		vals = append(vals, row.InviteLink)
		vals = append(vals, row.MembersCount)
		vals = append(vals, row.SortTime)
		vals = append(vals, row.CreatedTime)
		vals = append(vals, row.IsMute)

	}

	if LogTableSqlReq.Group {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.Group {
			XOLogErr(err)
		}
		return err
	}

	return nil

}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
