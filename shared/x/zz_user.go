package x

// GENERATED BY XO. DO NOT EDIT.
import (
	"errors"
	"strings"
	//"time"
	"ms/sun/helper"
	"strconv"

	"github.com/jmoiron/sqlx"
) // (shortname .TableNameGo "err" "res" "sqlstr" "db" "XOLog") -}}//(schema .Schema .Table.TableName) -}}// .TableNameGo}}// User represents a row from 'sun.user'.

// Manualy copy this to project
type User__ struct {
	UserId               int    `json:"UserId"`               // UserId -
	UserName             string `json:"UserName"`             // UserName -
	UserNameLower        string `json:"UserNameLower"`        // UserNameLower -
	FirstName            string `json:"FirstName"`            // FirstName -
	LastName             string `json:"LastName"`             // LastName -
	UserTypeEnum         int    `json:"UserTypeEnum"`         // UserTypeEnum -
	UserLevelEnum        int    `json:"UserLevelEnum"`        // UserLevelEnum -
	AvatarId             int    `json:"AvatarId"`             // AvatarId -
	ProfilePrivacyEnum   int    `json:"ProfilePrivacyEnum"`   // ProfilePrivacyEnum -
	Phone                int    `json:"Phone"`                // Phone -
	About                string `json:"About"`                // About -
	Email                string `json:"Email"`                // Email -
	PasswordHash         string `json:"PasswordHash"`         // PasswordHash -
	PasswordSalt         string `json:"PasswordSalt"`         // PasswordSalt -
	PostSeq              int    `json:"PostSeq"`              // PostSeq -
	FollowersCount       int    `json:"FollowersCount"`       // FollowersCount -
	FollowingCount       int    `json:"FollowingCount"`       // FollowingCount -
	PostsCount           int    `json:"PostsCount"`           // PostsCount -
	MediaCount           int    `json:"MediaCount"`           // MediaCount -
	LikesCount           int    `json:"LikesCount"`           // LikesCount -
	ResharedCount        int    `json:"ResharedCount"`        // ResharedCount -
	LastActionTime       int    `json:"LastActionTime"`       // LastActionTime -
	LastPostTime         int    `json:"LastPostTime"`         // LastPostTime -
	PrimaryFollowingList int    `json:"PrimaryFollowingList"` // PrimaryFollowingList -
	CreatedSe            int    `json:"CreatedSe"`            // CreatedSe -
	UpdatedMs            int    `json:"UpdatedMs"`            // UpdatedMs -
	OnlinePrivacyEnum    int    `json:"OnlinePrivacyEnum"`    // OnlinePrivacyEnum -
	LastActivityTime     int    `json:"LastActivityTime"`     // LastActivityTime -
	Phone2               string `json:"Phone2"`               // Phone2 -
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO sun.user (` +
		`UserName, UserNameLower, FirstName, LastName, UserTypeEnum, UserLevelEnum, AvatarId, ProfilePrivacyEnum, Phone, About, Email, PasswordHash, PasswordSalt, PostSeq, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedSe, UpdatedMs, OnlinePrivacyEnum, LastActivityTime, Phone2` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.User {
		XOLog(sqlstr, u.UserName, u.UserNameLower, u.FirstName, u.LastName, u.UserTypeEnum, u.UserLevelEnum, u.AvatarId, u.ProfilePrivacyEnum, u.Phone, u.About, u.Email, u.PasswordHash, u.PasswordSalt, u.PostSeq, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedSe, u.UpdatedMs, u.OnlinePrivacyEnum, u.LastActivityTime, u.Phone2)
	}
	res, err := db.Exec(sqlstr, u.UserName, u.UserNameLower, u.FirstName, u.LastName, u.UserTypeEnum, u.UserLevelEnum, u.AvatarId, u.ProfilePrivacyEnum, u.Phone, u.About, u.Email, u.PasswordHash, u.PasswordSalt, u.PostSeq, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedSe, u.UpdatedMs, u.OnlinePrivacyEnum, u.LastActivityTime, u.Phone2)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	u.UserId = int(id)
	u._exists = true

	OnUser_AfterInsert(u)

	return nil
}

// Insert inserts the User to the database.
func (u *User) Replace(db XODB) error {
	var err error

	// sql query

	const sqlstr = `REPLACE INTO sun.user (` +
		`UserName, UserNameLower, FirstName, LastName, UserTypeEnum, UserLevelEnum, AvatarId, ProfilePrivacyEnum, Phone, About, Email, PasswordHash, PasswordSalt, PostSeq, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedSe, UpdatedMs, OnlinePrivacyEnum, LastActivityTime, Phone2` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	if LogTableSqlReq.User {
		XOLog(sqlstr, u.UserName, u.UserNameLower, u.FirstName, u.LastName, u.UserTypeEnum, u.UserLevelEnum, u.AvatarId, u.ProfilePrivacyEnum, u.Phone, u.About, u.Email, u.PasswordHash, u.PasswordSalt, u.PostSeq, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedSe, u.UpdatedMs, u.OnlinePrivacyEnum, u.LastActivityTime, u.Phone2)
	}
	res, err := db.Exec(sqlstr, u.UserName, u.UserNameLower, u.FirstName, u.LastName, u.UserTypeEnum, u.UserLevelEnum, u.AvatarId, u.ProfilePrivacyEnum, u.Phone, u.About, u.Email, u.PasswordHash, u.PasswordSalt, u.PostSeq, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedSe, u.UpdatedMs, u.OnlinePrivacyEnum, u.LastActivityTime, u.Phone2)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return err
	}

	// set primary key and existence
	u.UserId = int(id)
	u._exists = true

	OnUser_AfterInsert(u)

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sun.user SET ` +
		`UserName = ?, UserNameLower = ?, FirstName = ?, LastName = ?, UserTypeEnum = ?, UserLevelEnum = ?, AvatarId = ?, ProfilePrivacyEnum = ?, Phone = ?, About = ?, Email = ?, PasswordHash = ?, PasswordSalt = ?, PostSeq = ?, FollowersCount = ?, FollowingCount = ?, PostsCount = ?, MediaCount = ?, LikesCount = ?, ResharedCount = ?, LastActionTime = ?, LastPostTime = ?, PrimaryFollowingList = ?, CreatedSe = ?, UpdatedMs = ?, OnlinePrivacyEnum = ?, LastActivityTime = ?, Phone2 = ?` +
		` WHERE UserId = ?`

	// run query
	if LogTableSqlReq.User {
		XOLog(sqlstr, u.UserName, u.UserNameLower, u.FirstName, u.LastName, u.UserTypeEnum, u.UserLevelEnum, u.AvatarId, u.ProfilePrivacyEnum, u.Phone, u.About, u.Email, u.PasswordHash, u.PasswordSalt, u.PostSeq, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedSe, u.UpdatedMs, u.OnlinePrivacyEnum, u.LastActivityTime, u.Phone2, u.UserId)
	}
	_, err = db.Exec(sqlstr, u.UserName, u.UserNameLower, u.FirstName, u.LastName, u.UserTypeEnum, u.UserLevelEnum, u.AvatarId, u.ProfilePrivacyEnum, u.Phone, u.About, u.Email, u.PasswordHash, u.PasswordSalt, u.PostSeq, u.FollowersCount, u.FollowingCount, u.PostsCount, u.MediaCount, u.LikesCount, u.ResharedCount, u.LastActionTime, u.LastPostTime, u.PrimaryFollowingList, u.CreatedSe, u.UpdatedMs, u.OnlinePrivacyEnum, u.LastActivityTime, u.Phone2, u.UserId)

	if LogTableSqlReq.User {
		XOLogErr(err)
	}
	OnUser_AfterUpdate(u)

	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Replace(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sun.user WHERE UserId = ?`

	// run query
	if LogTableSqlReq.User {
		XOLog(sqlstr, u.UserId)
	}
	_, err = db.Exec(sqlstr, u.UserId)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return err
	}

	// set deleted
	u._deleted = true

	OnUser_AfterDelete(u)

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.TableNameGo= table name
// _Deleter, _Updater

// orma types
type __User_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __User_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __User_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewUser_Deleter() *__User_Deleter {
	d := __User_Deleter{whereSep: " AND "}
	return &d
}

func NewUser_Updater() *__User_Updater {
	u := __User_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewUser_Selector() *__User_Selector {
	u := __User_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__User_Deleter) Or() *__User_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__User_Deleter) UserId_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserId_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserId_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UserId_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserId_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserId_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserId_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserId_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserId_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) UserTypeEnum_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserTypeEnum_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserTypeEnum_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UserTypeEnum_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserTypeEnum_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserTypeEnum_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserTypeEnum_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserTypeEnum_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserTypeEnum_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) UserLevelEnum_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserLevelEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserLevelEnum_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserLevelEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserLevelEnum_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserLevelEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UserLevelEnum_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserLevelEnum_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserLevelEnum_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserLevelEnum_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserLevelEnum_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserLevelEnum_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) AvatarId_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) AvatarId_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) AvatarId_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) AvatarId_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AvatarId_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AvatarId_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AvatarId_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AvatarId_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) AvatarId_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) ProfilePrivacyEnum_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) ProfilePrivacyEnum_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) ProfilePrivacyEnum_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) ProfilePrivacyEnum_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ProfilePrivacyEnum_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ProfilePrivacyEnum_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ProfilePrivacyEnum_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ProfilePrivacyEnum_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ProfilePrivacyEnum_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) Phone_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Phone_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Phone_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Phone_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Phone_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Phone_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Phone_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Phone_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Phone_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PostSeq_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PostSeq_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PostSeq_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PostSeq_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostSeq_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostSeq_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostSeq_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostSeq_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostSeq_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FollowersCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowersCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowersCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FollowersCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowersCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FollowingCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowingCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FollowingCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FollowingCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FollowingCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PostsCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PostsCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PostsCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PostsCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PostsCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) MediaCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) MediaCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) MediaCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) MediaCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) MediaCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LikesCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LikesCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LikesCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LikesCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LikesCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) ResharedCount_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) ResharedCount_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) ResharedCount_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) ResharedCount_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) ResharedCount_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastActionTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActionTime_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActionTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastActionTime_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActionTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastPostTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastPostTime_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastPostTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastPostTime_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastPostTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PrimaryFollowingList_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PrimaryFollowingList_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PrimaryFollowingList_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PrimaryFollowingList_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PrimaryFollowingList_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) CreatedSe_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) CreatedSe_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) CreatedSe_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) CreatedSe_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedSe_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedSe_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedSe_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedSe_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) CreatedSe_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) UpdatedMs_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UpdatedMs_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UpdatedMs_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UpdatedMs_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedMs_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedMs_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedMs_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedMs_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UpdatedMs_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) OnlinePrivacyEnum_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) OnlinePrivacyEnum_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) OnlinePrivacyEnum_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) OnlinePrivacyEnum_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) OnlinePrivacyEnum_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) OnlinePrivacyEnum_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) OnlinePrivacyEnum_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) OnlinePrivacyEnum_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) OnlinePrivacyEnum_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastActivityTime_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActivityTime_Ins(ins ...int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastActivityTime_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastActivityTime_Eq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_NotEq(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastActivityTime_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__User_Updater) Or() *__User_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__User_Updater) UserId_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserId_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserId_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UserId_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserId_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserId_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserId_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserId_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserId_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) UserTypeEnum_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserTypeEnum_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserTypeEnum_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UserTypeEnum_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserTypeEnum_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserTypeEnum_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserTypeEnum_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserTypeEnum_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserTypeEnum_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) UserLevelEnum_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserLevelEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserLevelEnum_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserLevelEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserLevelEnum_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserLevelEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UserLevelEnum_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserLevelEnum_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserLevelEnum_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserLevelEnum_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserLevelEnum_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserLevelEnum_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) AvatarId_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) AvatarId_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) AvatarId_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) AvatarId_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AvatarId_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AvatarId_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AvatarId_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AvatarId_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) AvatarId_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) ProfilePrivacyEnum_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) ProfilePrivacyEnum_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) ProfilePrivacyEnum_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) ProfilePrivacyEnum_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ProfilePrivacyEnum_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ProfilePrivacyEnum_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ProfilePrivacyEnum_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ProfilePrivacyEnum_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ProfilePrivacyEnum_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) Phone_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Phone_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Phone_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Phone_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Phone_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Phone_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Phone_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Phone_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Phone_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PostSeq_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PostSeq_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PostSeq_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PostSeq_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostSeq_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostSeq_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostSeq_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostSeq_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostSeq_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FollowersCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowersCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowersCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FollowersCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowersCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FollowingCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowingCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FollowingCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FollowingCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FollowingCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PostsCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PostsCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PostsCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PostsCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PostsCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) MediaCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) MediaCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) MediaCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) MediaCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) MediaCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LikesCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LikesCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LikesCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LikesCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LikesCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) ResharedCount_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) ResharedCount_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) ResharedCount_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) ResharedCount_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) ResharedCount_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastActionTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActionTime_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActionTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastActionTime_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActionTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastPostTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastPostTime_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastPostTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastPostTime_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastPostTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PrimaryFollowingList_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PrimaryFollowingList_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PrimaryFollowingList_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PrimaryFollowingList_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PrimaryFollowingList_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) CreatedSe_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) CreatedSe_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) CreatedSe_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) CreatedSe_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedSe_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedSe_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedSe_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedSe_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) CreatedSe_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) UpdatedMs_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UpdatedMs_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UpdatedMs_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UpdatedMs_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedMs_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedMs_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedMs_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedMs_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UpdatedMs_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) OnlinePrivacyEnum_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) OnlinePrivacyEnum_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) OnlinePrivacyEnum_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) OnlinePrivacyEnum_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) OnlinePrivacyEnum_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) OnlinePrivacyEnum_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) OnlinePrivacyEnum_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) OnlinePrivacyEnum_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) OnlinePrivacyEnum_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastActivityTime_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActivityTime_Ins(ins ...int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastActivityTime_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastActivityTime_Eq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_NotEq(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastActivityTime_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__User_Selector) Or() *__User_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__User_Selector) UserId_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserId_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserId_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UserId_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserId_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserId_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserId_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserId_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserId_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) UserTypeEnum_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserTypeEnum_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserTypeEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserTypeEnum_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserTypeEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UserTypeEnum_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserTypeEnum_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserTypeEnum_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserTypeEnum_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserTypeEnum_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserTypeEnum_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserTypeEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) UserLevelEnum_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserLevelEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserLevelEnum_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserLevelEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserLevelEnum_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserLevelEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UserLevelEnum_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserLevelEnum_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserLevelEnum_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserLevelEnum_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserLevelEnum_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserLevelEnum_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserLevelEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) AvatarId_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) AvatarId_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) AvatarId_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AvatarId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) AvatarId_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AvatarId_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AvatarId_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AvatarId_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AvatarId_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) AvatarId_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AvatarId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) ProfilePrivacyEnum_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) ProfilePrivacyEnum_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) ProfilePrivacyEnum_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) ProfilePrivacyEnum_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ProfilePrivacyEnum_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ProfilePrivacyEnum_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ProfilePrivacyEnum_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ProfilePrivacyEnum_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ProfilePrivacyEnum_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ProfilePrivacyEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) Phone_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Phone_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Phone_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Phone_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Phone_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Phone_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Phone_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Phone_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Phone_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PostSeq_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PostSeq_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostSeq IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PostSeq_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostSeq NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PostSeq_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostSeq_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostSeq_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostSeq_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostSeq_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostSeq_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostSeq >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FollowersCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowersCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowersCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowersCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FollowersCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowersCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowersCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FollowingCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowingCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FollowingCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowingCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FollowingCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FollowingCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowingCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PostsCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PostsCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PostsCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostsCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PostsCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PostsCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostsCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) MediaCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) MediaCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) MediaCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MediaCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) MediaCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) MediaCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MediaCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LikesCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LikesCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LikesCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LikesCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LikesCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LikesCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LikesCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) ResharedCount_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) ResharedCount_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) ResharedCount_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ResharedCount NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) ResharedCount_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) ResharedCount_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ResharedCount >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastActionTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActionTime_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActionTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActionTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastActionTime_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActionTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActionTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastPostTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastPostTime_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastPostTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastPostTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastPostTime_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastPostTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastPostTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PrimaryFollowingList_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PrimaryFollowingList_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PrimaryFollowingList_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PrimaryFollowingList NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PrimaryFollowingList_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PrimaryFollowingList_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PrimaryFollowingList >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) CreatedSe_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) CreatedSe_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) CreatedSe_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedSe NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) CreatedSe_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedSe_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedSe_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedSe_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedSe_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) CreatedSe_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedSe >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) UpdatedMs_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UpdatedMs_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UpdatedMs_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UpdatedMs NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UpdatedMs_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedMs_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedMs_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedMs_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedMs_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UpdatedMs_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UpdatedMs >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) OnlinePrivacyEnum_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) OnlinePrivacyEnum_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) OnlinePrivacyEnum_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) OnlinePrivacyEnum_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) OnlinePrivacyEnum_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) OnlinePrivacyEnum_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) OnlinePrivacyEnum_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) OnlinePrivacyEnum_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) OnlinePrivacyEnum_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " OnlinePrivacyEnum >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastActivityTime_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActivityTime_Ins(ins ...int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastActivityTime_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastActivityTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastActivityTime_Eq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_NotEq(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastActivityTime_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastActivityTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__User_Deleter) UserName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) UserName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UserName_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserName_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) UserNameLower_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserNameLower IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserNameLower_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserNameLower NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) UserNameLower_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserNameLower LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UserNameLower_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserNameLower = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) UserNameLower_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserNameLower != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FirstName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FirstName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) FirstName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FirstName_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) FirstName_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastName_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) LastName_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) About_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) About_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) About_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) About_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) About_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) Email_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Email_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) Email_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Email_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Email_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PasswordHash_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PasswordHash_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) PasswordHash_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PasswordHash_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PasswordHash_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) PasswordSalt_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) PasswordSalt_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) PasswordSalt_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) PasswordSalt_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) PasswordSalt_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) Phone2_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone2 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Phone2_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone2 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) Phone2_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone2 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Phone2_Eq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone2 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Phone2_NotEq(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone2 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__User_Updater) UserName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) UserName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UserName_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserName_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) UserNameLower_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserNameLower IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserNameLower_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserNameLower NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) UserNameLower_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserNameLower LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UserNameLower_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserNameLower = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) UserNameLower_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserNameLower != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FirstName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FirstName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) FirstName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FirstName_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) FirstName_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastName_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) LastName_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) About_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) About_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) About_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) About_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) About_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) Email_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Email_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) Email_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Email_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Email_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PasswordHash_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PasswordHash_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) PasswordHash_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PasswordHash_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PasswordHash_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) PasswordSalt_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) PasswordSalt_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) PasswordSalt_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) PasswordSalt_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) PasswordSalt_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) Phone2_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone2 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Phone2_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone2 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) Phone2_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone2 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Phone2_Eq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone2 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Phone2_NotEq(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone2 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__User_Selector) UserName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) UserName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UserName_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserName_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) UserNameLower_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserNameLower IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserNameLower_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserNameLower NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) UserNameLower_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserNameLower LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UserNameLower_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserNameLower = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) UserNameLower_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserNameLower != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FirstName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FirstName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) FirstName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FirstName_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) FirstName_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastName_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) LastName_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) About_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) About_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) About_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) About_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) About_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) Email_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Email_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Email NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) Email_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Email_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Email_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Email != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PasswordHash_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PasswordHash_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordHash NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) PasswordHash_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PasswordHash_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PasswordHash_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordHash != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) PasswordSalt_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) PasswordSalt_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PasswordSalt NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) PasswordSalt_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) PasswordSalt_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) PasswordSalt_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PasswordSalt != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) Phone2_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone2 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Phone2_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Phone2 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) Phone2_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone2 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Phone2_Eq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone2 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Phone2_NotEq(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Phone2 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__User_Updater) UserId(newVal int) *__User_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__User_Updater) UserId_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) UserName(newVal string) *__User_Updater {
	u.updates[" UserName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) UserNameLower(newVal string) *__User_Updater {
	u.updates[" UserNameLower = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) FirstName(newVal string) *__User_Updater {
	u.updates[" FirstName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) LastName(newVal string) *__User_Updater {
	u.updates[" LastName = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) UserTypeEnum(newVal int) *__User_Updater {
	u.updates[" UserTypeEnum = ? "] = newVal
	return u
}

func (u *__User_Updater) UserTypeEnum_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" UserTypeEnum = UserTypeEnum+? "] = count
	}

	if count < 0 {
		u.updates[" UserTypeEnum = UserTypeEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) UserLevelEnum(newVal int) *__User_Updater {
	u.updates[" UserLevelEnum = ? "] = newVal
	return u
}

func (u *__User_Updater) UserLevelEnum_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" UserLevelEnum = UserLevelEnum+? "] = count
	}

	if count < 0 {
		u.updates[" UserLevelEnum = UserLevelEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) AvatarId(newVal int) *__User_Updater {
	u.updates[" AvatarId = ? "] = newVal
	return u
}

func (u *__User_Updater) AvatarId_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" AvatarId = AvatarId+? "] = count
	}

	if count < 0 {
		u.updates[" AvatarId = AvatarId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) ProfilePrivacyEnum(newVal int) *__User_Updater {
	u.updates[" ProfilePrivacyEnum = ? "] = newVal
	return u
}

func (u *__User_Updater) ProfilePrivacyEnum_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" ProfilePrivacyEnum = ProfilePrivacyEnum+? "] = count
	}

	if count < 0 {
		u.updates[" ProfilePrivacyEnum = ProfilePrivacyEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) Phone(newVal int) *__User_Updater {
	u.updates[" Phone = ? "] = newVal
	return u
}

func (u *__User_Updater) Phone_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" Phone = Phone+? "] = count
	}

	if count < 0 {
		u.updates[" Phone = Phone-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) About(newVal string) *__User_Updater {
	u.updates[" About = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) Email(newVal string) *__User_Updater {
	u.updates[" Email = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) PasswordHash(newVal string) *__User_Updater {
	u.updates[" PasswordHash = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) PasswordSalt(newVal string) *__User_Updater {
	u.updates[" PasswordSalt = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) PostSeq(newVal int) *__User_Updater {
	u.updates[" PostSeq = ? "] = newVal
	return u
}

func (u *__User_Updater) PostSeq_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" PostSeq = PostSeq+? "] = count
	}

	if count < 0 {
		u.updates[" PostSeq = PostSeq-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) FollowersCount(newVal int) *__User_Updater {
	u.updates[" FollowersCount = ? "] = newVal
	return u
}

func (u *__User_Updater) FollowersCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" FollowersCount = FollowersCount+? "] = count
	}

	if count < 0 {
		u.updates[" FollowersCount = FollowersCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) FollowingCount(newVal int) *__User_Updater {
	u.updates[" FollowingCount = ? "] = newVal
	return u
}

func (u *__User_Updater) FollowingCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" FollowingCount = FollowingCount+? "] = count
	}

	if count < 0 {
		u.updates[" FollowingCount = FollowingCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) PostsCount(newVal int) *__User_Updater {
	u.updates[" PostsCount = ? "] = newVal
	return u
}

func (u *__User_Updater) PostsCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" PostsCount = PostsCount+? "] = count
	}

	if count < 0 {
		u.updates[" PostsCount = PostsCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) MediaCount(newVal int) *__User_Updater {
	u.updates[" MediaCount = ? "] = newVal
	return u
}

func (u *__User_Updater) MediaCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" MediaCount = MediaCount+? "] = count
	}

	if count < 0 {
		u.updates[" MediaCount = MediaCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) LikesCount(newVal int) *__User_Updater {
	u.updates[" LikesCount = ? "] = newVal
	return u
}

func (u *__User_Updater) LikesCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" LikesCount = LikesCount+? "] = count
	}

	if count < 0 {
		u.updates[" LikesCount = LikesCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) ResharedCount(newVal int) *__User_Updater {
	u.updates[" ResharedCount = ? "] = newVal
	return u
}

func (u *__User_Updater) ResharedCount_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" ResharedCount = ResharedCount+? "] = count
	}

	if count < 0 {
		u.updates[" ResharedCount = ResharedCount-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) LastActionTime(newVal int) *__User_Updater {
	u.updates[" LastActionTime = ? "] = newVal
	return u
}

func (u *__User_Updater) LastActionTime_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" LastActionTime = LastActionTime+? "] = count
	}

	if count < 0 {
		u.updates[" LastActionTime = LastActionTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) LastPostTime(newVal int) *__User_Updater {
	u.updates[" LastPostTime = ? "] = newVal
	return u
}

func (u *__User_Updater) LastPostTime_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" LastPostTime = LastPostTime+? "] = count
	}

	if count < 0 {
		u.updates[" LastPostTime = LastPostTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) PrimaryFollowingList(newVal int) *__User_Updater {
	u.updates[" PrimaryFollowingList = ? "] = newVal
	return u
}

func (u *__User_Updater) PrimaryFollowingList_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" PrimaryFollowingList = PrimaryFollowingList+? "] = count
	}

	if count < 0 {
		u.updates[" PrimaryFollowingList = PrimaryFollowingList-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) CreatedSe(newVal int) *__User_Updater {
	u.updates[" CreatedSe = ? "] = newVal
	return u
}

func (u *__User_Updater) CreatedSe_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" CreatedSe = CreatedSe+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedSe = CreatedSe-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) UpdatedMs(newVal int) *__User_Updater {
	u.updates[" UpdatedMs = ? "] = newVal
	return u
}

func (u *__User_Updater) UpdatedMs_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" UpdatedMs = UpdatedMs+? "] = count
	}

	if count < 0 {
		u.updates[" UpdatedMs = UpdatedMs-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) OnlinePrivacyEnum(newVal int) *__User_Updater {
	u.updates[" OnlinePrivacyEnum = ? "] = newVal
	return u
}

func (u *__User_Updater) OnlinePrivacyEnum_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" OnlinePrivacyEnum = OnlinePrivacyEnum+? "] = count
	}

	if count < 0 {
		u.updates[" OnlinePrivacyEnum = OnlinePrivacyEnum-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) LastActivityTime(newVal int) *__User_Updater {
	u.updates[" LastActivityTime = ? "] = newVal
	return u
}

func (u *__User_Updater) LastActivityTime_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" LastActivityTime = LastActivityTime+? "] = count
	}

	if count < 0 {
		u.updates[" LastActivityTime = LastActivityTime-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) Phone2(newVal string) *__User_Updater {
	u.updates[" Phone2 = ? "] = newVal
	return u
}

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__User_Selector) OrderBy_UserId_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__User_Selector) OrderBy_UserId_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__User_Selector) Select_UserId() *__User_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__User_Selector) OrderBy_UserName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UserName DESC "
	return u
}

func (u *__User_Selector) OrderBy_UserName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UserName ASC "
	return u
}

func (u *__User_Selector) Select_UserName() *__User_Selector {
	u.selectCol = "UserName"
	return u
}

func (u *__User_Selector) OrderBy_UserNameLower_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UserNameLower DESC "
	return u
}

func (u *__User_Selector) OrderBy_UserNameLower_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UserNameLower ASC "
	return u
}

func (u *__User_Selector) Select_UserNameLower() *__User_Selector {
	u.selectCol = "UserNameLower"
	return u
}

func (u *__User_Selector) OrderBy_FirstName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FirstName DESC "
	return u
}

func (u *__User_Selector) OrderBy_FirstName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FirstName ASC "
	return u
}

func (u *__User_Selector) Select_FirstName() *__User_Selector {
	u.selectCol = "FirstName"
	return u
}

func (u *__User_Selector) OrderBy_LastName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastName DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastName ASC "
	return u
}

func (u *__User_Selector) Select_LastName() *__User_Selector {
	u.selectCol = "LastName"
	return u
}

func (u *__User_Selector) OrderBy_UserTypeEnum_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UserTypeEnum DESC "
	return u
}

func (u *__User_Selector) OrderBy_UserTypeEnum_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UserTypeEnum ASC "
	return u
}

func (u *__User_Selector) Select_UserTypeEnum() *__User_Selector {
	u.selectCol = "UserTypeEnum"
	return u
}

func (u *__User_Selector) OrderBy_UserLevelEnum_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UserLevelEnum DESC "
	return u
}

func (u *__User_Selector) OrderBy_UserLevelEnum_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UserLevelEnum ASC "
	return u
}

func (u *__User_Selector) Select_UserLevelEnum() *__User_Selector {
	u.selectCol = "UserLevelEnum"
	return u
}

func (u *__User_Selector) OrderBy_AvatarId_Desc() *__User_Selector {
	u.orderBy = " ORDER BY AvatarId DESC "
	return u
}

func (u *__User_Selector) OrderBy_AvatarId_Asc() *__User_Selector {
	u.orderBy = " ORDER BY AvatarId ASC "
	return u
}

func (u *__User_Selector) Select_AvatarId() *__User_Selector {
	u.selectCol = "AvatarId"
	return u
}

func (u *__User_Selector) OrderBy_ProfilePrivacyEnum_Desc() *__User_Selector {
	u.orderBy = " ORDER BY ProfilePrivacyEnum DESC "
	return u
}

func (u *__User_Selector) OrderBy_ProfilePrivacyEnum_Asc() *__User_Selector {
	u.orderBy = " ORDER BY ProfilePrivacyEnum ASC "
	return u
}

func (u *__User_Selector) Select_ProfilePrivacyEnum() *__User_Selector {
	u.selectCol = "ProfilePrivacyEnum"
	return u
}

func (u *__User_Selector) OrderBy_Phone_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Phone DESC "
	return u
}

func (u *__User_Selector) OrderBy_Phone_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Phone ASC "
	return u
}

func (u *__User_Selector) Select_Phone() *__User_Selector {
	u.selectCol = "Phone"
	return u
}

func (u *__User_Selector) OrderBy_About_Desc() *__User_Selector {
	u.orderBy = " ORDER BY About DESC "
	return u
}

func (u *__User_Selector) OrderBy_About_Asc() *__User_Selector {
	u.orderBy = " ORDER BY About ASC "
	return u
}

func (u *__User_Selector) Select_About() *__User_Selector {
	u.selectCol = "About"
	return u
}

func (u *__User_Selector) OrderBy_Email_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Email DESC "
	return u
}

func (u *__User_Selector) OrderBy_Email_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Email ASC "
	return u
}

func (u *__User_Selector) Select_Email() *__User_Selector {
	u.selectCol = "Email"
	return u
}

func (u *__User_Selector) OrderBy_PasswordHash_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordHash DESC "
	return u
}

func (u *__User_Selector) OrderBy_PasswordHash_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordHash ASC "
	return u
}

func (u *__User_Selector) Select_PasswordHash() *__User_Selector {
	u.selectCol = "PasswordHash"
	return u
}

func (u *__User_Selector) OrderBy_PasswordSalt_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordSalt DESC "
	return u
}

func (u *__User_Selector) OrderBy_PasswordSalt_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PasswordSalt ASC "
	return u
}

func (u *__User_Selector) Select_PasswordSalt() *__User_Selector {
	u.selectCol = "PasswordSalt"
	return u
}

func (u *__User_Selector) OrderBy_PostSeq_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PostSeq DESC "
	return u
}

func (u *__User_Selector) OrderBy_PostSeq_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PostSeq ASC "
	return u
}

func (u *__User_Selector) Select_PostSeq() *__User_Selector {
	u.selectCol = "PostSeq"
	return u
}

func (u *__User_Selector) OrderBy_FollowersCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FollowersCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_FollowersCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FollowersCount ASC "
	return u
}

func (u *__User_Selector) Select_FollowersCount() *__User_Selector {
	u.selectCol = "FollowersCount"
	return u
}

func (u *__User_Selector) OrderBy_FollowingCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FollowingCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_FollowingCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FollowingCount ASC "
	return u
}

func (u *__User_Selector) Select_FollowingCount() *__User_Selector {
	u.selectCol = "FollowingCount"
	return u
}

func (u *__User_Selector) OrderBy_PostsCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PostsCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_PostsCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PostsCount ASC "
	return u
}

func (u *__User_Selector) Select_PostsCount() *__User_Selector {
	u.selectCol = "PostsCount"
	return u
}

func (u *__User_Selector) OrderBy_MediaCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY MediaCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_MediaCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY MediaCount ASC "
	return u
}

func (u *__User_Selector) Select_MediaCount() *__User_Selector {
	u.selectCol = "MediaCount"
	return u
}

func (u *__User_Selector) OrderBy_LikesCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LikesCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_LikesCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LikesCount ASC "
	return u
}

func (u *__User_Selector) Select_LikesCount() *__User_Selector {
	u.selectCol = "LikesCount"
	return u
}

func (u *__User_Selector) OrderBy_ResharedCount_Desc() *__User_Selector {
	u.orderBy = " ORDER BY ResharedCount DESC "
	return u
}

func (u *__User_Selector) OrderBy_ResharedCount_Asc() *__User_Selector {
	u.orderBy = " ORDER BY ResharedCount ASC "
	return u
}

func (u *__User_Selector) Select_ResharedCount() *__User_Selector {
	u.selectCol = "ResharedCount"
	return u
}

func (u *__User_Selector) OrderBy_LastActionTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastActionTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastActionTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastActionTime ASC "
	return u
}

func (u *__User_Selector) Select_LastActionTime() *__User_Selector {
	u.selectCol = "LastActionTime"
	return u
}

func (u *__User_Selector) OrderBy_LastPostTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastPostTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastPostTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastPostTime ASC "
	return u
}

func (u *__User_Selector) Select_LastPostTime() *__User_Selector {
	u.selectCol = "LastPostTime"
	return u
}

func (u *__User_Selector) OrderBy_PrimaryFollowingList_Desc() *__User_Selector {
	u.orderBy = " ORDER BY PrimaryFollowingList DESC "
	return u
}

func (u *__User_Selector) OrderBy_PrimaryFollowingList_Asc() *__User_Selector {
	u.orderBy = " ORDER BY PrimaryFollowingList ASC "
	return u
}

func (u *__User_Selector) Select_PrimaryFollowingList() *__User_Selector {
	u.selectCol = "PrimaryFollowingList"
	return u
}

func (u *__User_Selector) OrderBy_CreatedSe_Desc() *__User_Selector {
	u.orderBy = " ORDER BY CreatedSe DESC "
	return u
}

func (u *__User_Selector) OrderBy_CreatedSe_Asc() *__User_Selector {
	u.orderBy = " ORDER BY CreatedSe ASC "
	return u
}

func (u *__User_Selector) Select_CreatedSe() *__User_Selector {
	u.selectCol = "CreatedSe"
	return u
}

func (u *__User_Selector) OrderBy_UpdatedMs_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UpdatedMs DESC "
	return u
}

func (u *__User_Selector) OrderBy_UpdatedMs_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UpdatedMs ASC "
	return u
}

func (u *__User_Selector) Select_UpdatedMs() *__User_Selector {
	u.selectCol = "UpdatedMs"
	return u
}

func (u *__User_Selector) OrderBy_OnlinePrivacyEnum_Desc() *__User_Selector {
	u.orderBy = " ORDER BY OnlinePrivacyEnum DESC "
	return u
}

func (u *__User_Selector) OrderBy_OnlinePrivacyEnum_Asc() *__User_Selector {
	u.orderBy = " ORDER BY OnlinePrivacyEnum ASC "
	return u
}

func (u *__User_Selector) Select_OnlinePrivacyEnum() *__User_Selector {
	u.selectCol = "OnlinePrivacyEnum"
	return u
}

func (u *__User_Selector) OrderBy_LastActivityTime_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastActivityTime DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastActivityTime_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastActivityTime ASC "
	return u
}

func (u *__User_Selector) Select_LastActivityTime() *__User_Selector {
	u.selectCol = "LastActivityTime"
	return u
}

func (u *__User_Selector) OrderBy_Phone2_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Phone2 DESC "
	return u
}

func (u *__User_Selector) OrderBy_Phone2_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Phone2 ASC "
	return u
}

func (u *__User_Selector) Select_Phone2() *__User_Selector {
	u.selectCol = "Phone2"
	return u
}

func (u *__User_Selector) Limit(num int) *__User_Selector {
	u.limit = num
	return u
}

func (u *__User_Selector) Offset(num int) *__User_Selector {
	u.offset = num
	return u
}

func (u *__User_Selector) Order_Rand() *__User_Selector {
	u.orderBy = " ORDER BY RAND() "
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__User_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM sun.user"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__User_Selector) GetRow(db *sqlx.DB) (*User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.User {
		XOLog(sqlstr, whereArgs)
	}

	row := &User{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return nil, err
	}

	row._exists = true

	OnUser_LoadOne(row)

	return row, nil
}

func (u *__User_Selector) GetRows(db *sqlx.DB) ([]*User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.User {
		XOLog(sqlstr, whereArgs)
	}

	var rows []*User
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnUser_LoadMany(rows)

	return rows, nil
}

//dep use GetRows()
func (u *__User_Selector) GetRows2(db *sqlx.DB) ([]User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.User {
		XOLog(sqlstr, whereArgs)
	}
	var rows []*User
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return nil, err
	}

	/*for i:=0;i< len(rows);i++ {
		rows[i]._exists = true
	}*/

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	OnUser_LoadMany(rows)

	rows2 := make([]User, len(rows))
	for i := 0; i < len(rows); i++ {
		cp := *rows[i]
		rows2[i] = cp
	}

	return rows2, nil
}

func (u *__User_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.User {
		XOLog(sqlstr, whereArgs)
	}

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return "", err
	}

	return res, nil
}

func (u *__User_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.User {
		XOLog(sqlstr, whereArgs)
	}
	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__User_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.User {
		XOLog(sqlstr, whereArgs)
	}
	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return nil, err
	}

	return rows, nil
}

func (u *__User_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	if LogTableSqlReq.User {
		XOLog(sqlstr, whereArgs)
	}
	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__User_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE sun.user SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if LogTableSqlReq.User {
		XOLog(sqlstr, allArgs)
	}
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

func (d *__User_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM sun.user WHERE " + wheresStr

	// run query
	if LogTableSqlReq.User {
		XOLog(sqlstr, args)
	}
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  User ////////////////

func MassInsert_User(rows []User, db XODB) error {
	if len(rows) == 0 {
		return errors.New("rows slice should not be empty - inserted nothing")
	}
	var err error
	ln := len(rows)
	//s:= "( ms_question_mark .Columns .PrimaryKey.ColumnName }})," //`(?, ?, ?, ?),`
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO sun.user (" +
		"UserName, UserNameLower, FirstName, LastName, UserTypeEnum, UserLevelEnum, AvatarId, ProfilePrivacyEnum, Phone, About, Email, PasswordHash, PasswordSalt, PostSeq, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedSe, UpdatedMs, OnlinePrivacyEnum, LastActivityTime, Phone2" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserName)
		vals = append(vals, row.UserNameLower)
		vals = append(vals, row.FirstName)
		vals = append(vals, row.LastName)
		vals = append(vals, row.UserTypeEnum)
		vals = append(vals, row.UserLevelEnum)
		vals = append(vals, row.AvatarId)
		vals = append(vals, row.ProfilePrivacyEnum)
		vals = append(vals, row.Phone)
		vals = append(vals, row.About)
		vals = append(vals, row.Email)
		vals = append(vals, row.PasswordHash)
		vals = append(vals, row.PasswordSalt)
		vals = append(vals, row.PostSeq)
		vals = append(vals, row.FollowersCount)
		vals = append(vals, row.FollowingCount)
		vals = append(vals, row.PostsCount)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ResharedCount)
		vals = append(vals, row.LastActionTime)
		vals = append(vals, row.LastPostTime)
		vals = append(vals, row.PrimaryFollowingList)
		vals = append(vals, row.CreatedSe)
		vals = append(vals, row.UpdatedMs)
		vals = append(vals, row.OnlinePrivacyEnum)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.Phone2)

	}

	if LogTableSqlReq.User {
		XOLog(sqlstr, " MassInsert len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

func MassReplace_User(rows []User, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO sun.user (" +
		"UserName, UserNameLower, FirstName, LastName, UserTypeEnum, UserLevelEnum, AvatarId, ProfilePrivacyEnum, Phone, About, Email, PasswordHash, PasswordSalt, PostSeq, FollowersCount, FollowingCount, PostsCount, MediaCount, LikesCount, ResharedCount, LastActionTime, LastPostTime, PrimaryFollowingList, CreatedSe, UpdatedMs, OnlinePrivacyEnum, LastActivityTime, Phone2" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.UserName)
		vals = append(vals, row.UserNameLower)
		vals = append(vals, row.FirstName)
		vals = append(vals, row.LastName)
		vals = append(vals, row.UserTypeEnum)
		vals = append(vals, row.UserLevelEnum)
		vals = append(vals, row.AvatarId)
		vals = append(vals, row.ProfilePrivacyEnum)
		vals = append(vals, row.Phone)
		vals = append(vals, row.About)
		vals = append(vals, row.Email)
		vals = append(vals, row.PasswordHash)
		vals = append(vals, row.PasswordSalt)
		vals = append(vals, row.PostSeq)
		vals = append(vals, row.FollowersCount)
		vals = append(vals, row.FollowingCount)
		vals = append(vals, row.PostsCount)
		vals = append(vals, row.MediaCount)
		vals = append(vals, row.LikesCount)
		vals = append(vals, row.ResharedCount)
		vals = append(vals, row.LastActionTime)
		vals = append(vals, row.LastPostTime)
		vals = append(vals, row.PrimaryFollowingList)
		vals = append(vals, row.CreatedSe)
		vals = append(vals, row.UpdatedMs)
		vals = append(vals, row.OnlinePrivacyEnum)
		vals = append(vals, row.LastActivityTime)
		vals = append(vals, row.Phone2)

	}

	if LogTableSqlReq.User {
		XOLog(sqlstr, " MassReplace len = ", ln, vals)
	}
	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		if LogTableSqlReq.User {
			XOLogErr(err)
		}
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//
